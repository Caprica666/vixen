/*!
 * @file vxevent.h
 * @brief Base event class
 *
 * These small packets of information can be sent
 * between objects in different threads or on different machines.
 *
 * @author Nola Donato
 * @ingroup vixen
 *
 * @see vxmess.h vxsysevents.h
 */

namespace Vixen {

#pragma once
#undef	ERROR

/*!
 * @class Event
 * @brief An event is a small package of data that can be efficiently
 * sent between both local and remote objects.
 *
 * You can use them for loosely coupled asynchronous communication of small
 * amounts of information. Any object may observe the events generated by another by requesting
 * notification thru the @link Messenger messenger @endlink.
 *
 * Each event has a  code which indicates what type of event it is
 * and how it is formatted. An event may have up to 32 bytes of data which
 * can be 32 bit integers, floats, BaseObj or String pointers. 
 * The layout of this event data is described by the data type
 * string associated with the code (see Event::SetDataType).
 * You can subclass Event and create your own events
 * to pass between objects in your application.
 *
 * Event memory management is relatively efficient because all events
 * are allocated from a pool of fixed size blocks. Passing events is
 * also optimized, especially between objects on the same machine.
 *
 * @ingroup vixen
 * @see BaseObj::OnEvent
 * @see @htmlonly <A HREF="oview/psevents.htm">Event Summary</A> @endhtmlonly
 */
class Event : public Core::List
{
public:
	VX_DECLARE_CLASS(Event);

//! Construct an event with the given code, data size and sender.
	Event(int code = 0, int size = 0, const SharedObj* sender = NULL);

//! Copy the source event into the new event.
	Event(const Event& src);

//! Copy the source event into this event.
	virtual Event& operator=(const Event& src);

//! Return the data type descriptor for this event.
	const TCHAR*		GetDataTypes() const;

//! Return the data type descriptor for the given event code.
	static const TCHAR*	GetDataTypes(int code);

//! Set the data type descriptor for the given event code.
	static void			SetDataTypes(int code, const TCHAR* typestr);

//! Return the string name for the given event code.
	static const TCHAR*	GetName(int code);

//! Return the string name for this event.
	const TCHAR*		GetName() const;

//!	Set the string name for the given event code.
	static void			SetName(int code, const TCHAR* name);

//!	Log the event to the current output stream.
	bool				Log(int logtype = Messenger::MESS_EventLog);

//!	Callback to write the event on a stream. 
	virtual	bool		Save(Messenger&) const;

//!	Callback to read the event from a stream. 
	virtual	bool		Parse(Messenger&);

//! Get a pointer to the data associated with the event
	void*				GetData()		{ return this + 1; }

//!< Generate a new, unused event code.
	static int			NewCode();

	int32		Code;		//!< event code
	int32		Size;		//!< bytes of event data
	float		Time;		//!< time stamp.
	ObjRef		Sender;		//!< object which sent the event.

	/*!
	 * @brief Event codes for the system.
	 *
	 * All events generated by Vixen have opcodes in this list.
	 * Users can define their own events which use opcodes > LAST_EVENT.
	 *
	 * @see Event::Code Event::NewCode
	 */
	enum
	{
		MAX_CODE = 100,						// MAX event code
		MAX_BYTES =	(128 - (2 * sizeof(uint32) + sizeof(float) + sizeof(ObjRef))), // MAX number of event data words (header is 5 words)

		NONE = 0,
		LOAD_TEXT,		//!< 1 text file loaded @see LoadEvent
		LOAD_IMAGE,		//!< 2 image file loaded @see LoadEvent
		LOAD_DATA,		//!< 3 load binary data
		LOAD_SCENE,		//!< 4 scene file loaded @see LoadEvent
		MOUSE,			//!< 5 mouse input: X, Y, buttons @see MouseEvent
		KEY,			//!< 6 keyboard input: key, flags @see KeyEvent
		START,			//!< 7 engine started @see Engine
		STOP,			//!< 8 engine stopped @see Engine
		RESET,			//!< 9 engine reset @see Engine
		PICK,			//!< 10 object picked @see Picker PickEvent
		NOPICK,			//!< 11 nothing picked @see RayPicker PickEvent
		SELECT,			//!< 12 object selected @see Picker PickEvent
		DESELECT,		//!< 13 object deselected @see RayPicker PickEvent
		SET_TIME,		//!< 14 set current time @see FrameEvent
		NAVIGATE,		//!< 15 move / turn navigation @see NavigateEvent Navigator
		NAVINPUT,		//!< 16 generic XY input device: X, Y, buttons @see NavInputEvent
		ATTACH_SCENE,	//!< 17 remote scene attached @see SceneEvent
		ENTER,			//!< 18 enter trigger zone @see TriggerEvent Event
		LEAVE,			//!< 19 leave trigger zone @see TriggerEvent Event
		MIDI,			//!< 20 MIDI music event @see MidiEvent MidiInput MidiOutput
		RESIZE,			//!< 21 size change
		EXEC,			//!< 22 script finished executing @see Scriptor
		SCENE_CHANGE,	//!< 23 display scene was changed @see SceneEvent
		CONNECT,		//!< 24 remote connection made @see ConnectEvent
		COLLIDE,		//!< 25 object collision
		SAVE_SCREEN,	//!< 26 save rendering to file
		ERROR,			//!< 27 asynchronous error message @see ErrorEvent
		TRI_HIT,		//!< 28 triangle hit @see TriHitEvent
		TRACK,			//!< 29 event from body or gesture tracker
		SCENE_INIT,		//!< 30 3D context initialized
		LAST_EVENT = TRACK,
	};

protected:
	static	int	MaxCode;	//!< maximum event code generated so far
	static const TCHAR*	TypeStrings[MAX_CODE];	//!< data type strings
	static const TCHAR*	Names[MAX_CODE];		//!< event names
};


} // end Vixen