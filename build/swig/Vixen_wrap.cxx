/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_VixenLib(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_VixenLib(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_VixenLib(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


/* Callback for returning strings to C# without leaking memory */
typedef void * (SWIGSTDCALL* SWIG_CSharpWStringHelperCallback)(const wchar_t *);
static SWIG_CSharpWStringHelperCallback SWIG_csharp_wstring_callback = NULL;


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterWStringCallback_VixenLib(SWIG_CSharpWStringHelperCallback callback) {
  SWIG_csharp_wstring_callback = callback;
}


#include <stdio.h>


#pragma warning(disable:4197)
#include "vixen.h"
#include "vxutil.h"
#include "physics/havok/vxphysics.h"
#include "physics/havok/vxcloth.h"

using namespace Vixen;
using namespace Vixen::Core;



			#define Vixen_Core_BaseObj_ClassName_get(self_) self_->ClassName()
			#define Vixen_Core_BaseObj_ClassName_set(self_, val_)
		

			#define Vixen_Core_BaseObj_ClassID_get(self_) self_->ClassID()
			#define Vixen_Core_BaseObj_ClassID_set(self_, val_)
		

			#define Vixen_SharedObj_Name_get(self_) self_->GetName()
			#define Vixen_SharedObj_Name_set(self_, val_) self_->SetName(val_)
		

			#define Vixen_SharedObj_ID_get(self_) self_->GetID()
			#define Vixen_SharedObj_ID_set(self_, val_) self_->SetID(val_)
		

			#define Vixen_SharedObj_Active_get(self_) self_->IsActive()
			#define Vixen_SharedObj_Active_set(self_, val_) self_->SetActive(val_)
		

			#define Vixen_SharedObj_Changed_get(self_) self_->HasChanged()
			#define Vixen_SharedObj_Changed_set(self_, val_) self_->SetChanged(val_)
		
SWIGINTERN void Vixen_SharedObj_Dump__SWIG_0(Vixen::SharedObj *self){
			self->Print();
		}
SWIGINTERN void Vixen_SharedObj_Dump__SWIG_1(Vixen::SharedObj *self,TCHAR const *options){
			int opts = SharedObj::PRINT_Default;
			if (STRSTR(options, TEXT("data")))
				opts |= SharedObj::PRINT_Data;
			self->Print(vixen_debug, opts);
		}
SWIGINTERN Vixen::ObjRef Vixen_ObjArray_getitem(Vixen::ObjArray *self,long long index){
		long long size = self->GetSize();
		if ((index >= 0) && (index < size))
			return self->GetAt(index);
		throw std::out_of_range("index");
	}
SWIGINTERN void Vixen_ObjArray_setitem(Vixen::ObjArray *self,long long index,Vixen::ObjRef const &val){
		if (!self->SetAt(index, val))
			throw std::out_of_range("index");
	}
SWIGINTERN void Vixen_ObjArray_AddRange(Vixen::ObjArray *self,Vixen::Array< Vixen::ObjRef > const &values){
		self->Merge(values);
	}
SWIGINTERN Vixen::ObjArray *Vixen_ObjArray_GetRange(Vixen::ObjArray *self,long index,long count){
		if (index < 0)
			throw std::out_of_range("index");
		if (count < 0)
			throw std::out_of_range("count");
		if ((index >= self->GetSize() + 1) ||
			(index + count) > self->GetSize())
			throw std::invalid_argument("invalid range");
		ObjArray* temp = new ObjArray(count);

		for (int i = 0; i < count; ++i)
			temp->SetAt(i, self->GetAt(index + i));
		return temp;
	}
SWIGINTERN void Vixen_ObjArray_Insert(Vixen::ObjArray *self,int index,Vixen::ObjRef const &x){
		throw std::out_of_range("index");
	}
SWIGINTERN void Vixen_ObjArray_InsertRange(Vixen::ObjArray *self,int index,Vixen::Array< Vixen::ObjRef > const &values){
		throw std::out_of_range("index");
	}
SWIGINTERN void Vixen_ObjArray_RemoveAt(Vixen::ObjArray *self,int index){
		if ((index < 0) || (index >= self->GetSize()))
			throw std::out_of_range("index");
		self->RemoveAt(index);
	}
SWIGINTERN void Vixen_ObjArray_RemoveElem(Vixen::ObjArray *self,int index){
		if ((index < 0) || (index >= self->GetSize()))
			throw std::out_of_range("index");
		self->RemoveAt(index);
	}
SWIGINTERN void Vixen_ObjArray_RemoveRange(Vixen::ObjArray *self,int index,int count){
		if (index < 0)
			throw std::out_of_range("index");
		if (count < 0)
			throw std::out_of_range("count");
		if (index + count > self->GetSize())
			throw std::invalid_argument("invalid range");
		throw std::invalid_argument("invalid range");
	}
SWIGINTERN Vixen::ObjArray *Vixen_ObjArray_Repeat(Vixen::ObjRef const &value,int count){
		if (count < 0)
			throw std::out_of_range("count");
		ObjArray* temp = new ObjArray(count);

		for (int i = 0; i < count; ++i)
			temp->SetAt(i, value);
		return temp;
	}
SWIGINTERN void Vixen_ObjArray_Reverse(Vixen::ObjArray *self,int index,int count){
		if (index < 0)
			throw std::out_of_range("index");
		if (count < 0)
			throw std::out_of_range("count");
		if ((index >= self->GetSize() + 1) || (index + count > self->GetSize()))
			throw std::invalid_argument("invalid range");
		intptr start, end;
		for (start = index, end = index + count - 1; start < end; ++start, --end)
		{
			ObjRef temp = self->GetAt(start);
			self->SetAt(start, self->GetAt(end));
			self->SetAt(end, temp);
		}
    }
SWIGINTERN void Vixen_ObjArray_SetRange(Vixen::ObjArray *self,long index,Vixen::Array< Vixen::ObjRef > const &values){
	if (index < 0)
		throw std::out_of_range("index");
	if ((index + values.GetSize()) > self->GetSize())
		throw std::out_of_range("index");
	for (intptr i = 0; i < values.GetSize(); ++i)
		self->SetAt(index + i, values.GetAt(i));
	}
SWIGINTERN bool Vixen_ObjArray_Contains(Vixen::ObjArray *self,Vixen::ObjRef const &value){ return (self->Find(value) >= 0); }
SWIGINTERN int Vixen_ObjArray_IndexOf(Vixen::ObjArray *self,Vixen::ObjRef const &value){
			intptr i = self->Find(value);
			if (i >= INT_MAX)
				throw std::out_of_range("IndexOf");
			return (int) i;
		}
SWIGINTERN int Vixen_ObjArray_LastIndexOf(Vixen::ObjArray *self,Vixen::ObjRef const &value){
			intptr n = self->GetSize();
			for (intptr i = n - 1; i >= 0; --i)
				if (self->GetAt(i) == value)
				{
					if (i >= INT_MAX)
						throw std::out_of_range("LastIndexOf");
					return (int) i;
				}
			return -1;
		}
SWIGINTERN bool Vixen_ObjArray_Remove(Vixen::ObjArray *self,Vixen::ObjRef const &value){
			intptr index = self->Find(value);
			if (index < 0)
				return false;
			self->RemoveAt(index);
			return true;
		}
SWIGINTERN int32 Vixen_IntArray_getitem(Vixen::IntArray *self,long long index){
		long long size = self->GetSize();
		if ((index >= 0) && (index < size))
			return self->GetAt(index);
		throw std::out_of_range("index");
	}
SWIGINTERN void Vixen_IntArray_setitem(Vixen::IntArray *self,long long index,int32 const &val){
		if (!self->SetAt(index, val))
			throw std::out_of_range("index");
	}
SWIGINTERN void Vixen_IntArray_AddRange(Vixen::IntArray *self,Vixen::Array< int32 > const &values){
		self->Merge(values);
	}
SWIGINTERN Vixen::IntArray *Vixen_IntArray_GetRange(Vixen::IntArray *self,long index,long count){
		if (index < 0)
			throw std::out_of_range("index");
		if (count < 0)
			throw std::out_of_range("count");
		if ((index >= self->GetSize() + 1) ||
			(index + count) > self->GetSize())
			throw std::invalid_argument("invalid range");
		IntArray* temp = new IntArray(count);

		for (int i = 0; i < count; ++i)
			temp->SetAt(i, self->GetAt(index + i));
		return temp;
	}
SWIGINTERN void Vixen_IntArray_Insert(Vixen::IntArray *self,int index,int32 const &x){
		throw std::out_of_range("index");
	}
SWIGINTERN void Vixen_IntArray_InsertRange(Vixen::IntArray *self,int index,Vixen::Array< int32 > const &values){
		throw std::out_of_range("index");
	}
SWIGINTERN void Vixen_IntArray_RemoveAt(Vixen::IntArray *self,int index){
		if ((index < 0) || (index >= self->GetSize()))
			throw std::out_of_range("index");
		self->RemoveAt(index);
	}
SWIGINTERN void Vixen_IntArray_RemoveElem(Vixen::IntArray *self,int index){
		if ((index < 0) || (index >= self->GetSize()))
			throw std::out_of_range("index");
		self->RemoveAt(index);
	}
SWIGINTERN void Vixen_IntArray_RemoveRange(Vixen::IntArray *self,int index,int count){
		if (index < 0)
			throw std::out_of_range("index");
		if (count < 0)
			throw std::out_of_range("count");
		if (index + count > self->GetSize())
			throw std::invalid_argument("invalid range");
		throw std::invalid_argument("invalid range");
	}
SWIGINTERN Vixen::IntArray *Vixen_IntArray_Repeat(int32 const &value,int count){
		if (count < 0)
			throw std::out_of_range("count");
		IntArray* temp = new IntArray(count);

		for (int i = 0; i < count; ++i)
			temp->SetAt(i, value);
		return temp;
	}
SWIGINTERN void Vixen_IntArray_Reverse(Vixen::IntArray *self,int index,int count){
		if (index < 0)
			throw std::out_of_range("index");
		if (count < 0)
			throw std::out_of_range("count");
		if ((index >= self->GetSize() + 1) || (index + count > self->GetSize()))
			throw std::invalid_argument("invalid range");
		intptr start, end;
		for (start = index, end = index + count - 1; start < end; ++start, --end)
		{
			int32 temp = self->GetAt(start);
			self->SetAt(start, self->GetAt(end));
			self->SetAt(end, temp);
		}
    }
SWIGINTERN void Vixen_IntArray_SetRange(Vixen::IntArray *self,long index,Vixen::Array< int32 > const &values){
	if (index < 0)
		throw std::out_of_range("index");
	if ((index + values.GetSize()) > self->GetSize())
		throw std::out_of_range("index");
	for (intptr i = 0; i < values.GetSize(); ++i)
		self->SetAt(index + i, values.GetAt(i));
	}
SWIGINTERN bool Vixen_IntArray_Contains(Vixen::IntArray *self,int32 const &value){ return (self->Find(value) >= 0); }
SWIGINTERN int Vixen_IntArray_IndexOf(Vixen::IntArray *self,int32 const &value){
			intptr i = self->Find(value);
			if (i >= INT_MAX)
				throw std::out_of_range("IndexOf");
			return (int) i;
		}
SWIGINTERN int Vixen_IntArray_LastIndexOf(Vixen::IntArray *self,int32 const &value){
			intptr n = self->GetSize();
			for (intptr i = n - 1; i >= 0; --i)
				if (self->GetAt(i) == value)
				{
					if (i >= INT_MAX)
						throw std::out_of_range("LastIndexOf");
					return (int) i;
				}
			return -1;
		}
SWIGINTERN bool Vixen_IntArray_Remove(Vixen::IntArray *self,int32 const &value){
			intptr index = self->Find(value);
			if (index < 0)
				return false;
			self->RemoveAt(index);
			return true;
		}
SWIGINTERN float Vixen_FloatArray_getitem(Vixen::FloatArray *self,long long index){
		long long size = self->GetSize();
		if ((index >= 0) && (index < size))
			return self->GetAt(index);
		throw std::out_of_range("index");
	}
SWIGINTERN void Vixen_FloatArray_setitem(Vixen::FloatArray *self,long long index,float const &val){
		if (!self->SetAt(index, val))
			throw std::out_of_range("index");
	}
SWIGINTERN void Vixen_FloatArray_AddRange(Vixen::FloatArray *self,Vixen::Array< float > const &values){
		self->Merge(values);
	}
SWIGINTERN Vixen::FloatArray *Vixen_FloatArray_GetRange(Vixen::FloatArray *self,long index,long count){
		if (index < 0)
			throw std::out_of_range("index");
		if (count < 0)
			throw std::out_of_range("count");
		if ((index >= self->GetSize() + 1) ||
			(index + count) > self->GetSize())
			throw std::invalid_argument("invalid range");
		FloatArray* temp = new FloatArray(count);

		for (int i = 0; i < count; ++i)
			temp->SetAt(i, self->GetAt(index + i));
		return temp;
	}
SWIGINTERN void Vixen_FloatArray_Insert(Vixen::FloatArray *self,int index,float const &x){
		throw std::out_of_range("index");
	}
SWIGINTERN void Vixen_FloatArray_InsertRange(Vixen::FloatArray *self,int index,Vixen::Array< float > const &values){
		throw std::out_of_range("index");
	}
SWIGINTERN void Vixen_FloatArray_RemoveAt(Vixen::FloatArray *self,int index){
		if ((index < 0) || (index >= self->GetSize()))
			throw std::out_of_range("index");
		self->RemoveAt(index);
	}
SWIGINTERN void Vixen_FloatArray_RemoveElem(Vixen::FloatArray *self,int index){
		if ((index < 0) || (index >= self->GetSize()))
			throw std::out_of_range("index");
		self->RemoveAt(index);
	}
SWIGINTERN void Vixen_FloatArray_RemoveRange(Vixen::FloatArray *self,int index,int count){
		if (index < 0)
			throw std::out_of_range("index");
		if (count < 0)
			throw std::out_of_range("count");
		if (index + count > self->GetSize())
			throw std::invalid_argument("invalid range");
		throw std::invalid_argument("invalid range");
	}
SWIGINTERN Vixen::FloatArray *Vixen_FloatArray_Repeat(float const &value,int count){
		if (count < 0)
			throw std::out_of_range("count");
		FloatArray* temp = new FloatArray(count);

		for (int i = 0; i < count; ++i)
			temp->SetAt(i, value);
		return temp;
	}
SWIGINTERN void Vixen_FloatArray_Reverse(Vixen::FloatArray *self,int index,int count){
		if (index < 0)
			throw std::out_of_range("index");
		if (count < 0)
			throw std::out_of_range("count");
		if ((index >= self->GetSize() + 1) || (index + count > self->GetSize()))
			throw std::invalid_argument("invalid range");
		intptr start, end;
		for (start = index, end = index + count - 1; start < end; ++start, --end)
		{
			float temp = self->GetAt(start);
			self->SetAt(start, self->GetAt(end));
			self->SetAt(end, temp);
		}
    }
SWIGINTERN void Vixen_FloatArray_SetRange(Vixen::FloatArray *self,long index,Vixen::Array< float > const &values){
	if (index < 0)
		throw std::out_of_range("index");
	if ((index + values.GetSize()) > self->GetSize())
		throw std::out_of_range("index");
	for (intptr i = 0; i < values.GetSize(); ++i)
		self->SetAt(index + i, values.GetAt(i));
	}
SWIGINTERN bool Vixen_FloatArray_Contains(Vixen::FloatArray *self,float const &value){ return (self->Find(value) >= 0); }
SWIGINTERN int Vixen_FloatArray_IndexOf(Vixen::FloatArray *self,float const &value){
			intptr i = self->Find(value);
			if (i >= INT_MAX)
				throw std::out_of_range("IndexOf");
			return (int) i;
		}
SWIGINTERN int Vixen_FloatArray_LastIndexOf(Vixen::FloatArray *self,float const &value){
			intptr n = self->GetSize();
			for (intptr i = n - 1; i >= 0; --i)
				if (self->GetAt(i) == value)
				{
					if (i >= INT_MAX)
						throw std::out_of_range("LastIndexOf");
					return (int) i;
				}
			return -1;
		}
SWIGINTERN bool Vixen_FloatArray_Remove(Vixen::FloatArray *self,float const &value){
			intptr index = self->Find(value);
			if (index < 0)
				return false;
			self->RemoveAt(index);
			return true;
		}

			#define Vixen_Vec2_Length_get(self_) self_->Length()
			#define Vixen_Vec2_Length_set(self_, val_)
		

			#define Vixen_Vec2_LengthSquared_get(self_) self_->LengthSquared()
			#define Vixen_Vec2_LengthSquared_set(self_, val_)
		

			#define Vixen_Vec3_Length_get(self_) self_->Length()
			#define Vixen_Vec3_Length_set(self_, val_)
		

			#define Vixen_Vec3_LengthSquared_get(self_) self_->LengthSquared()
			#define Vixen_Vec3_LengthSquared_set(self_, val_)
		

			#define Vixen_Vec4_Length_get(self_) self_->Length()
			#define Vixen_Vec4_Length_set(self_, val_)
		

			#define Vixen_Vec4_LengthSquared_get(self_) self_->LengthSquared()
			#define Vixen_Vec4_LengthSquared_set(self_, val_)
		

			#define Vixen_Box2_Height_get(self_) self_->Height()
			#define Vixen_Box2_Height_set(self_, val_)
		

			#define Vixen_Box2_Width_get(self_) self_->Width()
			#define Vixen_Box2_Width_set(self_, val_)
		

			#define Vixen_Box2_Center_get(self_) self_->Center()
			#define Vixen_Box2_Center_set(self_, val_)
		

			#define Vixen_Box3_Height_get(self_) self_->Height()
			#define Vixen_Box3_Height_set(self_, val_)
		

			#define Vixen_Box3_Width_get(self_) self_->Width()
			#define Vixen_Box3_Width_set(self_, val_)
		

			#define Vixen_Box3_Depth_get(self_) self_->Depth()
			#define Vixen_Box3_Depth_set(self_, val_)
		

			#define Vixen_Box3_Center_get(self_) self_->Center()
			#define Vixen_Box3_Center_set(self_, val_)
		

			#define Vixen_Model_Hints_get(self_) self_->GetHints()
			#define Vixen_Model_Hints_set(self_, val_) self_->SetHints(val_)
		

			#define Vixen_Model_Translation_get(self_) *(new Vixen::Vec3(self_->GetTranslation()))
			#define Vixen_Model_Translation_set(self_, val_) self_->SetTranslation(val_)
		

			#define Vixen_Model_Rotation_get(self_) *(new Vixen::Quat(self_->GetRotation()))
			#define Vixen_Model_Rotation_set(self_, val_) self_->SetRotation(val_)
		

			#define Vixen_Model_Center_get(self_) *(new Vixen::Vec3(self_->GetCenter()))
		

			#define Vixen_Model_Culling_get(self_) self_->IsCulling()
			#define Vixen_Model_Culling_set(self_, val_) self_->SetCulling(val_)
		

			#define Vixen_Model_Transform_get(self_) self_->GetTransform()
			#define Vixen_Model_Transform_set(self_, val_) self_->SetTransform(val_)
		

			#define Vixen_ExtModel_FileName_get(self_) self_->GetFileName()
			#define Vixen_ExtModel_FileName_set(self_, val_) self_->SetFileName(val_)
		

			#define Vixen_ExtModel_ExtName_get(self_) self_->GetExtName()
			#define Vixen_ExtModel_ExtName_set(self_, val_) self_->SetExtName(val_)
		

			#define Vixen_ExtModel_Options_get(self_) self_->GetOptions()
			#define Vixen_ExtModel_Options_set(self_, val_) self_->SetOptions(val_)
		

			#define Vixen_Camera_ViewVol_get(self_) *(new Vixen::Box3(self_->GetViewVol()))
			#define Vixen_Camera_ViewVol_set(self_, val_) self_->SetViewVol(val_)
		

			#define Vixen_Camera_Type_get(self_) self_->GetType()
			#define Vixen_Camera_Type_set(self_, val_) self_->SetType(val_)
		

			#define Vixen_Camera_Aspect_get(self_) self_->GetAspect()
			#define Vixen_Camera_Aspect_set(self_, val_) self_->SetAspect(val_)
		

#define Vixen_Camera_FieldOfView_get(self_) self_->GetFOV()
#define Vixen_Camera_FieldOfView_set(self_, val_) self_->SetFOV(val_)
  

			#define Vixen_Camera_Hither_get(self_) self_->GetHither()
			#define Vixen_Camera_Hither_set(self_, val_) self_->SetHither(val_)
		

			#define Vixen_Camera_Yon_get(self_) self_->GetYon()
			#define Vixen_Camera_Yon_set(self_, val_) self_->SetYon(val_)
		

			#define Vixen_Camera_Height_get(self_) self_->GetHeight()
			#define Vixen_Camera_Height_set(self_, val_) self_->SetHeight(val_)
		

			#define Vixen_Texture_Width_get(self_) self_->GetWidth()
			#define Vixen_Texture_Width_set(self_, val_) self_->SetWidth(val_)
		

			#define Vixen_Texture_Height_get(self_) self_->GetHeight()
			#define Vixen_Texture_Height_set(self_, val_) self_->SetHeight(val_)
		

			#define Vixen_Texture_Depth_get(self_) self_->GetDepth()
			#define Vixen_Texture_Depth_set(self_, val_) self_->SetDepth(val_)
		

			#define Vixen_Texture_NumLod_get(self_) self_->GetNumLod()
			#define Vixen_Texture_NumLod_set(self_, val_) self_->SetNumLod(val_)
		

			#define Vixen_Texture_Format_get(self_) self_->GetFormat()
			#define Vixen_Texture_Format_set(self_, val_) self_->SetFormat(val_)
		

			#define Vixen_Texture_TranspColor_get(self_) *(new Vixen::Col4(self_->GetTranspColor()))
			#define Vixen_Texture_TranspColor_set(self_, val_) self_->SetTranspColor(val_)
		

			#define Vixen_Texture_Bitmap_get(self_) self_->GetBitmap()
			#define Vixen_Texture_Bitmap_set(self_, val_) self_->SetBitmap(val_)
		

			#define Vixen_Texture_FileName_get(self_) self_->GetFileName()
			#define Vixen_Texture_FileName_set(self_, val_) self_->SetFileName(val_)
		

			#define Vixen_DeviceBuffer_Layout_get(self_) self_->GetLayout()
			#define Vixen_DeviceBuffer_Layout_set(self_, val_)
		

			#define Vixen_DeviceBuffer_ByteSize_get(self_) self_->GetByteSize()
			#define Vixen_DeviceBuffer_ByteSize_set(self_, val_)
		

			#define Vixen_Shader_FileName_get(self_) self_->GetFileName()
			#define Vixen_Shader_FileName_set(self_, val_) self_->SetFileName(val_)
		

			#define Vixen_Shader_Source_get(self_) self_->GetSource()
			#define Vixen_Shader_Source_set(self_, val_) self_->SetSource(val_)
		

			#define Vixen_Shader_InputDesc_get(self_) self_->GetInputDesc()
			#define Vixen_Shader_InputDesc_set(self_, val_) self_->SetInputDesc(val_)
		

			#define Vixen_Shader_OutputDesc_get(self_) self_->GetOutputDesc()
			#define Vixen_Shader_OutputDesc_set(self_, val_) self_->SetOutputDesc(val_)
		

			#define Vixen_Sampler_Texture_get(self_) self_->GetTexture()
			#define Vixen_Sampler_Texture_set(self_, val_) self_->SetTexture(val_)
		

			#define Vixen_Appearance_Material_get(self_) self_->GetMaterial()
			#define Vixen_Appearance_Material_set(self_, val_) self_->SetMaterial(val_)
		

			#define Vixen_Appearance_PixelShader_get(self_) self_->GetPixelShader()
			#define Vixen_Appearance_PixelShader_set(self_, val_) self_->SetPixelShader(val_)
		

			#define Vixen_Appearance_NumSamplers_get(self_) self_->GetNumSamplers()
			#define Vixen_Appearance_NumSamplers_set(self_, val_)
		

			#define Vixen_PhongMaterial_Emission_get(self_) *(new Vixen::Col4(self_->GetEmission()))
			#define Vixen_PhongMaterial_Emission_set(self_, val_) self_->SetEmission(val_)
		

			#define Vixen_PhongMaterial_Shine_get(self_) self_->GetShine()
			#define Vixen_PhongMaterial_Shine_set(self_, val_) self_->SetShine(val_)
		

			#define Vixen_PhongMaterial_Ambient_get(self_) *(new Vixen::Col4(self_->GetAmbient()))
			#define Vixen_PhongMaterial_Ambient_set(self_, val_) self_->SetAmbient(val_)
		

			#define Vixen_PhongMaterial_Diffuse_get(self_) *(new Vixen::Col4(self_->GetDiffuse()))
			#define Vixen_PhongMaterial_Diffuse_set(self_, val_) self_->SetDiffuse(val_)
		

			#define Vixen_PhongMaterial_Specular_get(self_) *(new Vixen::Col4(self_->GetSpecular()))
			#define Vixen_PhongMaterial_Specular_set(self_, val_) self_->SetSpecular(val_)
		

			#define Vixen_PhongMaterial_Emission_get(self_) *(new Vixen::Col4(self_->GetEmission()))
			#define Vixen_PhongMaterial_Emission_set(self_, val_) self_->SetEmission(val_)
		

			#define Vixen_VertexArray_Style_get(self_) self_->GetStyle()
			#define Vixen_VertexArray_Style_set(self_, val_)
		

			#define Vixen_VertexArray_VertexSize_get(self_) self_->GetVtxSize()
			#define Vixen_VertexArray_VertexSize_set(self_, val_)
		

			#define Vixen_Mesh_Vertices_get(self_) self_->GetVertices()
			#define Vixen_Mesh_Vertices_set(self_, val_) self_->SetVertices(val_)
		

			#define Vixen_Mesh_Indices_get(self_) self_->GetIndices()
			#define Vixen_Mesh_Indices_set(self_, val_) self_->SetIndices(val_)
		

			#define Vixen_Mesh_VertexSize_get(self_) self_->GetVtxSize()
			#define Vixen_Mesh_VertexSize_set(self_, val_)
		

			#define Vixen_Mesh_IndexCount_get(self_) self_->GetNumIdx()
			#define Vixen_Mesh_IndexCount_set(self_, val_)
		

#define Vixen_VertexArray_VertexCount_get(self_) self_->GetNumVtx()
#define Vixen_VertexArray_VertexCount_set(self_, val_) self_->SetNumVtx(val_)
  

#define Vixen_VertexArray_MaxVerts_get(self_) self_->GetMaxVtx()
#define Vixen_VertexArray_MaxVerts_set(self_, val_) self_->SetMaxVtx(val_)
  

#define Vixen_Mesh_VertexCount_get(self_) self_->GetNumVtx()
#define Vixen_Mesh_VertexCount_set(self_, val_) self_->SetNumVtx(val_)
  

#define Vixen_Mesh_StartVertex_get(self_) self_->GetStartVtx()
#define Vixen_Mesh_StartVertex_set(self_, val_) self_->SetStartVtx(val_)
  

#define Vixen_Mesh_EndVertex_get(self_) self_->GetEndVtx()
#define Vixen_Mesh_EndVertex_set(self_, val_) self_->SetEndVtx(val_)
  
SWIGINTERN void Vixen_VertexArray_getitem(Vixen::VertexArray *self,long long index,float *dstArray){
		VertexPool::ConstIter iter(self);
		const float* srcArray = iter.GetVtx(index);

		if (srcArray == NULL)
			throw std::out_of_range("index");
		memcpy(dstArray, srcArray, iter.GetVtxSize() * sizeof(float));
	}
SWIGINTERN void Vixen_VertexArray_setitem(Vixen::VertexArray *self,long long index,float const *floatArray){
		if (index > self->GetMaxVtx())
		{
			self->SetMaxVtx(index + 1);
			self->SetNumVtx(index + 1);
		}
		VertexPool::Iter iter(self);
		if (!iter.CopyVtx(index, floatArray))
			throw std::out_of_range("index");
	}
SWIGINTERN int Vixen_VertexArray_LastIndexOf(Vixen::VertexArray *self,float const *floatArray){
		VertexArray::ConstIter iter(self);
		intptr nverts = self->GetNumVtx();

		if (nverts >= INT_MAX)
			throw std::out_of_range("IndexOf");
		for (int i = 0; i < (int) nverts; ++i)
		{
			if (iter.CompareVtx(i, floatArray))
				return i;
		}
		return -1;
	}
SWIGINTERN int Vixen_VertexArray_IndexOf(Vixen::VertexArray *self,float const *floatArray){
		VertexArray::ConstIter iter(self);
		intptr nverts = self->GetNumVtx();

		if (nverts >= INT_MAX)
			throw std::out_of_range("IndexOf");
		for (int i = 0; i < (int) nverts; ++i)
		{
			if (iter.CompareVtx(i, floatArray))
				return i;
		}
		return -1;
	}
SWIGINTERN Vixen::VertexArray *Vixen_VertexArray_Repeat(float const *floatArray,int count){
		throw std::invalid_argument("Repeat");
	}
SWIGINTERN void Vixen_VertexArray_Insert(Vixen::VertexArray *self,int index,float *floatArray){
		throw std::invalid_argument("Insert");
	}
SWIGINTERN void Vixen_VertexArray_InsertRange(Vixen::VertexArray *self,int index,float const *floatArray){
		throw std::invalid_argument("InsertRange");
	}
SWIGINTERN void Vixen_VertexArray_RemoveElem(Vixen::VertexArray *self,int index){
		throw std::invalid_argument("RemoveElem");
	}
SWIGINTERN void Vixen_VertexArray_RemoveAt(Vixen::VertexArray *self,int index){
		throw std::invalid_argument("RemoveAt");
	}
SWIGINTERN void Vixen_VertexArray_RemoveRange(Vixen::VertexArray *self,int index,int count){
		throw std::invalid_argument("RemoveRange");
	}
SWIGINTERN void Vixen_VertexArray_Reverse(Vixen::VertexArray *self,long index,long count){
		throw std::invalid_argument("Reverse");
    }
SWIGINTERN bool Vixen_VertexArray_Remove(Vixen::VertexArray *self,float const *floatArray){
		throw std::invalid_argument("Remove");
	}

			#define Vixen_Shape_Geometry_get(self_) self_->GetGeometry()
			#define Vixen_Shape_Geometry_set(self_, val_) self_->SetGeometry(val_)
		

			#define Vixen_Shape_Appearance_get(self_) self_->GetAppearance()
			#define Vixen_Shape_Appearance_set(self_, val_) self_->SetAppearance(val_)
		

			#define Vixen_Light_Color_get(self_) *(new Vixen::Col4(self_->GetColor()))
			#define Vixen_Light_Color_set(self_, val_) self_->SetColor(val_)
		

			#define Vixen_Light_Radius_get(self_) self_->GetRadius()
			#define Vixen_Light_Radius_set(self_, val_) self_->SetRadius(val_)
		

			#define Vixen_SpotLight_OuterAngle_get(self_) self_->GetOuterAngle()
			#define Vixen_SpotLight_OuterAngle_set(self_, val_) self_->SetOuterAngle(val_)
		

			#define Vixen_SpotLight_InnerAngle_get(self_) self_->GetInnerAngle()
			#define Vixen_SpotLight_InnerAngle_set(self_, val_) self_->SetInnerAngle(val_)
		

			#define Vixen_SpotLight_Decay_get(self_) self_->GetDecay()
			#define Vixen_SpotLight_Decay_set(self_, val_) self_->SetDecay(val_)
		

			#define Vixen_Engine_State_get(self_) self_->GetState()
			#define Vixen_Engine_State_set(self_, val_)
		

			#define Vixen_Engine_Elapsed_get(self_) self_->GetElapsed()
			#define Vixen_Engine_Elapsed_set(self_, val_)
		

			#define Vixen_Engine_StopTime_get(self_) self_->GetStopTime()
			#define Vixen_Engine_StopTime_set(self_, val_)
		

			#define Vixen_Engine_Target_get(self_) self_->GetTarget()
			#define Vixen_Engine_Target_set(self_, val_) self_->SetTarget(val_)
		

			#define Vixen_Engine_StartTime_get(self_) self_->GetStartTime()
			#define Vixen_Engine_StartTime_set(self_, val_) self_->SetStartTime(val_)
		

			#define Vixen_Engine_Control_get(self_) self_->GetControl()
			#define Vixen_Engine_Control_set(self_, val_) self_->SetControl(val_)
		

			#define Vixen_Engine_Speed_get(self_) self_->GetSpeed()
			#define Vixen_Engine_Speed_set(self_, val_) self_->SetSpeed(val_)
		

			#define Vixen_Engine_Duration_get(self_) self_->GetDuration()
			#define Vixen_Engine_Duration_set(self_, val_) self_->SetDuration(val_)
		

			#define Vixen_Engine_TimeOfs_get(self_) self_->GetTimeOfs()
			#define Vixen_Engine_TimeOfs_set(self_, val_) self_->SetTimeOfs(val_)
		

			#define Vixen_Evaluator_DestType_get(self_) self_->GetDestType()
			#define Vixen_Evaluator_DestType_set(self_, val_) self_->SetDestType(val_)
		

			#define Vixen_Evaluator_ValSize_get(self_) self_->GetValSize()
			#define Vixen_Evaluator_ValSize_set(self_, val_) self_->SetValSize(val_)
		

			#define Vixen_Evaluator_Alpha_get(self_) self_->GetAlpha()
			#define Vixen_Evaluator_Alpha_set(self_, val_) self_->SetAlpha(val_)
		

			#define Vixen_Interpolator_InterpType_get(self_) self_->GetInterpType()
			#define Vixen_Interpolator_InterpType_set(self_, val_) self_->SetInterpType(val_)
		

			#define Vixen_Interpolator_Keys_get(self_) self_->GetKeys()
			#define Vixen_Interpolator_Keys_set(self_, val_) self_->SetKeys(val_)
		

			#define Vixen_KeyFramer_Part_get(self_) self_->GetPart()
			#define Vixen_KeyFramer_Part_set(self_, val_) self_->SetPart(val_)
		

			#define Vixen_Transformer_Position_get(self_) self_->GetPosition()
			#define Vixen_Transformer_Position_set(self_, val_) self_->SetPosition(val_)
		

			#define Vixen_Transformer_Scale_get(self_) self_->GetScale()
			#define Vixen_Transformer_Scale_set(self_, val_) self_->SetScale(val_)
		

			#define Vixen_Transformer_Rotation_get(self_) self_->GetRotation()
			#define Vixen_Transformer_Rotation_set(self_, val_) self_->SetRotation(val_)
		

			#define Vixen_Transformer_LookRotation_get(self_) self_->GetLookRotation()
			#define Vixen_Transformer_LookRotation_set(self_, val_) self_->SetLookRotation(val_)
		

			#define Vixen_Transformer_Transform_get(self_) self_->GetTransform()
			#define Vixen_Transformer_Transform_set(self_, val_) self_->SetTransform(val_)
		

			#define Vixen_Transformer_BoneIndex_get(self_) self_->GetBoneIndex()
			#define Vixen_Transformer_BoneIndex_set(self_, val_) self_->SetBoneIndex(val_)
		

			#define Vixen_Trigger_Options_get(self_) self_->GetOptions()
			#define Vixen_Trigger_Options_set(self_, val_) self_->SetOptions(val_)
		

			#define Vixen_Trigger_Geometry_get(self_) self_->GetGeometry()
			#define Vixen_Trigger_Geometry_set(self_, val_) self_->SetGeometry(val_)
		

			#define Vixen_Trigger_Colliders_get(self_) self_->GetColliders()
			#define Vixen_Trigger_Colliders_set(self_, val_) self_->SetColliders(val_)
		

			#define Vixen_Skeleton_BoneAxis_get(self_) self_->GetBoneAxis()
			#define Vixen_Skeleton_BoneAxis_set(self_, val_) self_->SetBoneAxis(val_)
		

			#define Vixen_Skeleton_Bound_get(self_) self_->GetBound()
			#define Vixen_Skeleton_Bound_set(self_, val_)
		

			#define Vixen_Skeleton_NumBones_get(self_) self_->GetNumBones()
			#define Vixen_Skeleton_NumBones_set(self_, val_)
		

			#define Vixen_Skeleton_Position_get(self_) self_->GetPosition()
			#define Vixen_Skeleton_Position_set(self_, val_) self_->SetPosition(val_)
		

			#define Vixen_Skeleton_Pose_get(self_) self_->GetPose()
			#define Vixen_Skeleton_Pose_set(self_, val_) self_->SetPose(val_)
		

			#define Vixen_Skeleton_BindPose_get(self_) self_->GetBindPose()
			#define Vixen_Skeleton_BindPose_set(self_, val_) self_->SetBindPose(val_)
		

			#define Vixen_Deformer_RestLocs_get(self_) self_->GetRestLocs()
			#define Vixen_Deformer_RestLocs_set(self_, val_) self_->SetRestLocs(val_)
		

			#define Vixen_Skin_Skeleton_get(self_) self_->GetSkeleton()
			#define Vixen_Skin_Skeleton_set(self_, val_) self_->SetSkeleton(val_)
		

			#define Vixen_Skin_VertexMap_get(self_) self_->GetVertexMap()
			#define Vixen_Skin_VertexMap_set(self_, val_) self_->SetVertexMap(val_)
		

			#define Vixen_PoseMapper_Source_get(self_) self_->GetSource()
			#define Vixen_PoseMapper_Source_set(self_, val_) self_->SetSource(val_)
		

			#define Vixen_Scriptor_Directory_get(self_) self_->GetDirectory()
			#define Vixen_Scriptor_Directory_set(self_, val_) self_->SetDirectory(val_)
		

			#define Vixen_Morph_Sources_get(self_) self_->GetSources()
			#define Vixen_Morph_Sources_set(self_, val_)
		

			#define Vixen_Morph_Weights_get(self_) self_->GetWeights()
			#define Vixen_Morph_Weights_set(self_, val_)
		

			#define Vixen_MeshAnimator_TimeInc_get(self_) self_->GetTimeInc()
			#define Vixen_MeshAnimator_TimeInc_set(self_, val_) self_->SetTimeInc(val_)
		

			#define Vixen_MeshAnimator_NumSources_get(self_) self_->GetNumSources()
			#define Vixen_MeshAnimator_NumSources_set(self_, val_)
		
SWIGINTERN void Vixen_Pose_SetWorldPositions(Vixen::Pose *self,float const *floatArray){
			return self->SetWorldPositions((const Vec3*) floatArray);
		}
SWIGINTERN void Vixen_Pose_GetWorldPositions__SWIG_1(Vixen::Pose *self,float *floatArray){
			return self->GetWorldPositions((Vec3*) floatArray);
		}
SWIGINTERN void Vixen_Pose_SetWorldRotations(Vixen::Pose *self,float const *floatArray){
			return self->SetWorldRotations((const Quat*) floatArray);
		}
SWIGINTERN void Vixen_Pose_GetWorldRotations__SWIG_1(Vixen::Pose *self,float *floatArray){
			return self->GetWorldRotations((Quat*) floatArray);
		}
SWIGINTERN void Vixen_Pose_SetLocalRotations(Vixen::Pose *self,float const *floatArray){
			return self->SetLocalRotations((const Quat*) floatArray);
		}

			#define Vixen_Scene_Options_get(self_) self_->GetOptions()
			#define Vixen_Scene_Options_set(self_, val_) self_->SetOptions(val_)
		

			#define Vixen_Scene_Viewport_get(self_) *(new Vixen::Box2(self_->GetViewport()))
			#define Vixen_Scene_Viewport_set(self_, val_) self_->SetViewport(val_)
		

			#define Vixen_Scene_AutoAdjust_get(self_) self_->IsAutoAdjust()
			#define Vixen_Scene_AutoAdjust_set(self_, val_) self_->SetAutoAdjust(val_)
		

			#define Vixen_Scene_BackColor_get(self_) *(new Vixen::Col4(self_->GetBackColor()))
			#define Vixen_Scene_BackColor_set(self_, val_) self_->SetBackColor(val_)
		

			#define Vixen_Scene_Camera_get(self_) self_->GetCamera()
			#define Vixen_Scene_Camera_set(self_, val_) self_->SetCamera(val_)
		

			#define Vixen_Scene_Models_get(self_) self_->GetModels()
			#define Vixen_Scene_Models_set(self_, val_) self_->SetModels(val_)
		

			#define Vixen_Scene_Engines_get(self_) self_->GetEngines()
			#define Vixen_Scene_Engines_set(self_, val_) self_->SetEngines(val_)
		

			#define Vixen_Scene_TimeInc_get(self_) self_->GetTimeInc()
			#define Vixen_Scene_TimeInc_set(self_, val_) self_->SetTimeInc(val_)
		

			#define Vixen_Scene_Ambient_get(self_) self_->GetAmbient()
			#define Vixen_Scene_Ambient_set(self_, val_) self_->SetAmbient(val_)
		

			#define Vixen_Scene_Window_get(self_) self_->GetWindow()
			#define Vixen_Scene_Window_set(self_, val_) self_->SetWindow(val_)
		
SWIGINTERN void Vixen_Scene_OnResize(Vixen::Scene *self){
			self->SetViewport();
		}

			#define Vixen_World_FileName_get(self_) self_->GetFileName()
			#define Vixen_World_FileName_set(self_, val_) self_->SetFileName(val_)
		

			#define Vixen_Navigator_TurnSpeed_get(self_) self_->GetTurnSpeed()
			#define Vixen_Navigator_TurnSpeed_set(self_, val_) self_->SetTurnSpeed(val_)
		

			#define Vixen_Flyer_Scale_get(self_) self_->GetScale()
			#define Vixen_Flyer_Scale_set(self_, val_) self_->SetScale(val_)
		

#define Vixen_Flyer_DegreesOfFreedom_get(self_) self_->GetDOF()
#define Vixen_Flyer_DegreesOfFreedom_set(self_, val_) self_->SetDOF(val_)
  

			#define Vixen_Picker_Selected_get(self_) self_->GetSelected()
			#define Vixen_Picker_Selected_set(self_, val_)
		

			#define Vixen_Picker_Nearest_get(self_) self_->GetNearest()
			#define Vixen_Picker_Nearest_set(self_, val_)
		

			#define Vixen_Picker_NearDist_get(self_) self_->GetNearDist()
			#define Vixen_Picker_NearDist_set(self_, val_)
		

			#define Vixen_Picker_Buttons_get(self_) self_->GetButtons()
			#define Vixen_Picker_Buttons_set(self_, val_) self_->SetButtons(val_)
		

			#define Vixen_Picker_Options_get(self_) self_->GetOptions()
			#define Vixen_Picker_Options_set(self_, val_) self_->SetOptions(val_)
		

			#define Vixen_Picker_Hilite_get(self_) self_->GetHilite()
			#define Vixen_Picker_Hilite_set(self_, val_) self_->SetHilite(val_)
		

			#define Vixen_RayPicker_PickShape_get(self_) self_->GetPickShape()
			#define Vixen_RayPicker_PickShape_set(self_, val_) self_->SetPickShape(val_)
		

			#define Vixen_RayPicker_Ray_get(self_) self_->GetRay()
			#define Vixen_RayPicker_Ray_set(self_, val_) self_->SetRay(val_)
		

			#define Vixen_NamePicker_NameFilter_get(self_) self_->GetNameFilter()
			#define Vixen_NamePicker_NameFilter_set(self_, val_) self_->SetNameFilter(val_)
		

			#define Vixen_Event_Name_get(self_) self_->GetName()
			#define Vixen_Event_Name_set(self_, val_)
		

#include "body/vxbodytrack.h"
#include "body/vxkinecttrack.h"


			#define Vixen_BodyTracker_UserPosition_get(self_) self_->GetUserPosition()
			#define Vixen_BodyTracker_UserPosition_set(self_, val_)
		

			#define Vixen_BodyTracker_ImageSize_get(self_) self_->GetImageSize()
			#define Vixen_BodyTracker_ImageSize_set(self_, val_)
		

			#define Vixen_BodyTracker_Skeleton_get(self_) self_->GetSkeleton()
			#define Vixen_BodyTracker_Skeleton_set(self_, val_)
		

			#define Vixen_BodyTracker_PoseMapper_get(self_) self_->GetPoseMapper()
			#define Vixen_BodyTracker_PoseMapper_set(self_, val_)
		

			#define Vixen_BodyTracker_FOV_get(self_) self_->GetFOV()
			#define Vixen_BodyTracker_FOV_set(self_, val_)
		

			#define Vixen_BodyTracker_UserID_get(self_) self_->GetUserID()
			#define Vixen_BodyTracker_UserID_set(self_, val_)
		

			#define Vixen_BodyTracker_Options_get(self_) self_->GetOptions()
			#define Vixen_BodyTracker_Options_set(self_, val_) self_->SetOptions(val_)
		

			#define Vixen_BodyTracker_ColorTexture_get(self_) self_->GetColorTexture()
			#define Vixen_BodyTracker_ColorTexture_set(self_, val_) self_->SetColorTexture(val_)
		

			#define Vixen_BodyTracker_DepthTexture_get(self_) self_->GetDepthTexture()
			#define Vixen_BodyTracker_DepthTexture_set(self_, val_) self_->SetDepthTexture(val_)
		

			#define Vixen_BodyTracker_WaistOffset_get(self_) self_->GetWaistOffset()
			#define Vixen_BodyTracker_WaistOffset_set(self_, val_) self_->SetWaistOffset(val_)
		

	#include "util/vxviewerapp.h"
	#include "sharedworld.h"
	typedef Viewer<SharedWorld>	Viewer3D;


			#define Vixen_Physics_FileName_get(self_) self_->GetFileName()
			#define Vixen_Physics_FileName_set(self_, val_) self_->SetFileName(val_)
		

			#define Vixen_SkeletonMapper_Source_get(self_) self_->GetSource()
			#define Vixen_SkeletonMapper_Source_set(self_, val_) self_->SetSource(val_)
		

			#define Vixen_ClothSim_GroundPlane_get(self_) self_->GetGroundPlane()
			#define Vixen_ClothSim_GroundPlane_set(self_, val_) self_->SetGroundPlane(val_)
		

			#define Vixen_SoundPlayer_Volume_get(self_) self_->GetVolume()
			#define Vixen_SoundPlayer_Volume_set(self_, val_) self_->SetVolume(val_)
		

			#define Vixen_SoundPlayer_FileName_get(self_) self_->GetFileName()
			#define Vixen_SoundPlayer_FileName_set(self_, val_) self_->SetFileName(val_)
		

			#define Vixen_MediaBase_Options_get(self_) self_->GetOptions()
			#define Vixen_MediaBase_Options_set(self_, val_) self_->SetOptions(val_)
		

			#define Vixen_MediaBase_FPS_get(self_) self_->GetFPS()
			#define Vixen_MediaBase_FPS_set(self_, val_) self_->SetFPS(val_)
		

			#define Vixen_MediaBase_FileName_get(self_) self_->GetFileName()
			#define Vixen_MediaBase_FileName_set(self_, val_) self_->SetFileName(val_)
		

			#define Vixen_MediaBase_CaptureSource_get(self_) self_->GetCaptureSource()
			#define Vixen_MediaBase_CaptureSource_set(self_, val_) self_->SetCaptureSource(val_)
		

			#define Vixen_MediaBase_TexSize_get(self_) self_->GetTexSize()
			#define Vixen_MediaBase_TexSize_set(self_, val_)
		

			#define Vixen_MediaBase_VideoSize_get(self_) self_->GetVideoSize()
			#define Vixen_MediaBase_VideoSize_set(self_, val_)
		

#include "vxmedia.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_BaseObj() {
  void * jresult ;
  Vixen::Core::BaseObj *result = 0 ;
  
  result = (Vixen::Core::BaseObj *)new Vixen::Core::BaseObj();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BaseObj(void * jarg1) {
  Vixen::Core::BaseObj *arg1 = (Vixen::Core::BaseObj *) 0 ;
  
  arg1 = (Vixen::Core::BaseObj *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseObj_IsClass(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Vixen::Core::BaseObj *arg1 = (Vixen::Core::BaseObj *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Vixen::Core::BaseObj *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)((Vixen::Core::BaseObj const *)arg1)->IsClass(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObj_ClassName_set(void * jarg1, char * jarg2) {
  Vixen::Core::BaseObj *arg1 = (Vixen::Core::BaseObj *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Vixen::Core::BaseObj *)jarg1; 
  arg2 = (char *)jarg2; 
  Vixen_Core_BaseObj_ClassName_set(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BaseObj_ClassName_get(void * jarg1) {
  char * jresult ;
  Vixen::Core::BaseObj *arg1 = (Vixen::Core::BaseObj *) 0 ;
  char *result = 0 ;
  
  arg1 = (Vixen::Core::BaseObj *)jarg1; 
  result = (char *)Vixen_Core_BaseObj_ClassName_get(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObj_ClassID_set(void * jarg1, int jarg2) {
  Vixen::Core::BaseObj *arg1 = (Vixen::Core::BaseObj *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Core::BaseObj *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_Core_BaseObj_ClassID_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseObj_ClassID_get(void * jarg1) {
  int jresult ;
  Vixen::Core::BaseObj *arg1 = (Vixen::Core::BaseObj *) 0 ;
  int result;
  
  arg1 = (Vixen::Core::BaseObj *)jarg1; 
  result = (int)Vixen_Core_BaseObj_ClassID_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RefObj() {
  void * jresult ;
  Vixen::Core::RefObj *result = 0 ;
  
  result = (Vixen::Core::RefObj *)new Vixen::Core::RefObj();
  jresult = (void *)result; 
  result->AddRef();
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_RefObj_AddRef(void * jarg1) {
  long jresult ;
  Vixen::Core::RefObj *arg1 = (Vixen::Core::RefObj *) 0 ;
  long result;
  
  arg1 = (Vixen::Core::RefObj *)jarg1; 
  result = (long)(arg1)->AddRef();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_RefObj_Release(void * jarg1) {
  long jresult ;
  Vixen::Core::RefObj *arg1 = (Vixen::Core::RefObj *) 0 ;
  long result;
  
  arg1 = (Vixen::Core::RefObj *)jarg1; 
  result = (long)(arg1)->Release();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_RefObj_RefCount(void * jarg1) {
  long jresult ;
  Vixen::Core::RefObj *arg1 = (Vixen::Core::RefObj *) 0 ;
  long result;
  
  arg1 = (Vixen::Core::RefObj *)jarg1; 
  result = (long)((Vixen::Core::RefObj const *)arg1)->RefCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RefObj(void * jarg1) {
  Vixen::Core::RefObj *arg1 = (Vixen::Core::RefObj *) 0 ;
  
  arg1 = (Vixen::Core::RefObj *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RefPtr__SWIG_0(void * jarg1) {
  void * jresult ;
  Vixen::Core::RefObj *arg1 = (Vixen::Core::RefObj *) 0 ;
  Vixen::Core::RefPtr *result = 0 ;
  
  arg1 = (Vixen::Core::RefObj *)jarg1; 
  result = (Vixen::Core::RefPtr *)new Vixen::Core::RefPtr((Vixen::Core::RefObj const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RefPtr__SWIG_1(void * jarg1) {
  void * jresult ;
  Vixen::Core::RefPtr *arg1 = 0 ;
  Vixen::Core::RefPtr *result = 0 ;
  
  arg1 = (Vixen::Core::RefPtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Core::RefPtr const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Core::RefPtr *)new Vixen::Core::RefPtr((Vixen::Core::RefPtr const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RefPtr__SWIG_3() {
  void * jresult ;
  Vixen::Core::RefPtr *result = 0 ;
  
  result = (Vixen::Core::RefPtr *)new Vixen::Core::RefPtr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RefPtr(void * jarg1) {
  Vixen::Core::RefPtr *arg1 = (Vixen::Core::RefPtr *) 0 ;
  
  arg1 = (Vixen::Core::RefPtr *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RefPtr___ref____SWIG_0(void * jarg1) {
  void * jresult ;
  Vixen::Core::RefPtr *arg1 = (Vixen::Core::RefPtr *) 0 ;
  Vixen::Core::RefObj *result = 0 ;
  
  arg1 = (Vixen::Core::RefPtr *)jarg1; 
  result = (Vixen::Core::RefObj *)((Vixen::Core::RefPtr const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RefPtr_Assign__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Core::RefPtr *arg1 = (Vixen::Core::RefPtr *) 0 ;
  Vixen::Core::RefObj *arg2 = (Vixen::Core::RefObj *) 0 ;
  Vixen::Core::RefPtr *result = 0 ;
  
  arg1 = (Vixen::Core::RefPtr *)jarg1; 
  arg2 = (Vixen::Core::RefObj *)jarg2; 
  result = (Vixen::Core::RefPtr *) &(arg1)->operator =(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RefPtr_Assign__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Core::RefPtr *arg1 = (Vixen::Core::RefPtr *) 0 ;
  Vixen::Core::RefPtr *arg2 = 0 ;
  Vixen::Core::RefPtr *result = 0 ;
  
  arg1 = (Vixen::Core::RefPtr *)jarg1; 
  arg2 = (Vixen::Core::RefPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Core::RefPtr const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Core::RefPtr *) &(arg1)->operator =((Vixen::Core::RefPtr const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RefPtr_Equal__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Core::RefPtr *arg1 = (Vixen::Core::RefPtr *) 0 ;
  Vixen::Core::RefPtr *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Core::RefPtr *)jarg1; 
  arg2 = (Vixen::Core::RefPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Core::RefPtr const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Core::RefPtr const *)arg1)->operator ==((Vixen::Core::RefPtr const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RefPtr_Equal__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Core::RefPtr *arg1 = (Vixen::Core::RefPtr *) 0 ;
  Vixen::Core::RefObj *arg2 = (Vixen::Core::RefObj *) 0 ;
  bool result;
  
  arg1 = (Vixen::Core::RefPtr *)jarg1; 
  arg2 = (Vixen::Core::RefObj *)jarg2; 
  result = (bool)((Vixen::Core::RefPtr const *)arg1)->operator ==((Vixen::Core::RefObj const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RefPtr_NotEqual__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Core::RefPtr *arg1 = (Vixen::Core::RefPtr *) 0 ;
  Vixen::Core::RefObj *arg2 = (Vixen::Core::RefObj *) 0 ;
  bool result;
  
  arg1 = (Vixen::Core::RefPtr *)jarg1; 
  arg2 = (Vixen::Core::RefObj *)jarg2; 
  result = (bool)((Vixen::Core::RefPtr const *)arg1)->operator !=((Vixen::Core::RefObj const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RefPtr_NotEqual__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Core::RefPtr *arg1 = (Vixen::Core::RefPtr *) 0 ;
  Vixen::Core::RefPtr *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Core::RefPtr *)jarg1; 
  arg2 = (Vixen::Core::RefPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Core::RefPtr const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Core::RefPtr const *)arg1)->operator !=((Vixen::Core::RefPtr const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RefPtr_IsNull(void * jarg1) {
  unsigned int jresult ;
  Vixen::Core::RefPtr *arg1 = (Vixen::Core::RefPtr *) 0 ;
  bool result;
  
  arg1 = (Vixen::Core::RefPtr *)jarg1; 
  result = (bool)((Vixen::Core::RefPtr const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LockObj() {
  void * jresult ;
  Vixen::Core::LockObj *result = 0 ;
  
  result = (Vixen::Core::LockObj *)new Vixen::Core::LockObj();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LockObj(void * jarg1) {
  Vixen::Core::LockObj *arg1 = (Vixen::Core::LockObj *) 0 ;
  
  arg1 = (Vixen::Core::LockObj *)jarg1; 
  arg1->Release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LockObj_MakeLock(void * jarg1) {
  unsigned int jresult ;
  Vixen::Core::LockObj *arg1 = (Vixen::Core::LockObj *) 0 ;
  bool result;
  
  arg1 = (Vixen::Core::LockObj *)jarg1; 
  result = (bool)((Vixen::Core::LockObj const *)arg1)->MakeLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LockObj_KillLock(void * jarg1) {
  Vixen::Core::LockObj *arg1 = (Vixen::Core::LockObj *) 0 ;
  
  arg1 = (Vixen::Core::LockObj *)jarg1; 
  ((Vixen::Core::LockObj const *)arg1)->KillLock();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LockObj_Lock(void * jarg1) {
  unsigned int jresult ;
  Vixen::Core::LockObj *arg1 = (Vixen::Core::LockObj *) 0 ;
  bool result;
  
  arg1 = (Vixen::Core::LockObj *)jarg1; 
  result = (bool)((Vixen::Core::LockObj const *)arg1)->Lock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LockObj_Unlock(void * jarg1) {
  unsigned int jresult ;
  Vixen::Core::LockObj *arg1 = (Vixen::Core::LockObj *) 0 ;
  bool result;
  
  arg1 = (Vixen::Core::LockObj *)jarg1; 
  result = (bool)((Vixen::Core::LockObj const *)arg1)->Unlock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LockObj_TryLock(void * jarg1) {
  unsigned int jresult ;
  Vixen::Core::LockObj *arg1 = (Vixen::Core::LockObj *) 0 ;
  bool result;
  
  arg1 = (Vixen::Core::LockObj *)jarg1; 
  result = (bool)((Vixen::Core::LockObj const *)arg1)->TryLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_String__SWIG_0() {
  void * jresult ;
  Vixen::Core::String *result = 0 ;
  
  result = (Vixen::Core::String *)new Vixen::Core::String();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_String__SWIG_1(char jarg1, int jarg2) {
  void * jresult ;
  TCHAR arg1 ;
  int arg2 ;
  Vixen::Core::String *result = 0 ;
  
  arg1 = (TCHAR)jarg1; 
  arg2 = (int)jarg2; 
  result = (Vixen::Core::String *)new Vixen::Core::String(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_String__SWIG_2(char jarg1) {
  void * jresult ;
  TCHAR arg1 ;
  Vixen::Core::String *result = 0 ;
  
  arg1 = (TCHAR)jarg1; 
  result = (Vixen::Core::String *)new Vixen::Core::String(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_String__SWIG_3(char * jarg1) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  Vixen::Core::String *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  result = (Vixen::Core::String *)new Vixen::Core::String((TCHAR const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_String__SWIG_4(char * jarg1, unsigned long jarg2) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  size_t arg2 ;
  Vixen::Core::String *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (Vixen::Core::String *)new Vixen::Core::String((TCHAR const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_String(void * jarg1) {
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_String_WideToMultiByte(wchar_t * jarg1, char * jarg2, int jarg3) {
  wchar_t *arg1 = (wchar_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  Vixen::Core::String::WideToMultiByte((wchar_t const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_String_MultiByteToWide(char * jarg1, wchar_t * jarg2, int jarg3) {
  char *arg1 = (char *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  int arg3 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (int)jarg3; 
  Vixen::Core::String::MultiByteToWide((char const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_String_AsMultiByte(void * jarg1, char * jarg2, unsigned long jarg3) {
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  ((Vixen::Core::String const *)arg1)->AsMultiByte(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_String_AsWide(void * jarg1, wchar_t * jarg2, unsigned long jarg3) {
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  size_t arg3 ;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (size_t)jarg3; 
  ((Vixen::Core::String const *)arg1)->AsWide(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_String__SWIG_6(double jarg1) {
  void * jresult ;
  double arg1 ;
  Vixen::Core::String *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (Vixen::Core::String *)new Vixen::Core::String(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_String__SWIG_7(int jarg1) {
  void * jresult ;
  int arg1 ;
  Vixen::Core::String *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Vixen::Core::String *)new Vixen::Core::String(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_String__SWIG_8(unsigned short jarg1) {
  void * jresult ;
  unsigned short arg1 ;
  Vixen::Core::String *result = 0 ;
  
  arg1 = (unsigned short)jarg1; 
  result = (Vixen::Core::String *)new Vixen::Core::String(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_String_toDouble(void * jarg1) {
  double jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  double result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  result = (double)((Vixen::Core::String const *)arg1)->toDouble();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_String_toFloat(void * jarg1) {
  float jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  float result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  result = (float)((Vixen::Core::String const *)arg1)->toFloat();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_String_toLong(void * jarg1) {
  long jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  long result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  result = (long)((Vixen::Core::String const *)arg1)->toLong();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_String_toInt(void * jarg1) {
  int jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  int result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  result = (int)((Vixen::Core::String const *)arg1)->toInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_String_toShort(void * jarg1) {
  short jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  short result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  result = (short)((Vixen::Core::String const *)arg1)->toShort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_String_toULong(void * jarg1) {
  unsigned long jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  unsigned long result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  result = (unsigned long)((Vixen::Core::String const *)arg1)->toULong();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_String_toUInt(void * jarg1) {
  unsigned int jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  unsigned int result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  result = (unsigned int)((Vixen::Core::String const *)arg1)->toUInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_String_toUShort(void * jarg1) {
  unsigned short jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  unsigned short result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  result = (unsigned short)((Vixen::Core::String const *)arg1)->toUShort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_String_MakeUpper(void * jarg1) {
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  (arg1)->MakeUpper();
}


SWIGEXPORT void SWIGSTDCALL CSharp_String_MakeLower(void * jarg1) {
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  (arg1)->MakeLower();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_String_GetLength(void * jarg1) {
  unsigned long jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  size_t result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  result = (size_t)((Vixen::Core::String const *)arg1)->GetLength();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_String_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  bool result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  result = (bool)((Vixen::Core::String const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_String_Empty(void * jarg1) {
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  (arg1)->Empty();
}


SWIGEXPORT char SWIGSTDCALL CSharp_String_GetAt(void * jarg1, unsigned long jarg2) {
  char jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  size_t arg2 ;
  TCHAR result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (TCHAR)((Vixen::Core::String const *)arg1)->GetAt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_String_SetAt(void * jarg1, unsigned long jarg2, char jarg3) {
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  size_t arg2 ;
  TCHAR arg3 ;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (TCHAR)jarg3; 
  (arg1)->SetAt(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_String_Compare(void * jarg1, char * jarg2) {
  int jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  LPCTSTR arg2 = (LPCTSTR) 0 ;
  int result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (LPCTSTR)jarg2; 
  result = (int)((Vixen::Core::String const *)arg1)->Compare(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_String_CompareNoCase(void * jarg1, char * jarg2) {
  int jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  LPCTSTR arg2 = (LPCTSTR) 0 ;
  int result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (LPCTSTR)jarg2; 
  result = (int)((Vixen::Core::String const *)arg1)->CompareNoCase(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_String_Mid__SWIG_0(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  void * jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Vixen::Core::String result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((Vixen::Core::String const *)arg1)->Mid(arg2,arg3);
  if (result) jresult = SWIG_csharp_string_callback((const char*) *result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_String_Mid__SWIG_1(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  size_t arg2 ;
  Vixen::Core::String result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((Vixen::Core::String const *)arg1)->Mid(arg2);
  if (result) jresult = SWIG_csharp_string_callback((const char*) *result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_String_Left(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  int arg2 ;
  Vixen::Core::String result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((Vixen::Core::String const *)arg1)->Left(arg2);
  if (result) jresult = SWIG_csharp_string_callback((const char*) *result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_String_Right(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  int arg2 ;
  Vixen::Core::String result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((Vixen::Core::String const *)arg1)->Right(arg2);
  if (result) jresult = SWIG_csharp_string_callback((const char*) *result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_String_SpanIncluding(void * jarg1, char * jarg2) {
  void * jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  LPCTSTR arg2 = (LPCTSTR) 0 ;
  Vixen::Core::String result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (LPCTSTR)jarg2; 
  result = ((Vixen::Core::String const *)arg1)->SpanIncluding(arg2);
  if (result) jresult = SWIG_csharp_string_callback((const char*) *result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_String_SpanExcluding(void * jarg1, char * jarg2) {
  void * jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  LPCTSTR arg2 = (LPCTSTR) 0 ;
  Vixen::Core::String result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (LPCTSTR)jarg2; 
  result = ((Vixen::Core::String const *)arg1)->SpanExcluding(arg2);
  if (result) jresult = SWIG_csharp_string_callback((const char*) *result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_String_TrimRight__SWIG_0(void * jarg1) {
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  (arg1)->TrimRight();
}


SWIGEXPORT void SWIGSTDCALL CSharp_String_TrimLeft__SWIG_0(void * jarg1) {
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  (arg1)->TrimLeft();
}


SWIGEXPORT void SWIGSTDCALL CSharp_String_TrimRight__SWIG_1(void * jarg1, char jarg2) {
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  TCHAR arg2 ;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (TCHAR)jarg2; 
  (arg1)->TrimRight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_String_TrimRight__SWIG_2(void * jarg1, char * jarg2) {
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  LPCTSTR arg2 = (LPCTSTR) 0 ;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (LPCTSTR)jarg2; 
  (arg1)->TrimRight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_String_TrimLeft__SWIG_1(void * jarg1, char jarg2) {
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  TCHAR arg2 ;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (TCHAR)jarg2; 
  (arg1)->TrimLeft(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_String_TrimLeft__SWIG_2(void * jarg1, char * jarg2) {
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  LPCTSTR arg2 = (LPCTSTR) 0 ;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (LPCTSTR)jarg2; 
  (arg1)->TrimLeft(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_String_Replace__SWIG_0(void * jarg1, char jarg2, char jarg3) {
  unsigned long jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  TCHAR arg2 ;
  TCHAR arg3 ;
  size_t result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (TCHAR)jarg2; 
  arg3 = (TCHAR)jarg3; 
  result = (size_t)(arg1)->Replace(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_String_Replace__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned long jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  LPCTSTR arg2 = (LPCTSTR) 0 ;
  LPCTSTR arg3 = (LPCTSTR) 0 ;
  size_t result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (LPCTSTR)jarg2; 
  arg3 = (LPCTSTR)jarg3; 
  result = (size_t)(arg1)->Replace(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_String_Remove(void * jarg1, char jarg2) {
  unsigned long jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  TCHAR arg2 ;
  size_t result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (TCHAR)jarg2; 
  result = (size_t)(arg1)->Remove(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_String_Insert__SWIG_0(void * jarg1, unsigned long jarg2, char jarg3) {
  unsigned long jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  size_t arg2 ;
  TCHAR arg3 ;
  size_t result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (TCHAR)jarg3; 
  result = (size_t)(arg1)->Insert(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_String_Insert__SWIG_1(void * jarg1, unsigned long jarg2, char * jarg3) {
  unsigned long jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  size_t arg2 ;
  LPCTSTR arg3 = (LPCTSTR) 0 ;
  size_t result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (LPCTSTR)jarg3; 
  result = (size_t)(arg1)->Insert(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_String_Delete__SWIG_0(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (size_t)(arg1)->Delete(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_String_Delete__SWIG_1(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  size_t arg2 ;
  size_t result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (size_t)(arg1)->Delete(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_String_GetBuffer(void * jarg1, unsigned long jarg2) {
  char * jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  size_t arg2 ;
  LPTSTR result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (LPTSTR)(arg1)->GetBuffer(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_String_Find__SWIG_0(void * jarg1, char jarg2) {
  int jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  TCHAR arg2 ;
  int result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (TCHAR)jarg2; 
  result = (int)((Vixen::Core::String const *)arg1)->Find(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_String_Find__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  LPCTSTR arg2 = (LPCTSTR) 0 ;
  int result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (LPCTSTR)jarg2; 
  result = (int)((Vixen::Core::String const *)arg1)->Find(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_String_FindNoCase__SWIG_0(void * jarg1, char jarg2) {
  int jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  TCHAR arg2 ;
  int result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (TCHAR)jarg2; 
  result = (int)((Vixen::Core::String const *)arg1)->FindNoCase(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_String_FindNoCase__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  LPCTSTR arg2 = (LPCTSTR) 0 ;
  int result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (LPCTSTR)jarg2; 
  result = (int)((Vixen::Core::String const *)arg1)->FindNoCase(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_String_ReverseFind(void * jarg1, char jarg2) {
  int jresult ;
  Vixen::Core::String *arg1 = (Vixen::Core::String *) 0 ;
  TCHAR arg2 ;
  int result;
  
  arg1 = (Vixen::Core::String *)jarg1; 
  arg2 = (TCHAR)jarg2; 
  result = (int)((Vixen::Core::String const *)arg1)->ReverseFind(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NameProp__SWIG_0(char * jarg1, long long jarg2) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  intptr arg2 ;
  Vixen::NameProp *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (Vixen::NameProp *)new Vixen::NameProp((TCHAR const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NameProp__SWIG_1(char * jarg1) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  Vixen::NameProp *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  result = (Vixen::NameProp *)new Vixen::NameProp((TCHAR const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NameProp__SWIG_2() {
  void * jresult ;
  Vixen::NameProp *result = 0 ;
  
  result = (Vixen::NameProp *)new Vixen::NameProp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NameProp__SWIG_3(void * jarg1) {
  void * jresult ;
  Vixen::NameProp *arg1 = 0 ;
  Vixen::NameProp *result = 0 ;
  
  arg1 = (Vixen::NameProp *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::NameProp const & type is null", 0);
    return 0;
  } 
  result = (Vixen::NameProp *)new Vixen::NameProp((Vixen::NameProp const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NameProp_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  Vixen::NameProp *arg1 = (Vixen::NameProp *) 0 ;
  bool result;
  
  arg1 = (Vixen::NameProp *)jarg1; 
  result = (bool)((Vixen::NameProp const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NameProp(void * jarg1) {
  Vixen::NameProp *arg1 = (Vixen::NameProp *) 0 ;
  
  arg1 = (Vixen::NameProp *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedObj__SWIG_0() {
  void * jresult ;
  Vixen::SharedObj *result = 0 ;
  
  result = (Vixen::SharedObj *)new Vixen::SharedObj();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SharedObj(void * jarg1) {
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedObj__SWIG_1(void * jarg1) {
  void * jresult ;
  Vixen::SharedObj *arg1 = 0 ;
  Vixen::SharedObj *result = 0 ;
  
  arg1 = (Vixen::SharedObj *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::SharedObj const & type is null", 0);
    return 0;
  } 
  result = (Vixen::SharedObj *)new Vixen::SharedObj((Vixen::SharedObj const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharedObj_Copy(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  Vixen::SharedObj *arg2 = (Vixen::SharedObj *) 0 ;
  bool result;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  arg2 = (Vixen::SharedObj *)jarg2; 
  result = (bool)(arg1)->Copy((Vixen::SharedObj const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharedObj_Clone(void * jarg1) {
  void * jresult ;
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  Vixen::SharedObj *result = 0 ;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  result = (Vixen::SharedObj *)((Vixen::SharedObj const *)arg1)->Clone();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharedObj_FindClass(char * jarg1) {
  int jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  int32 result;
  
  arg1 = (TCHAR *)jarg1; 
  result = (int32)Vixen::SharedObj::FindClass((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharedObj_Create__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  uint32 arg1 ;
  Vixen::SharedObj *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  result = (Vixen::SharedObj *)Vixen::SharedObj::Create(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharedObj_Create__SWIG_1() {
  void * jresult ;
  Vixen::SharedObj *result = 0 ;
  
  result = (Vixen::SharedObj *)Vixen::SharedObj::Create();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharedObj_IsSet(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)((Vixen::SharedObj const *)arg1)->IsSet(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharedObj_IsGlobal(void * jarg1) {
  int jresult ;
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  int32 result;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  result = (int32)((Vixen::SharedObj const *)arg1)->IsGlobal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharedObj_IsShared__SWIG_0(void * jarg1) {
  int jresult ;
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  int32 result;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  result = (int32)((Vixen::SharedObj const *)arg1)->IsShared();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharedObj_IsShared__SWIG_1(unsigned int jarg1) {
  int jresult ;
  uint32 arg1 ;
  int32 result;
  
  arg1 = (uint32)jarg1; 
  result = (int32)Vixen::SharedObj::IsShared(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharedObj_GetFlags(void * jarg1) {
  unsigned int jresult ;
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  uint32 result;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  result = (uint32)((Vixen::SharedObj const *)arg1)->GetFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedObj_SetFlags(void * jarg1, unsigned int jarg2) {
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  arg2 = (uint32)jarg2; 
  ((Vixen::SharedObj const *)arg1)->SetFlags(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedObj_ClearFlags(void * jarg1, unsigned int jarg2) {
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  arg2 = (uint32)jarg2; 
  ((Vixen::SharedObj const *)arg1)->ClearFlags(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SharedObj_GetName(void * jarg1, int jarg2) {
  char * jresult ;
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  int32 arg2 ;
  TCHAR *result = 0 ;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (TCHAR *)((Vixen::SharedObj const *)arg1)->GetName(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharedObj_NOFREE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::SharedObj::NOFREE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharedObj_SAVED_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::SharedObj::SAVED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharedObj_GLOBAL_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::SharedObj::GLOBAL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharedObj_SHARED_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::SharedObj::SHARED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharedObj_DOEVENTS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::SharedObj::DOEVENTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharedObj_CHANGED_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::SharedObj::CHANGED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharedObj_INACTIVE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::SharedObj::INACTIVE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharedObj_OBJ_LASTUSED_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::SharedObj::OBJ_LASTUSED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedObj_Dump__SWIG_0(void * jarg1) {
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  Vixen_SharedObj_Dump__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedObj_Dump__SWIG_1(void * jarg1, char * jarg2) {
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  Vixen_SharedObj_Dump__SWIG_1(arg1,(char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedObj_Name_set(void * jarg1, char * jarg2) {
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  arg2 = (char *)jarg2; 
  Vixen_SharedObj_Name_set(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SharedObj_Name_get(void * jarg1) {
  char * jresult ;
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  char *result = 0 ;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  result = (char *)Vixen_SharedObj_Name_get(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedObj_ID_set(void * jarg1, int jarg2) {
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_SharedObj_ID_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharedObj_ID_get(void * jarg1) {
  int jresult ;
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  int result;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  result = (int)Vixen_SharedObj_ID_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedObj_Active_set(void * jarg1, unsigned int jarg2) {
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  bool arg2 ;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Vixen_SharedObj_Active_set(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharedObj_Active_get(void * jarg1) {
  unsigned int jresult ;
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  bool result;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  result = (bool)Vixen_SharedObj_Active_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedObj_Changed_set(void * jarg1, unsigned int jarg2) {
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  bool arg2 ;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Vixen_SharedObj_Changed_set(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharedObj_Changed_get(void * jarg1) {
  unsigned int jresult ;
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  bool result;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  result = (bool)Vixen_SharedObj_Changed_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjRef__SWIG_0(void * jarg1) {
  void * jresult ;
  Vixen::Core::RefObj *arg1 = (Vixen::Core::RefObj *) 0 ;
  Vixen::Ref< Vixen::SharedObj > *result = 0 ;
  
  arg1 = (Vixen::Core::RefObj *)jarg1; 
  result = (Vixen::Ref< Vixen::SharedObj > *)new Vixen::Ref< Vixen::SharedObj >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjRef__SWIG_1() {
  void * jresult ;
  Vixen::Ref< Vixen::SharedObj > *result = 0 ;
  
  result = (Vixen::Ref< Vixen::SharedObj > *)new Vixen::Ref< Vixen::SharedObj >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjRef__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::Ref< Vixen::SharedObj > *arg1 = 0 ;
  Vixen::Ref< Vixen::SharedObj > *result = 0 ;
  
  arg1 = (Vixen::Ref< Vixen::SharedObj > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ref< Vixen::SharedObj > const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Ref< Vixen::SharedObj > *)new Vixen::Ref< Vixen::SharedObj >((Vixen::Ref< Vixen::SharedObj > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjRef__SWIG_3(void * jarg1) {
  void * jresult ;
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  Vixen::Ref< Vixen::SharedObj > *result = 0 ;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  result = (Vixen::Ref< Vixen::SharedObj > *)new Vixen::Ref< Vixen::SharedObj >((Vixen::SharedObj const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjRef___ref__(void * jarg1) {
  void * jresult ;
  Vixen::Ref< Vixen::SharedObj > *arg1 = (Vixen::Ref< Vixen::SharedObj > *) 0 ;
  Vixen::SharedObj *result = 0 ;
  
  arg1 = (Vixen::Ref< Vixen::SharedObj > *)jarg1; 
  result = (Vixen::SharedObj *)(arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjRef_Assign__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Ref< Vixen::SharedObj > *arg1 = (Vixen::Ref< Vixen::SharedObj > *) 0 ;
  Vixen::Ref< Vixen::SharedObj > *arg2 = 0 ;
  Vixen::Ref< Vixen::SharedObj > *result = 0 ;
  
  arg1 = (Vixen::Ref< Vixen::SharedObj > *)jarg1; 
  arg2 = (Vixen::Ref< Vixen::SharedObj > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ref< Vixen::SharedObj > const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Ref< Vixen::SharedObj > *) &(arg1)->operator =((Vixen::Ref< Vixen::SharedObj > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjRef_Assign__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Ref< Vixen::SharedObj > *arg1 = (Vixen::Ref< Vixen::SharedObj > *) 0 ;
  Vixen::SharedObj *arg2 = (Vixen::SharedObj *) 0 ;
  Vixen::Ref< Vixen::SharedObj > *result = 0 ;
  
  arg1 = (Vixen::Ref< Vixen::SharedObj > *)jarg1; 
  arg2 = (Vixen::SharedObj *)jarg2; 
  result = (Vixen::Ref< Vixen::SharedObj > *) &(arg1)->operator =((Vixen::SharedObj const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjRef_Equal__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Ref< Vixen::SharedObj > *arg1 = (Vixen::Ref< Vixen::SharedObj > *) 0 ;
  Vixen::Ref< Vixen::SharedObj > *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Ref< Vixen::SharedObj > *)jarg1; 
  arg2 = (Vixen::Ref< Vixen::SharedObj > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ref< Vixen::SharedObj > const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Ref< Vixen::SharedObj > const *)arg1)->operator ==((Vixen::Ref< Vixen::SharedObj > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjRef_NotEqual__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Ref< Vixen::SharedObj > *arg1 = (Vixen::Ref< Vixen::SharedObj > *) 0 ;
  Vixen::Ref< Vixen::SharedObj > *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Ref< Vixen::SharedObj > *)jarg1; 
  arg2 = (Vixen::Ref< Vixen::SharedObj > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ref< Vixen::SharedObj > const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Ref< Vixen::SharedObj > const *)arg1)->operator !=((Vixen::Ref< Vixen::SharedObj > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjRef_Equal__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Ref< Vixen::SharedObj > *arg1 = (Vixen::Ref< Vixen::SharedObj > *) 0 ;
  Vixen::SharedObj *arg2 = (Vixen::SharedObj *) 0 ;
  bool result;
  
  arg1 = (Vixen::Ref< Vixen::SharedObj > *)jarg1; 
  arg2 = (Vixen::SharedObj *)jarg2; 
  result = (bool)((Vixen::Ref< Vixen::SharedObj > const *)arg1)->operator ==((Vixen::SharedObj const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjRef_NotEqual__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Ref< Vixen::SharedObj > *arg1 = (Vixen::Ref< Vixen::SharedObj > *) 0 ;
  Vixen::SharedObj *arg2 = (Vixen::SharedObj *) 0 ;
  bool result;
  
  arg1 = (Vixen::Ref< Vixen::SharedObj > *)jarg1; 
  arg2 = (Vixen::SharedObj *)jarg2; 
  result = (bool)((Vixen::Ref< Vixen::SharedObj > const *)arg1)->operator !=((Vixen::SharedObj const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjRef_Null_get() {
  void * jresult ;
  Vixen::Ref< Vixen::SharedObj > *result = 0 ;
  
  result = (Vixen::Ref< Vixen::SharedObj > *)&Vixen::Ref< Vixen::SharedObj >::Null;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ObjRef(void * jarg1) {
  Vixen::Ref< Vixen::SharedObj > *arg1 = (Vixen::Ref< Vixen::SharedObj > *) 0 ;
  
  arg1 = (Vixen::Ref< Vixen::SharedObj > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CoreObjArray__SWIG_0(long long jarg1) {
  void * jresult ;
  intptr arg1 ;
  Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *result = 0 ;
  
  arg1 = (intptr)jarg1; 
  result = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *)new Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj >(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CoreObjArray__SWIG_1() {
  void * jresult ;
  Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *result = 0 ;
  
  result = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *)new Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj >();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CoreObjArray__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::Core::BaseArray< Vixen::Ref< Vixen::SharedObj >,Vixen::SharedObj > *arg1 = 0 ;
  Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *result = 0 ;
  
  arg1 = (Vixen::Core::BaseArray< Vixen::Ref< Vixen::SharedObj >,Vixen::SharedObj > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Core::BaseArray< Vixen::Ref< Vixen::SharedObj >,Vixen::SharedObj > const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *)new Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj >((Vixen::Core::BaseArray< Vixen::Ref< Vixen::SharedObj >,Vixen::SharedObj > const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreObjArray(void * jarg1) {
  Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *) 0 ;
  
  arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *)jarg1; 
  arg1->Release();
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CoreObjArray_GetSize(void * jarg1) {
  long long jresult ;
  Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *) 0 ;
  intptr result;
  
  arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *)jarg1; 
  result = (intptr)((Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > const *)arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CoreObjArray_GetMaxSize(void * jarg1) {
  long long jresult ;
  Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *) 0 ;
  intptr result;
  
  arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *)jarg1; 
  result = (intptr)((Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > const *)arg1)->GetMaxSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreObjArray_SetSize(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *) 0 ;
  intptr arg2 ;
  bool result;
  
  arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (bool)(arg1)->SetSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreObjArray_SetMaxSize(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *) 0 ;
  intptr arg2 ;
  bool result;
  
  arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (bool)(arg1)->SetMaxSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreObjArray_SetAt(void * jarg1, long long jarg2, void * jarg3) {
  unsigned int jresult ;
  Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *) 0 ;
  intptr arg2 ;
  Vixen::Ref< Vixen::SharedObj > *arg3 = 0 ;
  bool result;
  
  arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *)jarg1; 
  arg2 = (intptr)jarg2; 
  arg3 = (Vixen::Ref< Vixen::SharedObj > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ref< Vixen::SharedObj > const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetAt(arg2,(Vixen::Ref< Vixen::SharedObj > const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreObjArray_GetAt(void * jarg1, long long jarg2) {
  void * jresult ;
  Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *) 0 ;
  intptr arg2 ;
  Vixen::Ref< Vixen::SharedObj > *result = 0 ;
  
  arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (Vixen::Ref< Vixen::SharedObj > *) &((Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > const *)arg1)->GetAt(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreObjArray_First__SWIG_0(void * jarg1) {
  void * jresult ;
  Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *) 0 ;
  Vixen::Ref< Vixen::SharedObj > *result = 0 ;
  
  arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *)jarg1; 
  result = (Vixen::Ref< Vixen::SharedObj > *)(arg1)->First();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreObjArray_Last__SWIG_0(void * jarg1) {
  void * jresult ;
  Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *) 0 ;
  Vixen::Ref< Vixen::SharedObj > *result = 0 ;
  
  arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *)jarg1; 
  result = (Vixen::Ref< Vixen::SharedObj > *)(arg1)->Last();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreObjArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *) 0 ;
  bool result;
  
  arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *)jarg1; 
  result = (bool)((Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreObjArray_Empty(void * jarg1) {
  Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *) 0 ;
  
  arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *)jarg1; 
  (arg1)->Empty();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreObjArray_RemoveAt__SWIG_0(void * jarg1, long long jarg2, long long jarg3) {
  Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *) 0 ;
  intptr arg2 ;
  intptr arg3 ;
  
  arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *)jarg1; 
  arg2 = (intptr)jarg2; 
  arg3 = (intptr)jarg3; 
  (arg1)->RemoveAt(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreObjArray_RemoveAt__SWIG_1(void * jarg1, long long jarg2) {
  Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *) 0 ;
  intptr arg2 ;
  
  arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *)jarg1; 
  arg2 = (intptr)jarg2; 
  (arg1)->RemoveAt(arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CoreObjArray_Append(void * jarg1, void * jarg2) {
  long long jresult ;
  Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *) 0 ;
  Vixen::Ref< Vixen::SharedObj > *arg2 = 0 ;
  intptr result;
  
  arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *)jarg1; 
  arg2 = (Vixen::Ref< Vixen::SharedObj > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ref< Vixen::SharedObj > const & type is null", 0);
    return 0;
  } 
  result = (intptr)(arg1)->Append((Vixen::Ref< Vixen::SharedObj > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CoreObjArray_Find(void * jarg1, void * jarg2) {
  long long jresult ;
  Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *) 0 ;
  Vixen::Ref< Vixen::SharedObj > *arg2 = 0 ;
  intptr result;
  
  arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *)jarg1; 
  arg2 = (Vixen::Ref< Vixen::SharedObj > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ref< Vixen::SharedObj > const & type is null", 0);
    return 0;
  } 
  result = (intptr)((Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > const *)arg1)->Find((Vixen::Ref< Vixen::SharedObj > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CoreObjArray_Merge(void * jarg1, void * jarg2) {
  long long jresult ;
  Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *) 0 ;
  Vixen::Core::BaseArray< Vixen::Ref< Vixen::SharedObj >,Vixen::SharedObj > *arg2 = 0 ;
  intptr result;
  
  arg1 = (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *)jarg1; 
  arg2 = (Vixen::Core::BaseArray< Vixen::Ref< Vixen::SharedObj >,Vixen::SharedObj > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Core::BaseArray< Vixen::Ref< Vixen::SharedObj >,Vixen::SharedObj > const & type is null", 0);
    return 0;
  } 
  result = (intptr)(arg1)->Merge((Vixen::Core::BaseArray< Vixen::Ref< Vixen::SharedObj >,Vixen::SharedObj > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CoreFloatArray__SWIG_0(long long jarg1) {
  void * jresult ;
  intptr arg1 ;
  Vixen::Core::BaseArray< float,Vixen::SharedObj > *result = 0 ;
  
  arg1 = (intptr)jarg1; 
  result = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)new Vixen::Core::BaseArray< float,Vixen::SharedObj >(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CoreFloatArray__SWIG_1() {
  void * jresult ;
  Vixen::Core::BaseArray< float,Vixen::SharedObj > *result = 0 ;
  
  result = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)new Vixen::Core::BaseArray< float,Vixen::SharedObj >();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CoreFloatArray__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::Core::BaseArray< float,Vixen::SharedObj > *arg1 = 0 ;
  Vixen::Core::BaseArray< float,Vixen::SharedObj > *result = 0 ;
  
  arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Core::BaseArray< float,Vixen::SharedObj > const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)new Vixen::Core::BaseArray< float,Vixen::SharedObj >((Vixen::Core::BaseArray< float,Vixen::SharedObj > const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreFloatArray(void * jarg1) {
  Vixen::Core::BaseArray< float,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *) 0 ;
  
  arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)jarg1; 
  arg1->Release();
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CoreFloatArray_GetSize(void * jarg1) {
  long long jresult ;
  Vixen::Core::BaseArray< float,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *) 0 ;
  intptr result;
  
  arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)jarg1; 
  result = (intptr)((Vixen::Core::BaseArray< float,Vixen::SharedObj > const *)arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CoreFloatArray_GetMaxSize(void * jarg1) {
  long long jresult ;
  Vixen::Core::BaseArray< float,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *) 0 ;
  intptr result;
  
  arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)jarg1; 
  result = (intptr)((Vixen::Core::BaseArray< float,Vixen::SharedObj > const *)arg1)->GetMaxSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreFloatArray_SetSize(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  Vixen::Core::BaseArray< float,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *) 0 ;
  intptr arg2 ;
  bool result;
  
  arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (bool)(arg1)->SetSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreFloatArray_SetMaxSize(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  Vixen::Core::BaseArray< float,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *) 0 ;
  intptr arg2 ;
  bool result;
  
  arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (bool)(arg1)->SetMaxSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreFloatArray_SetAt(void * jarg1, long long jarg2, float jarg3) {
  unsigned int jresult ;
  Vixen::Core::BaseArray< float,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *) 0 ;
  intptr arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  bool result;
  
  arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)jarg1; 
  arg2 = (intptr)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  result = (bool)(arg1)->SetAt(arg2,(float const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreFloatArray_GetAt(void * jarg1, long long jarg2) {
  void * jresult ;
  Vixen::Core::BaseArray< float,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *) 0 ;
  intptr arg2 ;
  float *result = 0 ;
  
  arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (float *) &((Vixen::Core::BaseArray< float,Vixen::SharedObj > const *)arg1)->GetAt(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreFloatArray_First__SWIG_0(void * jarg1) {
  void * jresult ;
  Vixen::Core::BaseArray< float,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *) 0 ;
  float *result = 0 ;
  
  arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)jarg1; 
  result = (float *)(arg1)->First();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreFloatArray_Last__SWIG_0(void * jarg1) {
  void * jresult ;
  Vixen::Core::BaseArray< float,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *) 0 ;
  float *result = 0 ;
  
  arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)jarg1; 
  result = (float *)(arg1)->Last();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreFloatArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  Vixen::Core::BaseArray< float,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *) 0 ;
  bool result;
  
  arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)jarg1; 
  result = (bool)((Vixen::Core::BaseArray< float,Vixen::SharedObj > const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreFloatArray_Empty(void * jarg1) {
  Vixen::Core::BaseArray< float,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *) 0 ;
  
  arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)jarg1; 
  (arg1)->Empty();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreFloatArray_RemoveAt__SWIG_0(void * jarg1, long long jarg2, long long jarg3) {
  Vixen::Core::BaseArray< float,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *) 0 ;
  intptr arg2 ;
  intptr arg3 ;
  
  arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)jarg1; 
  arg2 = (intptr)jarg2; 
  arg3 = (intptr)jarg3; 
  (arg1)->RemoveAt(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreFloatArray_RemoveAt__SWIG_1(void * jarg1, long long jarg2) {
  Vixen::Core::BaseArray< float,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *) 0 ;
  intptr arg2 ;
  
  arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)jarg1; 
  arg2 = (intptr)jarg2; 
  (arg1)->RemoveAt(arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CoreFloatArray_Append(void * jarg1, float jarg2) {
  long long jresult ;
  Vixen::Core::BaseArray< float,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  intptr result;
  
  arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (intptr)(arg1)->Append((float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CoreFloatArray_Find(void * jarg1, float jarg2) {
  long long jresult ;
  Vixen::Core::BaseArray< float,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  intptr result;
  
  arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (intptr)((Vixen::Core::BaseArray< float,Vixen::SharedObj > const *)arg1)->Find((float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CoreFloatArray_Merge(void * jarg1, void * jarg2) {
  long long jresult ;
  Vixen::Core::BaseArray< float,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *) 0 ;
  Vixen::Core::BaseArray< float,Vixen::SharedObj > *arg2 = 0 ;
  intptr result;
  
  arg1 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)jarg1; 
  arg2 = (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Core::BaseArray< float,Vixen::SharedObj > const & type is null", 0);
    return 0;
  } 
  result = (intptr)(arg1)->Merge((Vixen::Core::BaseArray< float,Vixen::SharedObj > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CoreIntArray__SWIG_0(long long jarg1) {
  void * jresult ;
  intptr arg1 ;
  Vixen::Core::BaseArray< int32,Vixen::SharedObj > *result = 0 ;
  
  arg1 = (intptr)jarg1; 
  result = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *)new Vixen::Core::BaseArray< int32,Vixen::SharedObj >(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CoreIntArray__SWIG_1() {
  void * jresult ;
  Vixen::Core::BaseArray< int32,Vixen::SharedObj > *result = 0 ;
  
  result = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *)new Vixen::Core::BaseArray< int32,Vixen::SharedObj >();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CoreIntArray__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::Core::BaseArray< int,Vixen::SharedObj > *arg1 = 0 ;
  Vixen::Core::BaseArray< int32,Vixen::SharedObj > *result = 0 ;
  
  arg1 = (Vixen::Core::BaseArray< int,Vixen::SharedObj > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Core::BaseArray< int,Vixen::SharedObj > const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *)new Vixen::Core::BaseArray< int32,Vixen::SharedObj >((Vixen::Core::BaseArray< int,Vixen::SharedObj > const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreIntArray(void * jarg1) {
  Vixen::Core::BaseArray< int32,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *) 0 ;
  
  arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *)jarg1; 
  arg1->Release();
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CoreIntArray_GetSize(void * jarg1) {
  long long jresult ;
  Vixen::Core::BaseArray< int32,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *) 0 ;
  intptr result;
  
  arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *)jarg1; 
  result = (intptr)((Vixen::Core::BaseArray< int32,Vixen::SharedObj > const *)arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CoreIntArray_GetMaxSize(void * jarg1) {
  long long jresult ;
  Vixen::Core::BaseArray< int32,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *) 0 ;
  intptr result;
  
  arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *)jarg1; 
  result = (intptr)((Vixen::Core::BaseArray< int32,Vixen::SharedObj > const *)arg1)->GetMaxSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreIntArray_SetSize(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  Vixen::Core::BaseArray< int32,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *) 0 ;
  intptr arg2 ;
  bool result;
  
  arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (bool)(arg1)->SetSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreIntArray_SetMaxSize(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  Vixen::Core::BaseArray< int32,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *) 0 ;
  intptr arg2 ;
  bool result;
  
  arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (bool)(arg1)->SetMaxSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreIntArray_SetAt(void * jarg1, long long jarg2, int jarg3) {
  unsigned int jresult ;
  Vixen::Core::BaseArray< int32,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *) 0 ;
  intptr arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  bool result;
  
  arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *)jarg1; 
  arg2 = (intptr)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  result = (bool)(arg1)->SetAt(arg2,(int const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreIntArray_GetAt(void * jarg1, long long jarg2) {
  void * jresult ;
  Vixen::Core::BaseArray< int32,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *) 0 ;
  intptr arg2 ;
  int *result = 0 ;
  
  arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (int *) &((Vixen::Core::BaseArray< int32,Vixen::SharedObj > const *)arg1)->GetAt(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreIntArray_First__SWIG_0(void * jarg1) {
  void * jresult ;
  Vixen::Core::BaseArray< int32,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *) 0 ;
  int *result = 0 ;
  
  arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *)jarg1; 
  result = (int *)(arg1)->First();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreIntArray_Last__SWIG_0(void * jarg1) {
  void * jresult ;
  Vixen::Core::BaseArray< int32,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *) 0 ;
  int *result = 0 ;
  
  arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *)jarg1; 
  result = (int *)(arg1)->Last();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreIntArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  Vixen::Core::BaseArray< int32,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *) 0 ;
  bool result;
  
  arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *)jarg1; 
  result = (bool)((Vixen::Core::BaseArray< int32,Vixen::SharedObj > const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreIntArray_Empty(void * jarg1) {
  Vixen::Core::BaseArray< int32,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *) 0 ;
  
  arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *)jarg1; 
  (arg1)->Empty();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreIntArray_RemoveAt__SWIG_0(void * jarg1, long long jarg2, long long jarg3) {
  Vixen::Core::BaseArray< int32,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *) 0 ;
  intptr arg2 ;
  intptr arg3 ;
  
  arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *)jarg1; 
  arg2 = (intptr)jarg2; 
  arg3 = (intptr)jarg3; 
  (arg1)->RemoveAt(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreIntArray_RemoveAt__SWIG_1(void * jarg1, long long jarg2) {
  Vixen::Core::BaseArray< int32,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *) 0 ;
  intptr arg2 ;
  
  arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *)jarg1; 
  arg2 = (intptr)jarg2; 
  (arg1)->RemoveAt(arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CoreIntArray_Append(void * jarg1, int jarg2) {
  long long jresult ;
  Vixen::Core::BaseArray< int32,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  intptr result;
  
  arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (intptr)(arg1)->Append((int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CoreIntArray_Find(void * jarg1, int jarg2) {
  long long jresult ;
  Vixen::Core::BaseArray< int32,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  intptr result;
  
  arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (intptr)((Vixen::Core::BaseArray< int32,Vixen::SharedObj > const *)arg1)->Find((int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CoreIntArray_Merge(void * jarg1, void * jarg2) {
  long long jresult ;
  Vixen::Core::BaseArray< int32,Vixen::SharedObj > *arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *) 0 ;
  Vixen::Core::BaseArray< int,Vixen::SharedObj > *arg2 = 0 ;
  intptr result;
  
  arg1 = (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *)jarg1; 
  arg2 = (Vixen::Core::BaseArray< int,Vixen::SharedObj > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Core::BaseArray< int,Vixen::SharedObj > const & type is null", 0);
    return 0;
  } 
  result = (intptr)(arg1)->Merge((Vixen::Core::BaseArray< int,Vixen::SharedObj > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedObjArray__SWIG_0(long long jarg1, void * jarg2) {
  void * jresult ;
  intptr arg1 ;
  Vixen::Ref< Vixen::SharedObj > *arg2 = (Vixen::Ref< Vixen::SharedObj > *) 0 ;
  Vixen::Array< Vixen::ObjRef > *result = 0 ;
  
  arg1 = (intptr)jarg1; 
  arg2 = (Vixen::Ref< Vixen::SharedObj > *)jarg2; 
  result = (Vixen::Array< Vixen::ObjRef > *)new Vixen::Array< Vixen::ObjRef >(arg1,arg2);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedObjArray__SWIG_1(long long jarg1) {
  void * jresult ;
  intptr arg1 ;
  Vixen::Array< Vixen::ObjRef > *result = 0 ;
  
  arg1 = (intptr)jarg1; 
  result = (Vixen::Array< Vixen::ObjRef > *)new Vixen::Array< Vixen::ObjRef >(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedObjArray__SWIG_2() {
  void * jresult ;
  Vixen::Array< Vixen::ObjRef > *result = 0 ;
  
  result = (Vixen::Array< Vixen::ObjRef > *)new Vixen::Array< Vixen::ObjRef >();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharedObjArray_GetAt(void * jarg1, long long jarg2) {
  void * jresult ;
  Vixen::Array< Vixen::ObjRef > *arg1 = (Vixen::Array< Vixen::ObjRef > *) 0 ;
  intptr arg2 ;
  Vixen::Ref< Vixen::SharedObj > *result = 0 ;
  
  arg1 = (Vixen::Array< Vixen::ObjRef > *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (Vixen::Ref< Vixen::SharedObj > *) &((Vixen::Array< Vixen::ObjRef > const *)arg1)->GetAt(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharedObjArray_SetAt(void * jarg1, long long jarg2, void * jarg3) {
  unsigned int jresult ;
  Vixen::Array< Vixen::ObjRef > *arg1 = (Vixen::Array< Vixen::ObjRef > *) 0 ;
  intptr arg2 ;
  Vixen::Ref< Vixen::SharedObj > *arg3 = 0 ;
  bool result;
  
  arg1 = (Vixen::Array< Vixen::ObjRef > *)jarg1; 
  arg2 = (intptr)jarg2; 
  arg3 = (Vixen::Ref< Vixen::SharedObj > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ref< Vixen::SharedObj > const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetAt(arg2,(Vixen::Ref< Vixen::SharedObj > const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedObjArray_RemoveAt__SWIG_0(void * jarg1, long long jarg2, long long jarg3) {
  Vixen::Array< Vixen::ObjRef > *arg1 = (Vixen::Array< Vixen::ObjRef > *) 0 ;
  intptr arg2 ;
  intptr arg3 ;
  
  arg1 = (Vixen::Array< Vixen::ObjRef > *)jarg1; 
  arg2 = (intptr)jarg2; 
  arg3 = (intptr)jarg3; 
  (arg1)->RemoveAt(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedObjArray_RemoveAt__SWIG_1(void * jarg1, long long jarg2) {
  Vixen::Array< Vixen::ObjRef > *arg1 = (Vixen::Array< Vixen::ObjRef > *) 0 ;
  intptr arg2 ;
  
  arg1 = (Vixen::Array< Vixen::ObjRef > *)jarg1; 
  arg2 = (intptr)jarg2; 
  (arg1)->RemoveAt(arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_SharedObjArray_Merge(void * jarg1, void * jarg2) {
  long long jresult ;
  Vixen::Array< Vixen::ObjRef > *arg1 = (Vixen::Array< Vixen::ObjRef > *) 0 ;
  Vixen::Array< Vixen::Ref< Vixen::SharedObj > > *arg2 = 0 ;
  intptr result;
  
  arg1 = (Vixen::Array< Vixen::ObjRef > *)jarg1; 
  arg2 = (Vixen::Array< Vixen::Ref< Vixen::SharedObj > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Array< Vixen::Ref< Vixen::SharedObj > > const & type is null", 0);
    return 0;
  } 
  result = (intptr)(arg1)->Merge((Vixen::Array< Vixen::Ref< Vixen::SharedObj > > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SharedObjArray(void * jarg1) {
  Vixen::Array< Vixen::ObjRef > *arg1 = (Vixen::Array< Vixen::ObjRef > *) 0 ;
  
  arg1 = (Vixen::Array< Vixen::ObjRef > *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjArray__SWIG_0(long long jarg1) {
  void * jresult ;
  intptr arg1 ;
  Vixen::ObjArray *result = 0 ;
  
  arg1 = (intptr)jarg1; 
  result = (Vixen::ObjArray *)new Vixen::ObjArray(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjArray__SWIG_1() {
  void * jresult ;
  Vixen::ObjArray *result = 0 ;
  
  result = (Vixen::ObjArray *)new Vixen::ObjArray();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjArray__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::ObjArray *arg1 = 0 ;
  Vixen::ObjArray *result = 0 ;
  
  arg1 = (Vixen::ObjArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::ObjArray const & type is null", 0);
    return 0;
  } 
  result = (Vixen::ObjArray *)new Vixen::ObjArray((Vixen::ObjArray const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ObjArray(void * jarg1) {
  Vixen::ObjArray *arg1 = (Vixen::ObjArray *) 0 ;
  
  arg1 = (Vixen::ObjArray *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjArray_GetAt__SWIG_0(void * jarg1, long long jarg2) {
  void * jresult ;
  Vixen::ObjArray *arg1 = (Vixen::ObjArray *) 0 ;
  intptr arg2 ;
  Vixen::SharedObj *result = 0 ;
  
  arg1 = (Vixen::ObjArray *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (Vixen::SharedObj *)((Vixen::ObjArray const *)arg1)->GetAt(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjArray_SetAt(void * jarg1, long long jarg2, void * jarg3) {
  unsigned int jresult ;
  Vixen::ObjArray *arg1 = (Vixen::ObjArray *) 0 ;
  intptr arg2 ;
  Vixen::SharedObj *arg3 = (Vixen::SharedObj *) 0 ;
  bool result;
  
  arg1 = (Vixen::ObjArray *)jarg1; 
  arg2 = (intptr)jarg2; 
  arg3 = (Vixen::SharedObj *)jarg3; 
  result = (bool)(arg1)->SetAt(arg2,(Vixen::SharedObj const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ObjArray_Find(void * jarg1, void * jarg2) {
  long long jresult ;
  Vixen::ObjArray *arg1 = (Vixen::ObjArray *) 0 ;
  Vixen::SharedObj *arg2 = (Vixen::SharedObj *) 0 ;
  intptr result;
  
  arg1 = (Vixen::ObjArray *)jarg1; 
  arg2 = (Vixen::SharedObj *)jarg2; 
  result = (intptr)((Vixen::ObjArray const *)arg1)->Find((Vixen::SharedObj const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ObjArray_Append(void * jarg1, void * jarg2) {
  long long jresult ;
  Vixen::ObjArray *arg1 = (Vixen::ObjArray *) 0 ;
  Vixen::SharedObj *arg2 = (Vixen::SharedObj *) 0 ;
  intptr result;
  
  arg1 = (Vixen::ObjArray *)jarg1; 
  arg2 = (Vixen::SharedObj *)jarg2; 
  result = (intptr)(arg1)->Append((Vixen::SharedObj const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjArray_getitem(void * jarg1, long long jarg2) {
  void * jresult ;
  Vixen::ObjArray *arg1 = (Vixen::ObjArray *) 0 ;
  long long arg2 ;
  Vixen::ObjRef result;
  
  arg1 = (Vixen::ObjArray *)jarg1; 
  arg2 = (long long)jarg2; 
  try {
    result = Vixen_ObjArray_getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return 0; 
  }
  
  jresult = new Vixen::ObjRef((const Vixen::ObjRef &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjArray_setitem(void * jarg1, long long jarg2, void * jarg3) {
  Vixen::ObjArray *arg1 = (Vixen::ObjArray *) 0 ;
  long long arg2 ;
  Vixen::ObjRef *arg3 = 0 ;
  
  arg1 = (Vixen::ObjArray *)jarg1; 
  arg2 = (long long)jarg2; 
  arg3 = (Vixen::ObjRef *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::ObjRef const & type is null", 0);
    return ;
  } 
  try {
    Vixen_ObjArray_setitem(arg1,arg2,(Vixen::Ref< Vixen::SharedObj > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjArray_AddRange(void * jarg1, void * jarg2) {
  Vixen::ObjArray *arg1 = (Vixen::ObjArray *) 0 ;
  Vixen::Array< Vixen::ObjRef > *arg2 = 0 ;
  
  arg1 = (Vixen::ObjArray *)jarg1; 
  arg2 = (Vixen::Array< Vixen::ObjRef > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Array< Vixen::ObjRef > const & type is null", 0);
    return ;
  } 
  Vixen_ObjArray_AddRange(arg1,(Vixen::Array< Vixen::Ref< Vixen::SharedObj > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjArray_GetRange(void * jarg1, long jarg2, long jarg3) {
  void * jresult ;
  Vixen::ObjArray *arg1 = (Vixen::ObjArray *) 0 ;
  long arg2 ;
  long arg3 ;
  Vixen::ObjArray *result = 0 ;
  
  arg1 = (Vixen::ObjArray *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  try {
    result = (Vixen::ObjArray *)Vixen_ObjArray_GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return 0; 
  }
  catch(std::invalid_argument &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::invalid_argument exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjArray_Insert(void * jarg1, int jarg2, void * jarg3) {
  Vixen::ObjArray *arg1 = (Vixen::ObjArray *) 0 ;
  int arg2 ;
  Vixen::ObjRef *arg3 = 0 ;
  
  arg1 = (Vixen::ObjArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vixen::ObjRef *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::ObjRef const & type is null", 0);
    return ;
  } 
  try {
    Vixen_ObjArray_Insert(arg1,arg2,(Vixen::Ref< Vixen::SharedObj > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjArray_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  Vixen::ObjArray *arg1 = (Vixen::ObjArray *) 0 ;
  int arg2 ;
  Vixen::Array< Vixen::ObjRef > *arg3 = 0 ;
  
  arg1 = (Vixen::ObjArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vixen::Array< Vixen::ObjRef > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Array< Vixen::ObjRef > const & type is null", 0);
    return ;
  } 
  try {
    Vixen_ObjArray_InsertRange(arg1,arg2,(Vixen::Array< Vixen::Ref< Vixen::SharedObj > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjArray_RemoveAt(void * jarg1, int jarg2) {
  Vixen::ObjArray *arg1 = (Vixen::ObjArray *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::ObjArray *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    Vixen_ObjArray_RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjArray_RemoveElem(void * jarg1, int jarg2) {
  Vixen::ObjArray *arg1 = (Vixen::ObjArray *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::ObjArray *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    Vixen_ObjArray_RemoveElem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjArray_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  Vixen::ObjArray *arg1 = (Vixen::ObjArray *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Vixen::ObjArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    Vixen_ObjArray_RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  catch(std::invalid_argument &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::invalid_argument exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjArray_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::ObjRef *arg1 = 0 ;
  int arg2 ;
  Vixen::ObjArray *result = 0 ;
  
  arg1 = (Vixen::ObjRef *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::ObjRef const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (Vixen::ObjArray *)Vixen_ObjArray_Repeat((Vixen::Ref< Vixen::SharedObj > const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjArray_Reverse(void * jarg1, int jarg2, int jarg3) {
  Vixen::ObjArray *arg1 = (Vixen::ObjArray *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Vixen::ObjArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    Vixen_ObjArray_Reverse(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  catch(std::invalid_argument &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::invalid_argument exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjArray_SetRange(void * jarg1, long jarg2, void * jarg3) {
  Vixen::ObjArray *arg1 = (Vixen::ObjArray *) 0 ;
  long arg2 ;
  Vixen::Array< Vixen::ObjRef > *arg3 = 0 ;
  
  arg1 = (Vixen::ObjArray *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (Vixen::Array< Vixen::ObjRef > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Array< Vixen::ObjRef > const & type is null", 0);
    return ;
  } 
  try {
    Vixen_ObjArray_SetRange(arg1,arg2,(Vixen::Array< Vixen::Ref< Vixen::SharedObj > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjArray_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::ObjArray *arg1 = (Vixen::ObjArray *) 0 ;
  Vixen::ObjRef *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::ObjArray *)jarg1; 
  arg2 = (Vixen::ObjRef *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::ObjRef const & type is null", 0);
    return 0;
  } 
  result = (bool)Vixen_ObjArray_Contains(arg1,(Vixen::Ref< Vixen::SharedObj > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ObjArray_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  Vixen::ObjArray *arg1 = (Vixen::ObjArray *) 0 ;
  Vixen::ObjRef *arg2 = 0 ;
  int result;
  
  arg1 = (Vixen::ObjArray *)jarg1; 
  arg2 = (Vixen::ObjRef *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::ObjRef const & type is null", 0);
    return 0;
  } 
  try {
    result = (int)Vixen_ObjArray_IndexOf(arg1,(Vixen::Ref< Vixen::SharedObj > const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ObjArray_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  Vixen::ObjArray *arg1 = (Vixen::ObjArray *) 0 ;
  Vixen::ObjRef *arg2 = 0 ;
  int result;
  
  arg1 = (Vixen::ObjArray *)jarg1; 
  arg2 = (Vixen::ObjRef *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::ObjRef const & type is null", 0);
    return 0;
  } 
  try {
    result = (int)Vixen_ObjArray_LastIndexOf(arg1,(Vixen::Ref< Vixen::SharedObj > const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjArray_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::ObjArray *arg1 = (Vixen::ObjArray *) 0 ;
  Vixen::ObjRef *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::ObjArray *)jarg1; 
  arg2 = (Vixen::ObjRef *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::ObjRef const & type is null", 0);
    return 0;
  } 
  result = (bool)Vixen_ObjArray_Remove(arg1,(Vixen::Ref< Vixen::SharedObj > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedIntArray__SWIG_0(long long jarg1, void * jarg2) {
  void * jresult ;
  intptr arg1 ;
  int *arg2 = (int *) 0 ;
  Vixen::Array< int32 > *result = 0 ;
  
  arg1 = (intptr)jarg1; 
  arg2 = (int *)jarg2; 
  result = (Vixen::Array< int32 > *)new Vixen::Array< int32 >(arg1,arg2);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedIntArray__SWIG_1(long long jarg1) {
  void * jresult ;
  intptr arg1 ;
  Vixen::Array< int32 > *result = 0 ;
  
  arg1 = (intptr)jarg1; 
  result = (Vixen::Array< int32 > *)new Vixen::Array< int32 >(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedIntArray__SWIG_2() {
  void * jresult ;
  Vixen::Array< int32 > *result = 0 ;
  
  result = (Vixen::Array< int32 > *)new Vixen::Array< int32 >();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharedIntArray_GetAt(void * jarg1, long long jarg2) {
  void * jresult ;
  Vixen::Array< int32 > *arg1 = (Vixen::Array< int32 > *) 0 ;
  intptr arg2 ;
  int *result = 0 ;
  
  arg1 = (Vixen::Array< int32 > *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (int *) &((Vixen::Array< int32 > const *)arg1)->GetAt(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharedIntArray_SetAt(void * jarg1, long long jarg2, int jarg3) {
  unsigned int jresult ;
  Vixen::Array< int32 > *arg1 = (Vixen::Array< int32 > *) 0 ;
  intptr arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  bool result;
  
  arg1 = (Vixen::Array< int32 > *)jarg1; 
  arg2 = (intptr)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  result = (bool)(arg1)->SetAt(arg2,(int const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedIntArray_RemoveAt__SWIG_0(void * jarg1, long long jarg2, long long jarg3) {
  Vixen::Array< int32 > *arg1 = (Vixen::Array< int32 > *) 0 ;
  intptr arg2 ;
  intptr arg3 ;
  
  arg1 = (Vixen::Array< int32 > *)jarg1; 
  arg2 = (intptr)jarg2; 
  arg3 = (intptr)jarg3; 
  (arg1)->RemoveAt(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedIntArray_RemoveAt__SWIG_1(void * jarg1, long long jarg2) {
  Vixen::Array< int32 > *arg1 = (Vixen::Array< int32 > *) 0 ;
  intptr arg2 ;
  
  arg1 = (Vixen::Array< int32 > *)jarg1; 
  arg2 = (intptr)jarg2; 
  (arg1)->RemoveAt(arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_SharedIntArray_Merge(void * jarg1, void * jarg2) {
  long long jresult ;
  Vixen::Array< int32 > *arg1 = (Vixen::Array< int32 > *) 0 ;
  Vixen::Array< int > *arg2 = 0 ;
  intptr result;
  
  arg1 = (Vixen::Array< int32 > *)jarg1; 
  arg2 = (Vixen::Array< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Array< int > const & type is null", 0);
    return 0;
  } 
  result = (intptr)(arg1)->Merge((Vixen::Array< int > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SharedIntArray(void * jarg1) {
  Vixen::Array< int32 > *arg1 = (Vixen::Array< int32 > *) 0 ;
  
  arg1 = (Vixen::Array< int32 > *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedFloatArray__SWIG_0(long long jarg1, void * jarg2) {
  void * jresult ;
  intptr arg1 ;
  float *arg2 = (float *) 0 ;
  Vixen::Array< float > *result = 0 ;
  
  arg1 = (intptr)jarg1; 
  arg2 = (float *)jarg2; 
  result = (Vixen::Array< float > *)new Vixen::Array< float >(arg1,arg2);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedFloatArray__SWIG_1(long long jarg1) {
  void * jresult ;
  intptr arg1 ;
  Vixen::Array< float > *result = 0 ;
  
  arg1 = (intptr)jarg1; 
  result = (Vixen::Array< float > *)new Vixen::Array< float >(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedFloatArray__SWIG_2() {
  void * jresult ;
  Vixen::Array< float > *result = 0 ;
  
  result = (Vixen::Array< float > *)new Vixen::Array< float >();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharedFloatArray_GetAt(void * jarg1, long long jarg2) {
  void * jresult ;
  Vixen::Array< float > *arg1 = (Vixen::Array< float > *) 0 ;
  intptr arg2 ;
  float *result = 0 ;
  
  arg1 = (Vixen::Array< float > *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (float *) &((Vixen::Array< float > const *)arg1)->GetAt(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharedFloatArray_SetAt(void * jarg1, long long jarg2, float jarg3) {
  unsigned int jresult ;
  Vixen::Array< float > *arg1 = (Vixen::Array< float > *) 0 ;
  intptr arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  bool result;
  
  arg1 = (Vixen::Array< float > *)jarg1; 
  arg2 = (intptr)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  result = (bool)(arg1)->SetAt(arg2,(float const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedFloatArray_RemoveAt__SWIG_0(void * jarg1, long long jarg2, long long jarg3) {
  Vixen::Array< float > *arg1 = (Vixen::Array< float > *) 0 ;
  intptr arg2 ;
  intptr arg3 ;
  
  arg1 = (Vixen::Array< float > *)jarg1; 
  arg2 = (intptr)jarg2; 
  arg3 = (intptr)jarg3; 
  (arg1)->RemoveAt(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedFloatArray_RemoveAt__SWIG_1(void * jarg1, long long jarg2) {
  Vixen::Array< float > *arg1 = (Vixen::Array< float > *) 0 ;
  intptr arg2 ;
  
  arg1 = (Vixen::Array< float > *)jarg1; 
  arg2 = (intptr)jarg2; 
  (arg1)->RemoveAt(arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_SharedFloatArray_Merge(void * jarg1, void * jarg2) {
  long long jresult ;
  Vixen::Array< float > *arg1 = (Vixen::Array< float > *) 0 ;
  Vixen::Array< float > *arg2 = 0 ;
  intptr result;
  
  arg1 = (Vixen::Array< float > *)jarg1; 
  arg2 = (Vixen::Array< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Array< float > const & type is null", 0);
    return 0;
  } 
  result = (intptr)(arg1)->Merge((Vixen::Array< float > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SharedFloatArray(void * jarg1) {
  Vixen::Array< float > *arg1 = (Vixen::Array< float > *) 0 ;
  
  arg1 = (Vixen::Array< float > *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntArray__SWIG_0(long long jarg1) {
  void * jresult ;
  intptr arg1 ;
  Vixen::IntArray *result = 0 ;
  
  arg1 = (intptr)jarg1; 
  result = (Vixen::IntArray *)new Vixen::IntArray(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntArray__SWIG_1() {
  void * jresult ;
  Vixen::IntArray *result = 0 ;
  
  result = (Vixen::IntArray *)new Vixen::IntArray();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntArray_getitem(void * jarg1, long long jarg2) {
  int jresult ;
  Vixen::IntArray *arg1 = (Vixen::IntArray *) 0 ;
  long long arg2 ;
  int32 result;
  
  arg1 = (Vixen::IntArray *)jarg1; 
  arg2 = (long long)jarg2; 
  try {
    result = (int32)Vixen_IntArray_getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_setitem(void * jarg1, long long jarg2, int jarg3) {
  Vixen::IntArray *arg1 = (Vixen::IntArray *) 0 ;
  long long arg2 ;
  int32 *arg3 = 0 ;
  int32 temp3 ;
  
  arg1 = (Vixen::IntArray *)jarg1; 
  arg2 = (long long)jarg2; 
  temp3 = (int32)jarg3; 
  arg3 = &temp3; 
  try {
    Vixen_IntArray_setitem(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_AddRange(void * jarg1, void * jarg2) {
  Vixen::IntArray *arg1 = (Vixen::IntArray *) 0 ;
  Vixen::Array< int32 > *arg2 = 0 ;
  
  arg1 = (Vixen::IntArray *)jarg1; 
  arg2 = (Vixen::Array< int32 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Array< int32 > const & type is null", 0);
    return ;
  } 
  Vixen_IntArray_AddRange(arg1,(Vixen::Array< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntArray_GetRange(void * jarg1, long jarg2, long jarg3) {
  void * jresult ;
  Vixen::IntArray *arg1 = (Vixen::IntArray *) 0 ;
  long arg2 ;
  long arg3 ;
  Vixen::IntArray *result = 0 ;
  
  arg1 = (Vixen::IntArray *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  try {
    result = (Vixen::IntArray *)Vixen_IntArray_GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return 0; 
  }
  catch(std::invalid_argument &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::invalid_argument exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_Insert(void * jarg1, int jarg2, int jarg3) {
  Vixen::IntArray *arg1 = (Vixen::IntArray *) 0 ;
  int arg2 ;
  int32 *arg3 = 0 ;
  int32 temp3 ;
  
  arg1 = (Vixen::IntArray *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int32)jarg3; 
  arg3 = &temp3; 
  try {
    Vixen_IntArray_Insert(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  Vixen::IntArray *arg1 = (Vixen::IntArray *) 0 ;
  int arg2 ;
  Vixen::Array< int32 > *arg3 = 0 ;
  
  arg1 = (Vixen::IntArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vixen::Array< int32 > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Array< int32 > const & type is null", 0);
    return ;
  } 
  try {
    Vixen_IntArray_InsertRange(arg1,arg2,(Vixen::Array< int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_RemoveAt(void * jarg1, int jarg2) {
  Vixen::IntArray *arg1 = (Vixen::IntArray *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::IntArray *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    Vixen_IntArray_RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_RemoveElem(void * jarg1, int jarg2) {
  Vixen::IntArray *arg1 = (Vixen::IntArray *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::IntArray *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    Vixen_IntArray_RemoveElem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  Vixen::IntArray *arg1 = (Vixen::IntArray *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Vixen::IntArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    Vixen_IntArray_RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  catch(std::invalid_argument &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::invalid_argument exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntArray_Repeat(int jarg1, int jarg2) {
  void * jresult ;
  int32 *arg1 = 0 ;
  int arg2 ;
  int32 temp1 ;
  Vixen::IntArray *result = 0 ;
  
  temp1 = (int32)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (Vixen::IntArray *)Vixen_IntArray_Repeat((int const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_Reverse(void * jarg1, int jarg2, int jarg3) {
  Vixen::IntArray *arg1 = (Vixen::IntArray *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Vixen::IntArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    Vixen_IntArray_Reverse(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  catch(std::invalid_argument &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::invalid_argument exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_SetRange(void * jarg1, long jarg2, void * jarg3) {
  Vixen::IntArray *arg1 = (Vixen::IntArray *) 0 ;
  long arg2 ;
  Vixen::Array< int32 > *arg3 = 0 ;
  
  arg1 = (Vixen::IntArray *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (Vixen::Array< int32 > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Array< int32 > const & type is null", 0);
    return ;
  } 
  try {
    Vixen_IntArray_SetRange(arg1,arg2,(Vixen::Array< int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntArray_Contains(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Vixen::IntArray *arg1 = (Vixen::IntArray *) 0 ;
  int32 *arg2 = 0 ;
  int32 temp2 ;
  bool result;
  
  arg1 = (Vixen::IntArray *)jarg1; 
  temp2 = (int32)jarg2; 
  arg2 = &temp2; 
  result = (bool)Vixen_IntArray_Contains(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntArray_IndexOf(void * jarg1, int jarg2) {
  int jresult ;
  Vixen::IntArray *arg1 = (Vixen::IntArray *) 0 ;
  int32 *arg2 = 0 ;
  int32 temp2 ;
  int result;
  
  arg1 = (Vixen::IntArray *)jarg1; 
  temp2 = (int32)jarg2; 
  arg2 = &temp2; 
  try {
    result = (int)Vixen_IntArray_IndexOf(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntArray_LastIndexOf(void * jarg1, int jarg2) {
  int jresult ;
  Vixen::IntArray *arg1 = (Vixen::IntArray *) 0 ;
  int32 *arg2 = 0 ;
  int32 temp2 ;
  int result;
  
  arg1 = (Vixen::IntArray *)jarg1; 
  temp2 = (int32)jarg2; 
  arg2 = &temp2; 
  try {
    result = (int)Vixen_IntArray_LastIndexOf(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntArray_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Vixen::IntArray *arg1 = (Vixen::IntArray *) 0 ;
  int32 *arg2 = 0 ;
  int32 temp2 ;
  bool result;
  
  arg1 = (Vixen::IntArray *)jarg1; 
  temp2 = (int32)jarg2; 
  arg2 = &temp2; 
  result = (bool)Vixen_IntArray_Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntArray(void * jarg1) {
  Vixen::IntArray *arg1 = (Vixen::IntArray *) 0 ;
  
  arg1 = (Vixen::IntArray *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FloatArray__SWIG_0(long long jarg1) {
  void * jresult ;
  intptr arg1 ;
  Vixen::FloatArray *result = 0 ;
  
  arg1 = (intptr)jarg1; 
  result = (Vixen::FloatArray *)new Vixen::FloatArray(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FloatArray__SWIG_1() {
  void * jresult ;
  Vixen::FloatArray *result = 0 ;
  
  result = (Vixen::FloatArray *)new Vixen::FloatArray();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FloatArray_getitem(void * jarg1, long long jarg2) {
  float jresult ;
  Vixen::FloatArray *arg1 = (Vixen::FloatArray *) 0 ;
  long long arg2 ;
  float result;
  
  arg1 = (Vixen::FloatArray *)jarg1; 
  arg2 = (long long)jarg2; 
  try {
    result = (float)Vixen_FloatArray_getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FloatArray_setitem(void * jarg1, long long jarg2, float jarg3) {
  Vixen::FloatArray *arg1 = (Vixen::FloatArray *) 0 ;
  long long arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  arg1 = (Vixen::FloatArray *)jarg1; 
  arg2 = (long long)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  try {
    Vixen_FloatArray_setitem(arg1,arg2,(float const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_FloatArray_AddRange(void * jarg1, void * jarg2) {
  Vixen::FloatArray *arg1 = (Vixen::FloatArray *) 0 ;
  Vixen::Array< float > *arg2 = 0 ;
  
  arg1 = (Vixen::FloatArray *)jarg1; 
  arg2 = (Vixen::Array< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Array< float > const & type is null", 0);
    return ;
  } 
  Vixen_FloatArray_AddRange(arg1,(Vixen::Array< float > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FloatArray_GetRange(void * jarg1, long jarg2, long jarg3) {
  void * jresult ;
  Vixen::FloatArray *arg1 = (Vixen::FloatArray *) 0 ;
  long arg2 ;
  long arg3 ;
  Vixen::FloatArray *result = 0 ;
  
  arg1 = (Vixen::FloatArray *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  try {
    result = (Vixen::FloatArray *)Vixen_FloatArray_GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return 0; 
  }
  catch(std::invalid_argument &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::invalid_argument exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FloatArray_Insert(void * jarg1, int jarg2, float jarg3) {
  Vixen::FloatArray *arg1 = (Vixen::FloatArray *) 0 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  arg1 = (Vixen::FloatArray *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  try {
    Vixen_FloatArray_Insert(arg1,arg2,(float const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_FloatArray_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  Vixen::FloatArray *arg1 = (Vixen::FloatArray *) 0 ;
  int arg2 ;
  Vixen::Array< float > *arg3 = 0 ;
  
  arg1 = (Vixen::FloatArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vixen::Array< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Array< float > const & type is null", 0);
    return ;
  } 
  try {
    Vixen_FloatArray_InsertRange(arg1,arg2,(Vixen::Array< float > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_FloatArray_RemoveAt(void * jarg1, int jarg2) {
  Vixen::FloatArray *arg1 = (Vixen::FloatArray *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::FloatArray *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    Vixen_FloatArray_RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_FloatArray_RemoveElem(void * jarg1, int jarg2) {
  Vixen::FloatArray *arg1 = (Vixen::FloatArray *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::FloatArray *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    Vixen_FloatArray_RemoveElem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_FloatArray_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  Vixen::FloatArray *arg1 = (Vixen::FloatArray *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Vixen::FloatArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    Vixen_FloatArray_RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  catch(std::invalid_argument &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::invalid_argument exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FloatArray_Repeat(float jarg1, int jarg2) {
  void * jresult ;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  Vixen::FloatArray *result = 0 ;
  
  temp1 = (float)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (Vixen::FloatArray *)Vixen_FloatArray_Repeat((float const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FloatArray_Reverse(void * jarg1, int jarg2, int jarg3) {
  Vixen::FloatArray *arg1 = (Vixen::FloatArray *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Vixen::FloatArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    Vixen_FloatArray_Reverse(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  catch(std::invalid_argument &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::invalid_argument exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_FloatArray_SetRange(void * jarg1, long jarg2, void * jarg3) {
  Vixen::FloatArray *arg1 = (Vixen::FloatArray *) 0 ;
  long arg2 ;
  Vixen::Array< float > *arg3 = 0 ;
  
  arg1 = (Vixen::FloatArray *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (Vixen::Array< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Array< float > const & type is null", 0);
    return ;
  } 
  try {
    Vixen_FloatArray_SetRange(arg1,arg2,(Vixen::Array< float > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FloatArray_Contains(void * jarg1, float jarg2) {
  unsigned int jresult ;
  Vixen::FloatArray *arg1 = (Vixen::FloatArray *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  bool result;
  
  arg1 = (Vixen::FloatArray *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (bool)Vixen_FloatArray_Contains(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FloatArray_IndexOf(void * jarg1, float jarg2) {
  int jresult ;
  Vixen::FloatArray *arg1 = (Vixen::FloatArray *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  int result;
  
  arg1 = (Vixen::FloatArray *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  try {
    result = (int)Vixen_FloatArray_IndexOf(arg1,(float const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FloatArray_LastIndexOf(void * jarg1, float jarg2) {
  int jresult ;
  Vixen::FloatArray *arg1 = (Vixen::FloatArray *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  int result;
  
  arg1 = (Vixen::FloatArray *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  try {
    result = (int)Vixen_FloatArray_LastIndexOf(arg1,(float const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FloatArray_Remove(void * jarg1, float jarg2) {
  unsigned int jresult ;
  Vixen::FloatArray *arg1 = (Vixen::FloatArray *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  bool result;
  
  arg1 = (Vixen::FloatArray *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (bool)Vixen_FloatArray_Remove(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FloatArray(void * jarg1) {
  Vixen::FloatArray *arg1 = (Vixen::FloatArray *) 0 ;
  
  arg1 = (Vixen::FloatArray *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntArrayRef__SWIG_0(void * jarg1) {
  void * jresult ;
  Vixen::Core::RefObj *arg1 = (Vixen::Core::RefObj *) 0 ;
  Vixen::Ref< Vixen::IntArray > *result = 0 ;
  
  arg1 = (Vixen::Core::RefObj *)jarg1; 
  result = (Vixen::Ref< Vixen::IntArray > *)new Vixen::Ref< Vixen::IntArray >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntArrayRef__SWIG_1() {
  void * jresult ;
  Vixen::Ref< Vixen::IntArray > *result = 0 ;
  
  result = (Vixen::Ref< Vixen::IntArray > *)new Vixen::Ref< Vixen::IntArray >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntArrayRef__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::Ref< Vixen::IntArray > *arg1 = 0 ;
  Vixen::Ref< Vixen::IntArray > *result = 0 ;
  
  arg1 = (Vixen::Ref< Vixen::IntArray > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ref< Vixen::IntArray > const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Ref< Vixen::IntArray > *)new Vixen::Ref< Vixen::IntArray >((Vixen::Ref< Vixen::IntArray > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntArrayRef__SWIG_3(void * jarg1) {
  void * jresult ;
  Vixen::IntArray *arg1 = (Vixen::IntArray *) 0 ;
  Vixen::Ref< Vixen::IntArray > *result = 0 ;
  
  arg1 = (Vixen::IntArray *)jarg1; 
  result = (Vixen::Ref< Vixen::IntArray > *)new Vixen::Ref< Vixen::IntArray >((Vixen::IntArray const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntArrayRef___ref__(void * jarg1) {
  void * jresult ;
  Vixen::Ref< Vixen::IntArray > *arg1 = (Vixen::Ref< Vixen::IntArray > *) 0 ;
  Vixen::IntArray *result = 0 ;
  
  arg1 = (Vixen::Ref< Vixen::IntArray > *)jarg1; 
  result = (Vixen::IntArray *)(arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntArrayRef_Assign__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Ref< Vixen::IntArray > *arg1 = (Vixen::Ref< Vixen::IntArray > *) 0 ;
  Vixen::Ref< Vixen::IntArray > *arg2 = 0 ;
  Vixen::Ref< Vixen::IntArray > *result = 0 ;
  
  arg1 = (Vixen::Ref< Vixen::IntArray > *)jarg1; 
  arg2 = (Vixen::Ref< Vixen::IntArray > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ref< Vixen::IntArray > const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Ref< Vixen::IntArray > *) &(arg1)->operator =((Vixen::Ref< Vixen::IntArray > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntArrayRef_Assign__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Ref< Vixen::IntArray > *arg1 = (Vixen::Ref< Vixen::IntArray > *) 0 ;
  Vixen::IntArray *arg2 = (Vixen::IntArray *) 0 ;
  Vixen::Ref< Vixen::IntArray > *result = 0 ;
  
  arg1 = (Vixen::Ref< Vixen::IntArray > *)jarg1; 
  arg2 = (Vixen::IntArray *)jarg2; 
  result = (Vixen::Ref< Vixen::IntArray > *) &(arg1)->operator =((Vixen::IntArray const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntArrayRef_Equal__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Ref< Vixen::IntArray > *arg1 = (Vixen::Ref< Vixen::IntArray > *) 0 ;
  Vixen::Ref< Vixen::IntArray > *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Ref< Vixen::IntArray > *)jarg1; 
  arg2 = (Vixen::Ref< Vixen::IntArray > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ref< Vixen::IntArray > const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Ref< Vixen::IntArray > const *)arg1)->operator ==((Vixen::Ref< Vixen::IntArray > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntArrayRef_NotEqual__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Ref< Vixen::IntArray > *arg1 = (Vixen::Ref< Vixen::IntArray > *) 0 ;
  Vixen::Ref< Vixen::IntArray > *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Ref< Vixen::IntArray > *)jarg1; 
  arg2 = (Vixen::Ref< Vixen::IntArray > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ref< Vixen::IntArray > const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Ref< Vixen::IntArray > const *)arg1)->operator !=((Vixen::Ref< Vixen::IntArray > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntArrayRef_Equal__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Ref< Vixen::IntArray > *arg1 = (Vixen::Ref< Vixen::IntArray > *) 0 ;
  Vixen::IntArray *arg2 = (Vixen::IntArray *) 0 ;
  bool result;
  
  arg1 = (Vixen::Ref< Vixen::IntArray > *)jarg1; 
  arg2 = (Vixen::IntArray *)jarg2; 
  result = (bool)((Vixen::Ref< Vixen::IntArray > const *)arg1)->operator ==((Vixen::IntArray const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntArrayRef_NotEqual__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Ref< Vixen::IntArray > *arg1 = (Vixen::Ref< Vixen::IntArray > *) 0 ;
  Vixen::IntArray *arg2 = (Vixen::IntArray *) 0 ;
  bool result;
  
  arg1 = (Vixen::Ref< Vixen::IntArray > *)jarg1; 
  arg2 = (Vixen::IntArray *)jarg2; 
  result = (bool)((Vixen::Ref< Vixen::IntArray > const *)arg1)->operator !=((Vixen::IntArray const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntArrayRef_Null_get() {
  void * jresult ;
  Vixen::Ref< Vixen::IntArray > *result = 0 ;
  
  result = (Vixen::Ref< Vixen::IntArray > *)&Vixen::Ref< Vixen::IntArray >::Null;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntArrayRef(void * jarg1) {
  Vixen::Ref< Vixen::IntArray > *arg1 = (Vixen::Ref< Vixen::IntArray > *) 0 ;
  
  arg1 = (Vixen::Ref< Vixen::IntArray > *)jarg1; 
  delete arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PI_get() {
  double jresult ;
  double result;
  
  result = (double)(3.14159265358979);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec2_x_set(void * jarg1, float jarg2) {
  Vixen::Vec2 *arg1 = (Vixen::Vec2 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Vec2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2_x_get(void * jarg1) {
  float jresult ;
  Vixen::Vec2 *arg1 = (Vixen::Vec2 *) 0 ;
  float result;
  
  arg1 = (Vixen::Vec2 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec2_y_set(void * jarg1, float jarg2) {
  Vixen::Vec2 *arg1 = (Vixen::Vec2 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Vec2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2_y_get(void * jarg1) {
  float jresult ;
  Vixen::Vec2 *arg1 = (Vixen::Vec2 *) 0 ;
  float result;
  
  arg1 = (Vixen::Vec2 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vec2__SWIG_0() {
  void * jresult ;
  Vixen::Vec2 *result = 0 ;
  
  result = (Vixen::Vec2 *)new Vixen::Vec2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vec2__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Vixen::Vec2 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (Vixen::Vec2 *)new Vixen::Vec2(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vec2__SWIG_2(float* jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Vixen::Vec2 *result = 0 ;
  
  arg1 = jarg1;
  result = (Vixen::Vec2 *)new Vixen::Vec2((float const *)arg1);
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vec2__SWIG_3(void * jarg1) {
  void * jresult ;
  Vixen::Vec2 *arg1 = 0 ;
  Vixen::Vec2 *result = 0 ;
  
  arg1 = (Vixen::Vec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec2 const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Vec2 *)new Vixen::Vec2((Vixen::Vec2 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec2_Set(void * jarg1, float jarg2, float jarg3) {
  Vixen::Vec2 *arg1 = (Vixen::Vec2 *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (Vixen::Vec2 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->Set(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vec2_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Vec2 *arg1 = (Vixen::Vec2 *) 0 ;
  Vixen::Vec2 *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Vec2 *)jarg1; 
  arg2 = (Vixen::Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec2 const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Vec2 const *)arg1)->operator ==((Vixen::Vec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Vec2 *arg1 = (Vixen::Vec2 *) 0 ;
  Vixen::Vec2 *arg2 = 0 ;
  Vixen::Vec2 result;
  
  arg1 = (Vixen::Vec2 *)jarg1; 
  arg2 = (Vixen::Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec2 const & type is null", 0);
    return 0;
  } 
  result = ((Vixen::Vec2 const *)arg1)->operator +((Vixen::Vec2 const &)*arg2);
  jresult = new Vixen::Vec2((const Vixen::Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2_Sub(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Vec2 *arg1 = (Vixen::Vec2 *) 0 ;
  Vixen::Vec2 *arg2 = 0 ;
  Vixen::Vec2 result;
  
  arg1 = (Vixen::Vec2 *)jarg1; 
  arg2 = (Vixen::Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec2 const & type is null", 0);
    return 0;
  } 
  result = ((Vixen::Vec2 const *)arg1)->operator -((Vixen::Vec2 const &)*arg2);
  jresult = new Vixen::Vec2((const Vixen::Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2_Mul(void * jarg1, float jarg2) {
  void * jresult ;
  Vixen::Vec2 *arg1 = (Vixen::Vec2 *) 0 ;
  float arg2 ;
  Vixen::Vec2 result;
  
  arg1 = (Vixen::Vec2 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((Vixen::Vec2 const *)arg1)->operator *(arg2);
  jresult = new Vixen::Vec2((const Vixen::Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2_Div(void * jarg1, float jarg2) {
  void * jresult ;
  Vixen::Vec2 *arg1 = (Vixen::Vec2 *) 0 ;
  float arg2 ;
  Vixen::Vec2 result;
  
  arg1 = (Vixen::Vec2 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((Vixen::Vec2 const *)arg1)->operator /(arg2);
  jresult = new Vixen::Vec2((const Vixen::Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2_Negate(void * jarg1) {
  void * jresult ;
  Vixen::Vec2 *arg1 = (Vixen::Vec2 *) 0 ;
  Vixen::Vec2 *result = 0 ;
  
  arg1 = (Vixen::Vec2 *)jarg1; 
  result = (Vixen::Vec2 *) &(arg1)->Negate();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2_Normalize(void * jarg1) {
  float jresult ;
  Vixen::Vec2 *arg1 = (Vixen::Vec2 *) 0 ;
  float result;
  
  arg1 = (Vixen::Vec2 *)jarg1; 
  result = (float)(arg1)->Normalize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2_Distance(void * jarg1, void * jarg2) {
  float jresult ;
  Vixen::Vec2 *arg1 = (Vixen::Vec2 *) 0 ;
  Vixen::Vec2 *arg2 = 0 ;
  float result;
  
  arg1 = (Vixen::Vec2 *)jarg1; 
  arg2 = (Vixen::Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec2 const & type is null", 0);
    return 0;
  } 
  result = (float)((Vixen::Vec2 const *)arg1)->Distance((Vixen::Vec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2_DistanceSquared(void * jarg1, void * jarg2) {
  float jresult ;
  Vixen::Vec2 *arg1 = (Vixen::Vec2 *) 0 ;
  Vixen::Vec2 *arg2 = 0 ;
  float result;
  
  arg1 = (Vixen::Vec2 *)jarg1; 
  arg2 = (Vixen::Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec2 const & type is null", 0);
    return 0;
  } 
  result = (float)((Vixen::Vec2 const *)arg1)->DistanceSquared((Vixen::Vec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2_Dot__SWIG_0(void * jarg1, void * jarg2) {
  float jresult ;
  Vixen::Vec2 *arg1 = (Vixen::Vec2 *) 0 ;
  Vixen::Vec2 *arg2 = 0 ;
  float result;
  
  arg1 = (Vixen::Vec2 *)jarg1; 
  arg2 = (Vixen::Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec2 const & type is null", 0);
    return 0;
  } 
  result = (float)((Vixen::Vec2 const *)arg1)->Dot((Vixen::Vec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2_Dot__SWIG_1(void * jarg1, float* jarg2) {
  float jresult ;
  Vixen::Vec2 *arg1 = (Vixen::Vec2 *) 0 ;
  float *arg2 = (float *) 0 ;
  float result;
  
  arg1 = (Vixen::Vec2 *)jarg1; 
  arg2 = jarg2;
  result = (float)((Vixen::Vec2 const *)arg1)->Dot((float const *)arg2);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec2_Length_set(void * jarg1, float jarg2) {
  Vixen::Vec2 *arg1 = (Vixen::Vec2 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Vec2 *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Vec2_Length_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2_Length_get(void * jarg1) {
  float jresult ;
  Vixen::Vec2 *arg1 = (Vixen::Vec2 *) 0 ;
  float result;
  
  arg1 = (Vixen::Vec2 *)jarg1; 
  result = (float)Vixen_Vec2_Length_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec2_LengthSquared_set(void * jarg1, float jarg2) {
  Vixen::Vec2 *arg1 = (Vixen::Vec2 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Vec2 *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Vec2_LengthSquared_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2_LengthSquared_get(void * jarg1) {
  float jresult ;
  Vixen::Vec2 *arg1 = (Vixen::Vec2 *) 0 ;
  float result;
  
  arg1 = (Vixen::Vec2 *)jarg1; 
  result = (float)Vixen_Vec2_LengthSquared_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vec2(void * jarg1) {
  Vixen::Vec2 *arg1 = (Vixen::Vec2 *) 0 ;
  
  arg1 = (Vixen::Vec2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec3_x_set(void * jarg1, float jarg2) {
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3_x_get(void * jarg1) {
  float jresult ;
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  float result;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec3_y_set(void * jarg1, float jarg2) {
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3_y_get(void * jarg1) {
  float jresult ;
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  float result;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec3_z_set(void * jarg1, float jarg2) {
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3_z_get(void * jarg1) {
  float jresult ;
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  float result;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vec3__SWIG_0() {
  void * jresult ;
  Vixen::Vec3 *result = 0 ;
  
  result = (Vixen::Vec3 *)new Vixen::Vec3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vec3__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Vixen::Vec3 *)new Vixen::Vec3(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vec3__SWIG_2(float* jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = jarg1;
  result = (Vixen::Vec3 *)new Vixen::Vec3((float const *)arg1);
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vec3__SWIG_3(void * jarg1) {
  void * jresult ;
  Vixen::Vec3 *arg1 = 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::Vec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Vec3 *)new Vixen::Vec3((Vixen::Vec3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec3_Set(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->Set(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vec3_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Vec3 const *)arg1)->operator ==((Vixen::Vec3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3_Sub(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  Vixen::Vec3 result;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  result = ((Vixen::Vec3 const *)arg1)->operator -((Vixen::Vec3 const &)*arg2);
  jresult = new Vixen::Vec3((const Vixen::Vec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  Vixen::Vec3 result;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  result = ((Vixen::Vec3 const *)arg1)->operator +((Vixen::Vec3 const &)*arg2);
  jresult = new Vixen::Vec3((const Vixen::Vec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3_Mul__SWIG_0(void * jarg1, float jarg2) {
  void * jresult ;
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  float arg2 ;
  Vixen::Vec3 result;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((Vixen::Vec3 const *)arg1)->operator *(arg2);
  jresult = new Vixen::Vec3((const Vixen::Vec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3_Mul__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  Vixen::Vec3 result;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  result = ((Vixen::Vec3 const *)arg1)->operator *((Vixen::Vec3 const &)*arg2);
  jresult = new Vixen::Vec3((const Vixen::Vec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3_Div(void * jarg1, float jarg2) {
  void * jresult ;
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  float arg2 ;
  Vixen::Vec3 result;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((Vixen::Vec3 const *)arg1)->operator /(arg2);
  jresult = new Vixen::Vec3((const Vixen::Vec3 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vec3_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  bool result;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  result = (bool)((Vixen::Vec3 const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3_Cross(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  Vixen::Vec3 result;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  result = ((Vixen::Vec3 const *)arg1)->Cross((Vixen::Vec3 const &)*arg2);
  jresult = new Vixen::Vec3((const Vixen::Vec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3_Negate(void * jarg1) {
  void * jresult ;
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  result = (Vixen::Vec3 *) &(arg1)->Negate();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3_Normalize(void * jarg1) {
  float jresult ;
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  float result;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  result = (float)(arg1)->Normalize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3_Dot__SWIG_0(void * jarg1, void * jarg2) {
  float jresult ;
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  float result;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  result = (float)((Vixen::Vec3 const *)arg1)->Dot((Vixen::Vec3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3_Dot__SWIG_1(void * jarg1, float* jarg2) {
  float jresult ;
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  float *arg2 = (float *) 0 ;
  float result;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  arg2 = jarg2;
  result = (float)((Vixen::Vec3 const *)arg1)->Dot((float const *)arg2);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3_Distance(void * jarg1, void * jarg2) {
  float jresult ;
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  float result;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  result = (float)((Vixen::Vec3 const *)arg1)->Distance((Vixen::Vec3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3_DistanceSquared(void * jarg1, void * jarg2) {
  float jresult ;
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  float result;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  result = (float)((Vixen::Vec3 const *)arg1)->DistanceSquared((Vixen::Vec3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec3_Transform(void * jarg1, void * jarg2, void * jarg3) {
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  Vixen::Matrix *arg2 = 0 ;
  Vixen::Vec3 *arg3 = 0 ;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  arg2 = (Vixen::Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Matrix const & type is null", 0);
    return ;
  } 
  arg3 = (Vixen::Vec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  (arg1)->Transform((Vixen::Matrix const &)*arg2,(Vixen::Vec3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec3_TransformVector(void * jarg1, void * jarg2, void * jarg3) {
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  Vixen::Matrix *arg2 = 0 ;
  Vixen::Vec3 *arg3 = 0 ;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  arg2 = (Vixen::Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Matrix const & type is null", 0);
    return ;
  } 
  arg3 = (Vixen::Vec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  (arg1)->TransformVector((Vixen::Matrix const &)*arg2,(Vixen::Vec3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec3_Length_set(void * jarg1, float jarg2) {
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Vec3_Length_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3_Length_get(void * jarg1) {
  float jresult ;
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  float result;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  result = (float)Vixen_Vec3_Length_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec3_LengthSquared_set(void * jarg1, float jarg2) {
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Vec3_LengthSquared_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3_LengthSquared_get(void * jarg1) {
  float jresult ;
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  float result;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  result = (float)Vixen_Vec3_LengthSquared_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vec3(void * jarg1) {
  Vixen::Vec3 *arg1 = (Vixen::Vec3 *) 0 ;
  
  arg1 = (Vixen::Vec3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec4_x_set(void * jarg1, float jarg2) {
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4_x_get(void * jarg1) {
  float jresult ;
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  float result;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec4_y_set(void * jarg1, float jarg2) {
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4_y_get(void * jarg1) {
  float jresult ;
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  float result;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec4_z_set(void * jarg1, float jarg2) {
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4_z_get(void * jarg1) {
  float jresult ;
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  float result;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec4_w_set(void * jarg1, float jarg2) {
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4_w_get(void * jarg1) {
  float jresult ;
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  float result;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  result = (float) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vec4__SWIG_0() {
  void * jresult ;
  Vixen::Vec4 *result = 0 ;
  
  result = (Vixen::Vec4 *)new Vixen::Vec4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vec4__SWIG_1(float* jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Vixen::Vec4 *result = 0 ;
  
  arg1 = jarg1;
  result = (Vixen::Vec4 *)new Vixen::Vec4((float const *)arg1);
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vec4__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::Vec3 *arg1 = 0 ;
  Vixen::Vec4 *result = 0 ;
  
  arg1 = (Vixen::Vec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Vec4 *)new Vixen::Vec4((Vixen::Vec3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vec4__SWIG_3(void * jarg1) {
  void * jresult ;
  Vixen::Vec4 *arg1 = 0 ;
  Vixen::Vec4 *result = 0 ;
  
  arg1 = (Vixen::Vec4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec4 const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Vec4 *)new Vixen::Vec4((Vixen::Vec4 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vec4__SWIG_4(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Vixen::Vec4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vixen::Vec4 *)new Vixen::Vec4(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec4_Set(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->Set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vec4_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  Vixen::Vec4 *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  arg2 = (Vixen::Vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec4 const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Vec4 const *)arg1)->operator ==((Vixen::Vec4 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4_Sub(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  Vixen::Vec4 *arg2 = 0 ;
  Vixen::Vec4 result;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  arg2 = (Vixen::Vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec4 const & type is null", 0);
    return 0;
  } 
  result = ((Vixen::Vec4 const *)arg1)->operator -((Vixen::Vec4 const &)*arg2);
  jresult = new Vixen::Vec4((const Vixen::Vec4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  Vixen::Vec4 *arg2 = 0 ;
  Vixen::Vec4 result;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  arg2 = (Vixen::Vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec4 const & type is null", 0);
    return 0;
  } 
  result = ((Vixen::Vec4 const *)arg1)->operator +((Vixen::Vec4 const &)*arg2);
  jresult = new Vixen::Vec4((const Vixen::Vec4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4_Mul(void * jarg1, float jarg2) {
  void * jresult ;
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  float arg2 ;
  Vixen::Vec4 result;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((Vixen::Vec4 const *)arg1)->operator *(arg2);
  jresult = new Vixen::Vec4((const Vixen::Vec4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4_Div(void * jarg1, float jarg2) {
  void * jresult ;
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  float arg2 ;
  Vixen::Vec4 result;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((Vixen::Vec4 const *)arg1)->operator /(arg2);
  jresult = new Vixen::Vec4((const Vixen::Vec4 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vec4_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  bool result;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  result = (bool)((Vixen::Vec4 const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4_Negate(void * jarg1) {
  void * jresult ;
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  Vixen::Vec4 *result = 0 ;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  result = (Vixen::Vec4 *) &(arg1)->Negate();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4_Normalize(void * jarg1) {
  float jresult ;
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  float result;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  result = (float)(arg1)->Normalize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4_Dot__SWIG_0(void * jarg1, void * jarg2) {
  float jresult ;
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  Vixen::Vec4 *arg2 = 0 ;
  float result;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  arg2 = (Vixen::Vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec4 const & type is null", 0);
    return 0;
  } 
  result = (float)((Vixen::Vec4 const *)arg1)->Dot((Vixen::Vec4 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4_Dot__SWIG_1(void * jarg1, float* jarg2) {
  float jresult ;
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  float *arg2 = (float *) 0 ;
  float result;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  arg2 = jarg2;
  result = (float)((Vixen::Vec4 const *)arg1)->Dot((float const *)arg2);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4_Distance(void * jarg1, void * jarg2) {
  float jresult ;
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  Vixen::Vec4 *arg2 = 0 ;
  float result;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  arg2 = (Vixen::Vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec4 const & type is null", 0);
    return 0;
  } 
  result = (float)((Vixen::Vec4 const *)arg1)->Distance((Vixen::Vec4 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4_DistanceSquared(void * jarg1, void * jarg2) {
  float jresult ;
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  Vixen::Vec4 *arg2 = 0 ;
  float result;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  arg2 = (Vixen::Vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec4 const & type is null", 0);
    return 0;
  } 
  result = (float)((Vixen::Vec4 const *)arg1)->DistanceSquared((Vixen::Vec4 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec4_Transform(void * jarg1, void * jarg2, void * jarg3) {
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  Vixen::Matrix *arg2 = 0 ;
  Vixen::Vec4 *arg3 = 0 ;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  arg2 = (Vixen::Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Matrix const & type is null", 0);
    return ;
  } 
  arg3 = (Vixen::Vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec4 const & type is null", 0);
    return ;
  } 
  (arg1)->Transform((Vixen::Matrix const &)*arg2,(Vixen::Vec4 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec4_Length_set(void * jarg1, float jarg2) {
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Vec4_Length_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4_Length_get(void * jarg1) {
  float jresult ;
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  float result;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  result = (float)Vixen_Vec4_Length_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec4_LengthSquared_set(void * jarg1, float jarg2) {
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Vec4_LengthSquared_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4_LengthSquared_get(void * jarg1) {
  float jresult ;
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  float result;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  result = (float)Vixen_Vec4_LengthSquared_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vec4(void * jarg1) {
  Vixen::Vec4 *arg1 = (Vixen::Vec4 *) 0 ;
  
  arg1 = (Vixen::Vec4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quat__SWIG_0() {
  void * jresult ;
  Vixen::Quat *result = 0 ;
  
  result = (Vixen::Quat *)new Vixen::Quat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quat__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Vixen::Quat *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vixen::Quat *)new Vixen::Quat(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quat__SWIG_2(void * jarg1, float jarg2) {
  void * jresult ;
  Vixen::Vec3 *arg1 = 0 ;
  float arg2 ;
  Vixen::Quat *result = 0 ;
  
  arg1 = (Vixen::Vec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = (Vixen::Quat *)new Vixen::Quat((Vixen::Vec3 const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quat__SWIG_3(void * jarg1) {
  void * jresult ;
  Vixen::Matrix *arg1 = 0 ;
  Vixen::Quat *result = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Matrix const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Quat *)new Vixen::Quat((Vixen::Matrix const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quat__SWIG_4(void * jarg1) {
  void * jresult ;
  Vixen::Vec4 *arg1 = 0 ;
  Vixen::Quat *result = 0 ;
  
  arg1 = (Vixen::Vec4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec4 const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Quat *)new Vixen::Quat((Vixen::Vec4 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quat__SWIG_5(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Vec3 *arg1 = 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  Vixen::Quat *result = 0 ;
  
  arg1 = (Vixen::Vec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Quat *)new Vixen::Quat((Vixen::Vec3 const &)*arg1,(Vixen::Vec3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Quat_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  Vixen::Quat *arg1 = (Vixen::Quat *) 0 ;
  bool result;
  
  arg1 = (Vixen::Quat *)jarg1; 
  result = (bool)((Vixen::Quat const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quat_GetEulerAngles(void * jarg1, void * jarg2) {
  Vixen::Quat *arg1 = (Vixen::Quat *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Quat *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 & type is null", 0);
    return ;
  } 
  ((Vixen::Quat const *)arg1)->GetEulerAngles(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quat_Set__SWIG_0(void * jarg1, void * jarg2, float jarg3) {
  Vixen::Quat *arg1 = (Vixen::Quat *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Vixen::Quat *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->Set((Vixen::Vec3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quat_Set__SWIG_1(void * jarg1, void * jarg2) {
  Vixen::Quat *arg1 = (Vixen::Quat *) 0 ;
  Vixen::Vec3 *arg2 = (Vixen::Vec3 *) 0 ;
  
  arg1 = (Vixen::Quat *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2; 
  (arg1)->Set((Vixen::Vec3 const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quat_Set__SWIG_2(void * jarg1, void * jarg2) {
  Vixen::Quat *arg1 = (Vixen::Quat *) 0 ;
  Vixen::Matrix *arg2 = 0 ;
  
  arg1 = (Vixen::Quat *)jarg1; 
  arg2 = (Vixen::Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Matrix const & type is null", 0);
    return ;
  } 
  (arg1)->Set((Vixen::Matrix const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quat_Set__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  Vixen::Quat *arg1 = (Vixen::Quat *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  Vixen::Vec3 *arg3 = 0 ;
  
  arg1 = (Vixen::Quat *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vixen::Vec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  (arg1)->Set((Vixen::Vec3 const &)*arg2,(Vixen::Vec3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quat_Set__SWIG_4(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  Vixen::Quat *arg1 = (Vixen::Quat *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (Vixen::Quat *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->Set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quat_Mul(void * jarg1, void * jarg2, void * jarg3) {
  Vixen::Quat *arg1 = (Vixen::Quat *) 0 ;
  Vixen::Quat *arg2 = 0 ;
  Vixen::Quat *arg3 = 0 ;
  
  arg1 = (Vixen::Quat *)jarg1; 
  arg2 = (Vixen::Quat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  arg3 = (Vixen::Quat *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  (arg1)->Mul((Vixen::Quat const &)*arg2,(Vixen::Quat const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quat_Slerp(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  Vixen::Quat *arg1 = (Vixen::Quat *) 0 ;
  Vixen::Quat *arg2 = 0 ;
  Vixen::Quat *arg3 = 0 ;
  float arg4 ;
  
  arg1 = (Vixen::Quat *)jarg1; 
  arg2 = (Vixen::Quat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  arg3 = (Vixen::Quat *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  (arg1)->Slerp((Vixen::Quat const &)*arg2,(Vixen::Quat const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quat_Conjugate(void * jarg1) {
  Vixen::Quat *arg1 = (Vixen::Quat *) 0 ;
  
  arg1 = (Vixen::Quat *)jarg1; 
  (arg1)->Conjugate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quat_Invert(void * jarg1) {
  Vixen::Quat *arg1 = (Vixen::Quat *) 0 ;
  
  arg1 = (Vixen::Quat *)jarg1; 
  (arg1)->Invert();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quat_Normalize(void * jarg1) {
  Vixen::Quat *arg1 = (Vixen::Quat *) 0 ;
  
  arg1 = (Vixen::Quat *)jarg1; 
  (arg1)->Normalize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quat_Squad(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6) {
  Vixen::Quat *arg1 = (Vixen::Quat *) 0 ;
  Vixen::Quat *arg2 = 0 ;
  Vixen::Quat *arg3 = 0 ;
  Vixen::Quat *arg4 = 0 ;
  Vixen::Quat *arg5 = 0 ;
  float arg6 ;
  
  arg1 = (Vixen::Quat *)jarg1; 
  arg2 = (Vixen::Quat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  arg3 = (Vixen::Quat *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  arg4 = (Vixen::Quat *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  arg5 = (Vixen::Quat *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  arg6 = (float)jarg6; 
  (arg1)->Squad((Vixen::Quat const &)*arg2,(Vixen::Quat const &)*arg3,(Vixen::Quat const &)*arg4,(Vixen::Quat const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Quat(void * jarg1) {
  Vixen::Quat *arg1 = (Vixen::Quat *) 0 ;
  
  arg1 = (Vixen::Quat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ray_start_set(void * jarg1, void * jarg2) {
  Vixen::Ray *arg1 = (Vixen::Ray *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Ray *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->start = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Ray_start_get(void * jarg1) {
  void * jresult ;
  Vixen::Ray *arg1 = (Vixen::Ray *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::Ray *)jarg1; 
  result = (Vixen::Vec3 *) & ((arg1)->start);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ray_end_set(void * jarg1, void * jarg2) {
  Vixen::Ray *arg1 = (Vixen::Ray *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Ray *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->end = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Ray_end_get(void * jarg1) {
  void * jresult ;
  Vixen::Ray *arg1 = (Vixen::Ray *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::Ray *)jarg1; 
  result = (Vixen::Vec3 *) & ((arg1)->end);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ray_direction_set(void * jarg1, void * jarg2) {
  Vixen::Ray *arg1 = (Vixen::Ray *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Ray *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->direction = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Ray_direction_get(void * jarg1) {
  void * jresult ;
  Vixen::Ray *arg1 = (Vixen::Ray *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::Ray *)jarg1; 
  result = (Vixen::Vec3 *) & ((arg1)->direction);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ray_length_set(void * jarg1, float jarg2) {
  Vixen::Ray *arg1 = (Vixen::Ray *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Ray *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Ray_length_get(void * jarg1) {
  float jresult ;
  Vixen::Ray *arg1 = (Vixen::Ray *) 0 ;
  float result;
  
  arg1 = (Vixen::Ray *)jarg1; 
  result = (float) ((arg1)->length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Ray__SWIG_0() {
  void * jresult ;
  Vixen::Ray *result = 0 ;
  
  result = (Vixen::Ray *)new Vixen::Ray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Ray__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Vixen::Vec3 *arg1 = 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  float arg3 ;
  Vixen::Ray *result = 0 ;
  
  arg1 = (Vixen::Vec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (Vixen::Ray *)new Vixen::Ray((Vixen::Vec3 const &)*arg1,(Vixen::Vec3 const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Ray__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Vec3 *arg1 = 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  Vixen::Ray *result = 0 ;
  
  arg1 = (Vixen::Vec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Ray *)new Vixen::Ray((Vixen::Vec3 const &)*arg1,(Vixen::Vec3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ray_Set(void * jarg1, void * jarg2, void * jarg3) {
  Vixen::Ray *arg1 = (Vixen::Ray *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  Vixen::Vec3 *arg3 = 0 ;
  
  arg1 = (Vixen::Ray *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vixen::Vec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  (arg1)->Set((Vixen::Vec3 const &)*arg2,(Vixen::Vec3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Ray(void * jarg1) {
  Vixen::Ray *arg1 = (Vixen::Ray *) 0 ;
  
  arg1 = (Vixen::Ray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Col4_r_set(void * jarg1, float jarg2) {
  Vixen::Col4 *arg1 = (Vixen::Col4 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Col4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Col4_r_get(void * jarg1) {
  float jresult ;
  Vixen::Col4 *arg1 = (Vixen::Col4 *) 0 ;
  float result;
  
  arg1 = (Vixen::Col4 *)jarg1; 
  result = (float) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Col4_g_set(void * jarg1, float jarg2) {
  Vixen::Col4 *arg1 = (Vixen::Col4 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Col4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Col4_g_get(void * jarg1) {
  float jresult ;
  Vixen::Col4 *arg1 = (Vixen::Col4 *) 0 ;
  float result;
  
  arg1 = (Vixen::Col4 *)jarg1; 
  result = (float) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Col4_b_set(void * jarg1, float jarg2) {
  Vixen::Col4 *arg1 = (Vixen::Col4 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Col4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Col4_b_get(void * jarg1) {
  float jresult ;
  Vixen::Col4 *arg1 = (Vixen::Col4 *) 0 ;
  float result;
  
  arg1 = (Vixen::Col4 *)jarg1; 
  result = (float) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Col4_a_set(void * jarg1, float jarg2) {
  Vixen::Col4 *arg1 = (Vixen::Col4 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Col4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Col4_a_get(void * jarg1) {
  float jresult ;
  Vixen::Col4 *arg1 = (Vixen::Col4 *) 0 ;
  float result;
  
  arg1 = (Vixen::Col4 *)jarg1; 
  result = (float) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Col4__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Vixen::Col4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vixen::Col4 *)new Vixen::Col4(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Col4__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Vixen::Col4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Vixen::Col4 *)new Vixen::Col4(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Col4__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::Col4 *arg1 = 0 ;
  Vixen::Col4 *result = 0 ;
  
  arg1 = (Vixen::Col4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Col4 const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Col4 *)new Vixen::Col4((Vixen::Col4 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Col4__SWIG_3() {
  void * jresult ;
  Vixen::Col4 *result = 0 ;
  
  result = (Vixen::Col4 *)new Vixen::Col4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Col4__SWIG_4(void * jarg1) {
  void * jresult ;
  Vixen::Color arg1 ;
  Vixen::Color *argp1 ;
  Vixen::Col4 *result = 0 ;
  
  argp1 = (Vixen::Color *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vixen::Color", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (Vixen::Col4 *)new Vixen::Col4(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Col4__SWIG_5(unsigned int jarg1) {
  void * jresult ;
  uint32 arg1 ;
  Vixen::Col4 *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  result = (Vixen::Col4 *)new Vixen::Col4(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Col4__SWIG_6(float* jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Vixen::Col4 *result = 0 ;
  
  arg1 = jarg1;
  result = (Vixen::Col4 *)new Vixen::Col4((float const *)arg1);
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Col4_AsInt(void * jarg1) {
  unsigned int jresult ;
  Vixen::Col4 *arg1 = (Vixen::Col4 *) 0 ;
  uint32 result;
  
  arg1 = (Vixen::Col4 *)jarg1; 
  result = (uint32)((Vixen::Col4 const *)arg1)->operator uint32();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Col4_Sub(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Col4 *arg1 = (Vixen::Col4 *) 0 ;
  Vixen::Col4 *arg2 = 0 ;
  Vixen::Col4 result;
  
  arg1 = (Vixen::Col4 *)jarg1; 
  arg2 = (Vixen::Col4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Col4 const & type is null", 0);
    return 0;
  } 
  result = ((Vixen::Col4 const *)arg1)->operator -((Vixen::Col4 const &)*arg2);
  jresult = new Vixen::Col4((const Vixen::Col4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Col4_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Col4 *arg1 = (Vixen::Col4 *) 0 ;
  Vixen::Col4 *arg2 = 0 ;
  Vixen::Col4 result;
  
  arg1 = (Vixen::Col4 *)jarg1; 
  arg2 = (Vixen::Col4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Col4 const & type is null", 0);
    return 0;
  } 
  result = ((Vixen::Col4 const *)arg1)->operator +((Vixen::Col4 const &)*arg2);
  jresult = new Vixen::Col4((const Vixen::Col4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Col4_Mul(void * jarg1, float jarg2) {
  void * jresult ;
  Vixen::Col4 *arg1 = (Vixen::Col4 *) 0 ;
  float arg2 ;
  Vixen::Col4 result;
  
  arg1 = (Vixen::Col4 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((Vixen::Col4 const *)arg1)->operator *(arg2);
  jresult = new Vixen::Col4((const Vixen::Col4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Col4_Div(void * jarg1, float jarg2) {
  void * jresult ;
  Vixen::Col4 *arg1 = (Vixen::Col4 *) 0 ;
  float arg2 ;
  Vixen::Col4 result;
  
  arg1 = (Vixen::Col4 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((Vixen::Col4 const *)arg1)->operator /(arg2);
  jresult = new Vixen::Col4((const Vixen::Col4 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Col4_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Col4 *arg1 = (Vixen::Col4 *) 0 ;
  Vixen::Col4 *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Col4 *)jarg1; 
  arg2 = (Vixen::Col4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Col4 const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Col4 const *)arg1)->operator ==((Vixen::Col4 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Col4_Set__SWIG_0(void * jarg1, unsigned int jarg2) {
  Vixen::Col4 *arg1 = (Vixen::Col4 *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Vixen::Col4 *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->Set(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Col4_Set__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  Vixen::Col4 *arg1 = (Vixen::Col4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (Vixen::Col4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->Set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Col4_Set__SWIG_2(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Vixen::Col4 *arg1 = (Vixen::Col4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Vixen::Col4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->Set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Col4(void * jarg1) {
  Vixen::Col4 *arg1 = (Vixen::Col4 *) 0 ;
  
  arg1 = (Vixen::Col4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_b_set(void * jarg1, char jarg2) {
  Vixen::Color *arg1 = (Vixen::Color *) 0 ;
  char arg2 ;
  
  arg1 = (Vixen::Color *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_Color_b_get(void * jarg1) {
  char jresult ;
  Vixen::Color *arg1 = (Vixen::Color *) 0 ;
  char result;
  
  arg1 = (Vixen::Color *)jarg1; 
  result = (char) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_g_set(void * jarg1, char jarg2) {
  Vixen::Color *arg1 = (Vixen::Color *) 0 ;
  char arg2 ;
  
  arg1 = (Vixen::Color *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_Color_g_get(void * jarg1) {
  char jresult ;
  Vixen::Color *arg1 = (Vixen::Color *) 0 ;
  char result;
  
  arg1 = (Vixen::Color *)jarg1; 
  result = (char) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_r_set(void * jarg1, char jarg2) {
  Vixen::Color *arg1 = (Vixen::Color *) 0 ;
  char arg2 ;
  
  arg1 = (Vixen::Color *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_Color_r_get(void * jarg1) {
  char jresult ;
  Vixen::Color *arg1 = (Vixen::Color *) 0 ;
  char result;
  
  arg1 = (Vixen::Color *)jarg1; 
  result = (char) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_a_set(void * jarg1, char jarg2) {
  Vixen::Color *arg1 = (Vixen::Color *) 0 ;
  char arg2 ;
  
  arg1 = (Vixen::Color *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_Color_a_get(void * jarg1) {
  char jresult ;
  Vixen::Color *arg1 = (Vixen::Color *) 0 ;
  char result;
  
  arg1 = (Vixen::Color *)jarg1; 
  result = (char) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_0(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Vixen::Color *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (Vixen::Color *)new Vixen::Color(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_1(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  Vixen::Color *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (Vixen::Color *)new Vixen::Color(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::Color *arg1 = 0 ;
  Vixen::Color *result = 0 ;
  
  arg1 = (Vixen::Color *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Color const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Color *)new Vixen::Color((Vixen::Color const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_3(void * jarg1) {
  void * jresult ;
  Vixen::Col4 *arg1 = 0 ;
  Vixen::Color *result = 0 ;
  
  arg1 = (Vixen::Col4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Col4 const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Color *)new Vixen::Color((Vixen::Col4 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_4() {
  void * jresult ;
  Vixen::Color *result = 0 ;
  
  result = (Vixen::Color *)new Vixen::Color();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_5(unsigned int jarg1) {
  void * jresult ;
  uint32 arg1 ;
  Vixen::Color *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  result = (Vixen::Color *)new Vixen::Color(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Color_AsInt(void * jarg1) {
  unsigned int jresult ;
  Vixen::Color *arg1 = (Vixen::Color *) 0 ;
  uint32 result;
  
  arg1 = (Vixen::Color *)jarg1; 
  result = (uint32)((Vixen::Color const *)arg1)->operator uint32();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Color_Sub(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Color *arg1 = (Vixen::Color *) 0 ;
  Vixen::Color *arg2 = 0 ;
  Vixen::Color result;
  
  arg1 = (Vixen::Color *)jarg1; 
  arg2 = (Vixen::Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Color const & type is null", 0);
    return 0;
  } 
  result = ((Vixen::Color const *)arg1)->operator -((Vixen::Color const &)*arg2);
  jresult = new Vixen::Color((const Vixen::Color &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Color_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Color *arg1 = (Vixen::Color *) 0 ;
  Vixen::Color *arg2 = 0 ;
  Vixen::Color result;
  
  arg1 = (Vixen::Color *)jarg1; 
  arg2 = (Vixen::Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Color const & type is null", 0);
    return 0;
  } 
  result = ((Vixen::Color const *)arg1)->operator +((Vixen::Color const &)*arg2);
  jresult = new Vixen::Color((const Vixen::Color &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Color_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Color *arg1 = (Vixen::Color *) 0 ;
  Vixen::Color *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Color *)jarg1; 
  arg2 = (Vixen::Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Color const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Color const *)arg1)->operator ==((Vixen::Color const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_Set__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  Vixen::Color *arg1 = (Vixen::Color *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (Vixen::Color *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->Set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_Set__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Vixen::Color *arg1 = (Vixen::Color *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Vixen::Color *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->Set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Color(void * jarg1) {
  Vixen::Color *arg1 = (Vixen::Color *) 0 ;
  
  arg1 = (Vixen::Color *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix__SWIG_0() {
  void * jresult ;
  Vixen::Matrix *result = 0 ;
  
  result = (Vixen::Matrix *)new Vixen::Matrix();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix__SWIG_1(void * jarg1) {
  void * jresult ;
  Vixen::Matrix *arg1 = 0 ;
  Vixen::Matrix *result = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Matrix const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Matrix *)new Vixen::Matrix((Vixen::Matrix const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::Quat *arg1 = 0 ;
  Vixen::Matrix *result = 0 ;
  
  arg1 = (Vixen::Quat *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Matrix *)new Vixen::Matrix((Vixen::Quat const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix__SWIG_3(float* jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Vixen::Matrix *result = 0 ;
  
  arg1 = jarg1;
  result = (Vixen::Matrix *)new Vixen::Matrix((float const *)arg1);
  jresult = (void *)result; 
  
  
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_Identity(void * jarg1) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  (arg1)->Identity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_Zero(void * jarg1) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  (arg1)->Zero();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_ScaleMatrix(void * jarg1, void * jarg2) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  (arg1)->ScaleMatrix((Vixen::Vec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_TranslationMatrix(void * jarg1, void * jarg2) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  (arg1)->TranslationMatrix((Vixen::Vec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_Translate__SWIG_0(void * jarg1, void * jarg2) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  (arg1)->Translate((Vixen::Vec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_Translate__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->Translate(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_Scale__SWIG_0(void * jarg1, void * jarg2) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  (arg1)->Scale((Vixen::Vec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_Scale__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->Scale(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_LookAt(void * jarg1, void * jarg2, float jarg3) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->LookAt((Vixen::Vec3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_Rotate__SWIG_0(void * jarg1, void * jarg2, float jarg3) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->Rotate((Vixen::Vec3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_Rotate__SWIG_1(void * jarg1, void * jarg2) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Quat *arg2 = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Quat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  (arg1)->Rotate((Vixen::Quat const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_Set__SWIG_0(void * jarg1, void * jarg2) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Quat *arg2 = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Quat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  (arg1)->Set((Vixen::Quat const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_RotationMatrix__SWIG_0(void * jarg1, void * jarg2) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Quat *arg2 = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Quat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  (arg1)->RotationMatrix((Vixen::Quat const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_RotationMatrix__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->RotationMatrix((Vixen::Vec3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_XAngleMatrix(void * jarg1, float jarg2) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->XAngleMatrix(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_YAngleMatrix(void * jarg1, float jarg2) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->YAngleMatrix(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_ZAngleMatrix(void * jarg1, float jarg2) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->ZAngleMatrix(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix_GetIdentity() {
  void * jresult ;
  Vixen::Matrix *result = 0 ;
  
  result = (Vixen::Matrix *)Vixen::Matrix::GetIdentity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_SetMatrix(void * jarg1, float* jarg2) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = jarg2;
  (arg1)->SetMatrix((float const *)arg2);
  
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix_GetRotationAxis(void * jarg1) {
  void * jresult ;
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Vec4 result;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  result = ((Vixen::Matrix const *)arg1)->GetRotationAxis();
  jresult = new Vixen::Vec4((const Vixen::Vec4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_Set__SWIG_1(void * jarg1, int jarg2, int jarg3, float jarg4) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->Set(arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix_Get(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (float)((Vixen::Matrix const *)arg1)->Get(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Matrix_IsIdentity(void * jarg1) {
  unsigned int jresult ;
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  bool result;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  result = (bool)((Vixen::Matrix const *)arg1)->IsIdentity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_Copy__SWIG_0(void * jarg1, void * jarg2) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Matrix *arg2 = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Matrix const & type is null", 0);
    return ;
  } 
  (arg1)->Copy((Vixen::Matrix const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Matrix_Copy__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::SharedObj *arg2 = (Vixen::SharedObj *) 0 ;
  bool result;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::SharedObj *)jarg2; 
  result = (bool)(arg1)->Copy((Vixen::SharedObj const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_Touch(void * jarg1) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  (arg1)->Touch();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_GetTranslation(void * jarg1, void * jarg2) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 & type is null", 0);
    return ;
  } 
  ((Vixen::Matrix const *)arg1)->GetTranslation(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_SetTranslation(void * jarg1, void * jarg2) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetTranslation((Vixen::Vec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_GetScale(void * jarg1, void * jarg2) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 & type is null", 0);
    return ;
  } 
  ((Vixen::Matrix const *)arg1)->GetScale(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_GetRotation(void * jarg1, void * jarg2) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Vec3 *arg2 = (Vixen::Vec3 *) 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2; 
  ((Vixen::Matrix const *)arg1)->GetRotation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_PreMul(void * jarg1, void * jarg2) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Matrix *arg2 = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Matrix const & type is null", 0);
    return ;
  } 
  (arg1)->PreMul((Vixen::Matrix const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_PostMul(void * jarg1, void * jarg2) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Matrix *arg2 = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Matrix const & type is null", 0);
    return ;
  } 
  (arg1)->PostMul((Vixen::Matrix const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_Multiply(void * jarg1, void * jarg2, void * jarg3) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Matrix *arg2 = 0 ;
  Vixen::Matrix *arg3 = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Matrix const & type is null", 0);
    return ;
  } 
  arg3 = (Vixen::Matrix *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Matrix const & type is null", 0);
    return ;
  } 
  (arg1)->Multiply((Vixen::Matrix const &)*arg2,(Vixen::Matrix const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_Transpose(void * jarg1) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  (arg1)->Transpose();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_Invert__SWIG_0(void * jarg1, void * jarg2) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Matrix *arg2 = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Matrix const & type is null", 0);
    return ;
  } 
  (arg1)->Invert((Vixen::Matrix const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_Invert__SWIG_1(void * jarg1) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  (arg1)->Invert();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_Transform__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Vec4 *arg2 = 0 ;
  Vixen::Vec4 *arg3 = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec4 const & type is null", 0);
    return ;
  } 
  arg3 = (Vixen::Vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec4 & type is null", 0);
    return ;
  } 
  ((Vixen::Matrix const *)arg1)->Transform((Vixen::Vec4 const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_Transform__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  Vixen::Vec4 *arg3 = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vixen::Vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec4 & type is null", 0);
    return ;
  } 
  ((Vixen::Matrix const *)arg1)->Transform((Vixen::Vec3 const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_Transform__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  Vixen::Vec3 *arg3 = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vixen::Vec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 & type is null", 0);
    return ;
  } 
  ((Vixen::Matrix const *)arg1)->Transform((Vixen::Vec3 const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_TransformVector(void * jarg1, void * jarg2, void * jarg3) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  Vixen::Vec3 *arg3 = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vixen::Vec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 & type is null", 0);
    return ;
  } 
  ((Vixen::Matrix const *)arg1)->TransformVector((Vixen::Vec3 const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix_Transform__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Sphere *arg2 = 0 ;
  Vixen::Sphere *arg3 = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg2 = (Vixen::Sphere *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Sphere const & type is null", 0);
    return ;
  } 
  arg3 = (Vixen::Sphere *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Sphere & type is null", 0);
    return ;
  } 
  ((Vixen::Matrix const *)arg1)->Transform((Vixen::Sphere const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Matrix(void * jarg1) {
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box2_min_set(void * jarg1, void * jarg2) {
  Vixen::Box2 *arg1 = (Vixen::Box2 *) 0 ;
  Vixen::Vec2 *arg2 = 0 ;
  
  arg1 = (Vixen::Box2 *)jarg1; 
  arg2 = (Vixen::Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec2 const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->min = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2_min_get(void * jarg1) {
  void * jresult ;
  Vixen::Box2 *arg1 = (Vixen::Box2 *) 0 ;
  Vixen::Vec2 *result = 0 ;
  
  arg1 = (Vixen::Box2 *)jarg1; 
  result = (Vixen::Vec2 *) & ((arg1)->min);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box2_max_set(void * jarg1, void * jarg2) {
  Vixen::Box2 *arg1 = (Vixen::Box2 *) 0 ;
  Vixen::Vec2 *arg2 = 0 ;
  
  arg1 = (Vixen::Box2 *)jarg1; 
  arg2 = (Vixen::Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec2 const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->max = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2_max_get(void * jarg1) {
  void * jresult ;
  Vixen::Box2 *arg1 = (Vixen::Box2 *) 0 ;
  Vixen::Vec2 *result = 0 ;
  
  arg1 = (Vixen::Box2 *)jarg1; 
  result = (Vixen::Vec2 *) & ((arg1)->max);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box2__SWIG_0() {
  void * jresult ;
  Vixen::Box2 *result = 0 ;
  
  result = (Vixen::Box2 *)new Vixen::Box2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box2__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Vixen::Box2 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vixen::Box2 *)new Vixen::Box2(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box2_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Box2 *arg1 = (Vixen::Box2 *) 0 ;
  Vixen::Vec2 *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Box2 *)jarg1; 
  arg2 = (Vixen::Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec2 const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Box2 const *)arg1)->Contains((Vixen::Vec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box2_Set(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  Vixen::Box2 *arg1 = (Vixen::Box2 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (Vixen::Box2 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->Set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box2_Height_set(void * jarg1, float jarg2) {
  Vixen::Box2 *arg1 = (Vixen::Box2 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Box2 *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Box2_Height_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Box2_Height_get(void * jarg1) {
  float jresult ;
  Vixen::Box2 *arg1 = (Vixen::Box2 *) 0 ;
  float result;
  
  arg1 = (Vixen::Box2 *)jarg1; 
  result = (float)Vixen_Box2_Height_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box2_Width_set(void * jarg1, float jarg2) {
  Vixen::Box2 *arg1 = (Vixen::Box2 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Box2 *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Box2_Width_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Box2_Width_get(void * jarg1) {
  float jresult ;
  Vixen::Box2 *arg1 = (Vixen::Box2 *) 0 ;
  float result;
  
  arg1 = (Vixen::Box2 *)jarg1; 
  result = (float)Vixen_Box2_Width_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box2_Center_set(void * jarg1, void * jarg2) {
  Vixen::Box2 *arg1 = (Vixen::Box2 *) 0 ;
  Vixen::Vec2 *arg2 = 0 ;
  
  arg1 = (Vixen::Box2 *)jarg1; 
  arg2 = (Vixen::Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec2 const & type is null", 0);
    return ;
  } 
  Vixen_Box2_Center_set(arg1,(Vixen::Vec2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box2_Center_get(void * jarg1) {
  void * jresult ;
  Vixen::Box2 *arg1 = (Vixen::Box2 *) 0 ;
  Vixen::Vec2 *result = 0 ;
  
  arg1 = (Vixen::Box2 *)jarg1; 
  result = (Vixen::Vec2 *) &Vixen_Box2_Center_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Box2(void * jarg1) {
  Vixen::Box2 *arg1 = (Vixen::Box2 *) 0 ;
  
  arg1 = (Vixen::Box2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box3_min_set(void * jarg1, void * jarg2) {
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->min = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box3_min_get(void * jarg1) {
  void * jresult ;
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  result = (Vixen::Vec3 *) & ((arg1)->min);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box3_max_set(void * jarg1, void * jarg2) {
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->max = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box3_max_get(void * jarg1) {
  void * jresult ;
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  result = (Vixen::Vec3 *) & ((arg1)->max);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box3__SWIG_0() {
  void * jresult ;
  Vixen::Box3 *result = 0 ;
  
  result = (Vixen::Box3 *)new Vixen::Box3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box3__SWIG_1(void * jarg1) {
  void * jresult ;
  Vixen::Box3 *arg1 = 0 ;
  Vixen::Box3 *result = 0 ;
  
  arg1 = (Vixen::Box3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Box3 const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Box3 *)new Vixen::Box3((Vixen::Box3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box3__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::Sphere *arg1 = 0 ;
  Vixen::Box3 *result = 0 ;
  
  arg1 = (Vixen::Sphere *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Sphere const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Box3 *)new Vixen::Box3((Vixen::Sphere const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box3__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Vec3 *arg1 = 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  Vixen::Box3 *result = 0 ;
  
  arg1 = (Vixen::Vec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Box3 *)new Vixen::Box3((Vixen::Vec3 const &)*arg1,(Vixen::Vec3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box3__SWIG_4(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  Vixen::Box3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (Vixen::Box3 *)new Vixen::Box3(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box3_Set__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->Set(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box3_Set__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  Vixen::Vec3 *arg3 = 0 ;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vixen::Vec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  (arg1)->Set((Vixen::Vec3 const &)*arg2,(Vixen::Vec3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box3_Empty(void * jarg1) {
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  (arg1)->Empty();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box3_Assign__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  Vixen::Box3 *arg2 = 0 ;
  Vixen::Box3 *result = 0 ;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Box3 const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Box3 *) &(arg1)->operator =((Vixen::Box3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box3_Assign__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  Vixen::Sphere *arg2 = 0 ;
  Vixen::Box3 *result = 0 ;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  arg2 = (Vixen::Sphere *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Sphere const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Box3 *) &(arg1)->operator =((Vixen::Sphere const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box3_Mul(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  Vixen::Matrix *arg2 = 0 ;
  Vixen::Box3 *result = 0 ;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  arg2 = (Vixen::Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Matrix const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Box3 *) &(arg1)->operator *=((Vixen::Matrix const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box3_Equal(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  Vixen::Box3 *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Box3 const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Box3 const *)arg1)->operator ==((Vixen::Box3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box3_NotEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  Vixen::Box3 *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Box3 const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Box3 const *)arg1)->operator !=((Vixen::Box3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box3_Normalize(void * jarg1) {
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  (arg1)->Normalize();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box3_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  bool result;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  result = (bool)((Vixen::Box3 const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box3_IsNull(void * jarg1) {
  unsigned int jresult ;
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  bool result;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  result = (bool)((Vixen::Box3 const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box3_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Box3 const *)arg1)->Contains((Vixen::Vec3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box3_Around(void * jarg1, void * jarg2, void * jarg3) {
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  Vixen::Vec3 *arg3 = 0 ;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vixen::Vec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  (arg1)->Around((Vixen::Vec3 const &)*arg2,(Vixen::Vec3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box3_Extend__SWIG_0(void * jarg1, void * jarg2) {
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  Vixen::Box3 *arg2 = 0 ;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Box3 const & type is null", 0);
    return ;
  } 
  (arg1)->Extend((Vixen::Box3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box3_Extend__SWIG_1(void * jarg1, void * jarg2) {
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  (arg1)->Extend((Vixen::Vec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box3_Height_set(void * jarg1, float jarg2) {
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Box3_Height_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Box3_Height_get(void * jarg1) {
  float jresult ;
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  float result;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  result = (float)Vixen_Box3_Height_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box3_Width_set(void * jarg1, float jarg2) {
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Box3_Width_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Box3_Width_get(void * jarg1) {
  float jresult ;
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  float result;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  result = (float)Vixen_Box3_Width_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box3_Depth_set(void * jarg1, float jarg2) {
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Box3_Depth_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Box3_Depth_get(void * jarg1) {
  float jresult ;
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  float result;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  result = (float)Vixen_Box3_Depth_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box3_Center_set(void * jarg1, void * jarg2) {
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  Vixen_Box3_Center_set(arg1,(Vixen::Vec3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box3_Center_get(void * jarg1) {
  void * jresult ;
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  result = (Vixen::Vec3 *) &Vixen_Box3_Center_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Box3(void * jarg1) {
  Vixen::Box3 *arg1 = (Vixen::Box3 *) 0 ;
  
  arg1 = (Vixen::Box3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sphere__SWIG_0() {
  void * jresult ;
  Vixen::Sphere *result = 0 ;
  
  result = (Vixen::Sphere *)new Vixen::Sphere();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sphere__SWIG_1(void * jarg1) {
  void * jresult ;
  Vixen::Box3 *arg1 = 0 ;
  Vixen::Sphere *result = 0 ;
  
  arg1 = (Vixen::Box3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Box3 const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Sphere *)new Vixen::Sphere((Vixen::Box3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sphere__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::Sphere *arg1 = 0 ;
  Vixen::Sphere *result = 0 ;
  
  arg1 = (Vixen::Sphere *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Sphere const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Sphere *)new Vixen::Sphere((Vixen::Sphere const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sphere__SWIG_3(void * jarg1, float jarg2) {
  void * jresult ;
  Vixen::Vec3 *arg1 = 0 ;
  float arg2 ;
  Vixen::Sphere *result = 0 ;
  
  arg1 = (Vixen::Vec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = (Vixen::Sphere *)new Vixen::Sphere((Vixen::Vec3 const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sphere_Set(void * jarg1, void * jarg2, float jarg3) {
  Vixen::Sphere *arg1 = (Vixen::Sphere *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Vixen::Sphere *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->Set((Vixen::Vec3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sphere_Empty(void * jarg1) {
  Vixen::Sphere *arg1 = (Vixen::Sphere *) 0 ;
  
  arg1 = (Vixen::Sphere *)jarg1; 
  (arg1)->Empty();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sphere_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  Vixen::Sphere *arg1 = (Vixen::Sphere *) 0 ;
  bool result;
  
  arg1 = (Vixen::Sphere *)jarg1; 
  result = (bool)((Vixen::Sphere const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sphere_Extend__SWIG_0(void * jarg1, void * jarg2) {
  Vixen::Sphere *arg1 = (Vixen::Sphere *) 0 ;
  Vixen::Sphere *arg2 = 0 ;
  
  arg1 = (Vixen::Sphere *)jarg1; 
  arg2 = (Vixen::Sphere *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Sphere const & type is null", 0);
    return ;
  } 
  (arg1)->Extend((Vixen::Sphere const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sphere_Extend__SWIG_1(void * jarg1, void * jarg2) {
  Vixen::Sphere *arg1 = (Vixen::Sphere *) 0 ;
  Vixen::Box3 *arg2 = 0 ;
  
  arg1 = (Vixen::Sphere *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Box3 const & type is null", 0);
    return ;
  } 
  (arg1)->Extend((Vixen::Box3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sphere_Mul(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Sphere *arg1 = (Vixen::Sphere *) 0 ;
  Vixen::Matrix *arg2 = 0 ;
  Vixen::Sphere *result = 0 ;
  
  arg1 = (Vixen::Sphere *)jarg1; 
  arg2 = (Vixen::Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Matrix const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Sphere *) &(arg1)->operator *=((Vixen::Matrix const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sphere_Assign__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Sphere *arg1 = (Vixen::Sphere *) 0 ;
  Vixen::Sphere *arg2 = 0 ;
  Vixen::Sphere *result = 0 ;
  
  arg1 = (Vixen::Sphere *)jarg1; 
  arg2 = (Vixen::Sphere *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Sphere const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Sphere *) &(arg1)->operator =((Vixen::Sphere const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sphere_Assign__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Sphere *arg1 = (Vixen::Sphere *) 0 ;
  Vixen::Box3 *arg2 = 0 ;
  Vixen::Sphere *result = 0 ;
  
  arg1 = (Vixen::Sphere *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Box3 const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Sphere *) &(arg1)->operator =((Vixen::Box3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sphere_Equal(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Sphere *arg1 = (Vixen::Sphere *) 0 ;
  Vixen::Sphere *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Sphere *)jarg1; 
  arg2 = (Vixen::Sphere *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Sphere const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Sphere const *)arg1)->operator ==((Vixen::Sphere const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sphere_NotEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Sphere *arg1 = (Vixen::Sphere *) 0 ;
  Vixen::Sphere *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Sphere *)jarg1; 
  arg2 = (Vixen::Sphere *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Sphere const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Sphere const *)arg1)->operator !=((Vixen::Sphere const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sphere_Center_set(void * jarg1, void * jarg2) {
  Vixen::Sphere *arg1 = (Vixen::Sphere *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Sphere *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->Center = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sphere_Center_get(void * jarg1) {
  void * jresult ;
  Vixen::Sphere *arg1 = (Vixen::Sphere *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::Sphere *)jarg1; 
  result = (Vixen::Vec3 *) & ((arg1)->Center);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sphere_Radius_set(void * jarg1, float jarg2) {
  Vixen::Sphere *arg1 = (Vixen::Sphere *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Sphere *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Sphere_Radius_get(void * jarg1) {
  float jresult ;
  Vixen::Sphere *arg1 = (Vixen::Sphere *) 0 ;
  float result;
  
  arg1 = (Vixen::Sphere *)jarg1; 
  result = (float) ((arg1)->Radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sphere(void * jarg1) {
  Vixen::Sphere *arg1 = (Vixen::Sphere *) 0 ;
  
  arg1 = (Vixen::Sphere *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreTree_DEPTH_FIRST_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Core::Tree< Vixen::SharedObj >::DEPTH_FIRST;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreTree_PARENTS_REVERSE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Core::Tree< Vixen::SharedObj >::PARENTS_REVERSE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreTree_CHILDREN_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Core::Tree< Vixen::SharedObj >::CHILDREN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreTree_CHILDREN_REVERSE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Core::Tree< Vixen::SharedObj >::CHILDREN_REVERSE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreTree_SEARCH_MASK_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Core::Tree< Vixen::SharedObj >::SEARCH_MASK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CoreTree() {
  void * jresult ;
  Vixen::Core::Tree< Vixen::SharedObj > *result = 0 ;
  
  result = (Vixen::Core::Tree< Vixen::SharedObj > *)new Vixen::Core::Tree< Vixen::SharedObj >();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreTree(void * jarg1) {
  Vixen::Core::Tree< Vixen::SharedObj > *arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  
  arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreTree_Parent(void * jarg1) {
  void * jresult ;
  Vixen::Core::Tree< Vixen::SharedObj > *arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  Vixen::Core::Tree< Vixen::SharedObj > *result = 0 ;
  
  arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg1; 
  result = (Vixen::Core::Tree< Vixen::SharedObj > *)(arg1)->Parent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreTree_First(void * jarg1) {
  void * jresult ;
  Vixen::Core::Tree< Vixen::SharedObj > *arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  Vixen::Core::Tree< Vixen::SharedObj > *result = 0 ;
  
  arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg1; 
  result = (Vixen::Core::Tree< Vixen::SharedObj > *)(arg1)->First();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreTree_Last(void * jarg1) {
  void * jresult ;
  Vixen::Core::Tree< Vixen::SharedObj > *arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  Vixen::Core::Tree< Vixen::SharedObj > *result = 0 ;
  
  arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg1; 
  result = (Vixen::Core::Tree< Vixen::SharedObj > *)(arg1)->Last();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreTree_IsParent(void * jarg1) {
  unsigned int jresult ;
  Vixen::Core::Tree< Vixen::SharedObj > *arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  bool result;
  
  arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg1; 
  result = (bool)((Vixen::Core::Tree< Vixen::SharedObj > const *)arg1)->IsParent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreTree_IsChild(void * jarg1) {
  unsigned int jresult ;
  Vixen::Core::Tree< Vixen::SharedObj > *arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  bool result;
  
  arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg1; 
  result = (bool)((Vixen::Core::Tree< Vixen::SharedObj > const *)arg1)->IsChild();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreTree_IsLast(void * jarg1) {
  unsigned int jresult ;
  Vixen::Core::Tree< Vixen::SharedObj > *arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  bool result;
  
  arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg1; 
  result = (bool)((Vixen::Core::Tree< Vixen::SharedObj > const *)arg1)->IsLast();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreTree_GetSize(void * jarg1) {
  int jresult ;
  Vixen::Core::Tree< Vixen::SharedObj > *arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  int result;
  
  arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg1; 
  result = (int)((Vixen::Core::Tree< Vixen::SharedObj > const *)arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreTree_GetAt(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::Core::Tree< Vixen::SharedObj > *arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  int arg2 ;
  Vixen::Core::Tree< Vixen::SharedObj > *result = 0 ;
  
  arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Vixen::Core::Tree< Vixen::SharedObj > *)(arg1)->GetAt(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreTree_PutFirst(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Core::Tree< Vixen::SharedObj > *arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  Vixen::Core::Tree< Vixen::SharedObj > *arg2 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  bool result;
  
  arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg1; 
  arg2 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg2; 
  result = (bool)(arg1)->PutFirst(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreTree_Append(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Core::Tree< Vixen::SharedObj > *arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  Vixen::Core::Tree< Vixen::SharedObj > *arg2 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  bool result;
  
  arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg1; 
  arg2 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg2; 
  result = (bool)(arg1)->Append(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreTree_PutAfter(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Core::Tree< Vixen::SharedObj > *arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  Vixen::Core::Tree< Vixen::SharedObj > *arg2 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  bool result;
  
  arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg1; 
  arg2 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg2; 
  result = (bool)(arg1)->PutAfter(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreTree_PutBefore(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Core::Tree< Vixen::SharedObj > *arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  Vixen::Core::Tree< Vixen::SharedObj > *arg2 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  bool result;
  
  arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg1; 
  arg2 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg2; 
  result = (bool)(arg1)->PutBefore(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreTree_Remove__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Vixen::Core::Tree< Vixen::SharedObj > *arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->Remove(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreTree_Remove__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Vixen::Core::Tree< Vixen::SharedObj > *arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  bool result;
  
  arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg1; 
  result = (bool)(arg1)->Remove();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTree_Empty(void * jarg1) {
  Vixen::Core::Tree< Vixen::SharedObj > *arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  
  arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg1; 
  (arg1)->Empty();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreTree_Replace(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Core::Tree< Vixen::SharedObj > *arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  Vixen::Core::Tree< Vixen::SharedObj > *arg2 = (Vixen::Core::Tree< Vixen::SharedObj > *) 0 ;
  bool result;
  
  arg1 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg1; 
  arg2 = (Vixen::Core::Tree< Vixen::SharedObj > *)jarg2; 
  result = (bool)(arg1)->Replace(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedTree() {
  void * jresult ;
  Vixen::Core::RefTree< Vixen::SharedObj > *result = 0 ;
  
  result = (Vixen::Core::RefTree< Vixen::SharedObj > *)new Vixen::Core::RefTree< Vixen::SharedObj >();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SharedTree(void * jarg1) {
  Vixen::Core::RefTree< Vixen::SharedObj > *arg1 = (Vixen::Core::RefTree< Vixen::SharedObj > *) 0 ;
  
  arg1 = (Vixen::Core::RefTree< Vixen::SharedObj > *)jarg1; 
  arg1->Release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharedTree_Remove__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Vixen::Core::RefTree< Vixen::SharedObj > *arg1 = (Vixen::Core::RefTree< Vixen::SharedObj > *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (Vixen::Core::RefTree< Vixen::SharedObj > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->Remove(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharedTree_Remove__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Vixen::Core::RefTree< Vixen::SharedObj > *arg1 = (Vixen::Core::RefTree< Vixen::SharedObj > *) 0 ;
  bool result;
  
  arg1 = (Vixen::Core::RefTree< Vixen::SharedObj > *)jarg1; 
  result = (bool)(arg1)->Remove();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Group_DEPTH_FIRST_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Group::DEPTH_FIRST;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Group_PARENTS_REVERSE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Group::PARENTS_REVERSE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Group_CHILDREN_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Group::CHILDREN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Group_CHILDREN_REVERSE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Group::CHILDREN_REVERSE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Group_FIND_DESCEND_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Group::FIND_DESCEND;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Group_FIND_PARENT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Group::FIND_PARENT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Group_FIND_CHILD_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Group::FIND_CHILD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Group_FIND_EXACT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Group::FIND_EXACT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Group_FIND_END_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Group::FIND_END;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Group_FIND_ACTIVE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Group::FIND_ACTIVE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Group_FIND_START_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Group::FIND_START;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Group_UNLINK_FREE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Group::UNLINK_FREE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Group_UNLINK_NOFREE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Group::UNLINK_NOFREE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Group_Parent(void * jarg1) {
  void * jresult ;
  Vixen::Group *arg1 = (Vixen::Group *) 0 ;
  Vixen::Group *result = 0 ;
  
  arg1 = (Vixen::Group *)jarg1; 
  result = (Vixen::Group *)(arg1)->Parent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Group_First(void * jarg1) {
  void * jresult ;
  Vixen::Group *arg1 = (Vixen::Group *) 0 ;
  Vixen::Group *result = 0 ;
  
  arg1 = (Vixen::Group *)jarg1; 
  result = (Vixen::Group *)(arg1)->First();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Group_Last(void * jarg1) {
  void * jresult ;
  Vixen::Group *arg1 = (Vixen::Group *) 0 ;
  Vixen::Group *result = 0 ;
  
  arg1 = (Vixen::Group *)jarg1; 
  result = (Vixen::Group *)(arg1)->Last();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Group_Next(void * jarg1) {
  void * jresult ;
  Vixen::Group *arg1 = (Vixen::Group *) 0 ;
  Vixen::Group *result = 0 ;
  
  arg1 = (Vixen::Group *)jarg1; 
  result = (Vixen::Group *)(arg1)->Next();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Group_GetAt(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::Group *arg1 = (Vixen::Group *) 0 ;
  int arg2 ;
  Vixen::Group *result = 0 ;
  
  arg1 = (Vixen::Group *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Vixen::Group *)(arg1)->GetAt(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Group__SWIG_0(void * jarg1) {
  void * jresult ;
  Vixen::Group *arg1 = 0 ;
  Vixen::Group *result = 0 ;
  
  arg1 = (Vixen::Group *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Group const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Group *)new Vixen::Group((Vixen::Group const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Group__SWIG_1() {
  void * jresult ;
  Vixen::Group *result = 0 ;
  
  result = (Vixen::Group *)new Vixen::Group();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Group(void * jarg1) {
  Vixen::Group *arg1 = (Vixen::Group *) 0 ;
  
  arg1 = (Vixen::Group *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Group_Find__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  Vixen::Group *arg1 = (Vixen::Group *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  int arg3 ;
  Vixen::Group *result = 0 ;
  
  arg1 = (Vixen::Group *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (int)jarg3; 
  result = (Vixen::Group *)(arg1)->Find((TCHAR const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Group_Find__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Vixen::Group *arg1 = (Vixen::Group *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::Group *result = 0 ;
  
  arg1 = (Vixen::Group *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  result = (Vixen::Group *)(arg1)->Find((TCHAR const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Group_FindAll(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  Vixen::Group *arg1 = (Vixen::Group *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  int arg3 ;
  Vixen::ObjArray *result = 0 ;
  
  arg1 = (Vixen::Group *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (int)jarg3; 
  result = (Vixen::ObjArray *)((Vixen::Group const *)arg1)->FindAll((TCHAR const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Group_Append(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Group *arg1 = (Vixen::Group *) 0 ;
  Vixen::Group *arg2 = (Vixen::Group *) 0 ;
  Vixen::Group *result = 0 ;
  
  arg1 = (Vixen::Group *)jarg1; 
  arg2 = (Vixen::Group *)jarg2; 
  result = (Vixen::Group *)(arg1)->Append(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_PutAfter(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Group *arg1 = (Vixen::Group *) 0 ;
  Vixen::Group *arg2 = (Vixen::Group *) 0 ;
  bool result;
  
  arg1 = (Vixen::Group *)jarg1; 
  arg2 = (Vixen::Group *)jarg2; 
  result = (bool)(arg1)->PutAfter(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_PutBefore(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Group *arg1 = (Vixen::Group *) 0 ;
  Vixen::Group *arg2 = (Vixen::Group *) 0 ;
  bool result;
  
  arg1 = (Vixen::Group *)jarg1; 
  arg2 = (Vixen::Group *)jarg2; 
  result = (bool)(arg1)->PutBefore(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_Remove__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Vixen::Group *arg1 = (Vixen::Group *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (Vixen::Group *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->Remove(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_Remove__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Vixen::Group *arg1 = (Vixen::Group *) 0 ;
  bool result;
  
  arg1 = (Vixen::Group *)jarg1; 
  result = (bool)(arg1)->Remove();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Group_Replace(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Group *arg1 = (Vixen::Group *) 0 ;
  Vixen::Group *arg2 = (Vixen::Group *) 0 ;
  Vixen::Group *result = 0 ;
  
  arg1 = (Vixen::Group *)jarg1; 
  arg2 = (Vixen::Group *)jarg2; 
  result = (Vixen::Group *)(arg1)->Replace(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_NotifyParents(void * jarg1, unsigned int jarg2) {
  Vixen::Group *arg1 = (Vixen::Group *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Vixen::Group *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->NotifyParents(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Model_Parent(void * jarg1) {
  void * jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Model *result = 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  result = (Vixen::Model *)(arg1)->Parent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Model_First(void * jarg1) {
  void * jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Model *result = 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  result = (Vixen::Model *)(arg1)->First();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Model_Last(void * jarg1) {
  void * jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Model *result = 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  result = (Vixen::Model *)(arg1)->Last();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Model_Next(void * jarg1) {
  void * jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Model *result = 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  result = (Vixen::Model *)(arg1)->Next();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Model_GetAt(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  int arg2 ;
  Vixen::Model *result = 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Vixen::Model *)(arg1)->GetAt(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Model_WORLD_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Model::WORLD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Model_LOCAL_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Model::LOCAL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Model_NONE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Model::NONE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Model_STATIC_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Model::STATIC;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Model_MORPH_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Model::MORPH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Model_DISPLAY_NONE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Model::DISPLAY_NONE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Model_DISPLAY_ME_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Model::DISPLAY_ME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Model_DISPLAY_ALL_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Model::DISPLAY_ALL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Model__SWIG_0(void * jarg1) {
  void * jresult ;
  Vixen::Model *arg1 = 0 ;
  Vixen::Model *result = 0 ;
  
  arg1 = (Vixen::Model *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Model const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Model *)new Vixen::Model((Vixen::Model const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Model__SWIG_1() {
  void * jresult ;
  Vixen::Model *result = 0 ;
  
  result = (Vixen::Model *)new Vixen::Model();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Model(void * jarg1) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Model_GetCenter__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  int arg2 ;
  Vixen::Vec3 result;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((Vixen::Model const *)arg1)->GetCenter(arg2);
  jresult = new Vixen::Vec3((const Vixen::Vec3 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Model_GetCenter__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Vec3 *arg2 = (Vixen::Vec3 *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((Vixen::Model const *)arg1)->GetCenter(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Model_GetCenter__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Vec3 *arg2 = (Vixen::Vec3 *) 0 ;
  bool result;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2; 
  result = (bool)((Vixen::Model const *)arg1)->GetCenter(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Model_GetDirection(void * jarg1) {
  void * jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Vec3 result;
  
  arg1 = (Vixen::Model *)jarg1; 
  result = ((Vixen::Model const *)arg1)->GetDirection();
  jresult = new Vixen::Vec3((const Vixen::Vec3 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Model_GetBound__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Sphere *arg2 = (Vixen::Sphere *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Sphere *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((Vixen::Model const *)arg1)->GetBound(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Model_GetBound__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Sphere *arg2 = (Vixen::Sphere *) 0 ;
  bool result;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Sphere *)jarg2; 
  result = (bool)((Vixen::Model const *)arg1)->GetBound(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Model_GetBound__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Box3 *arg2 = (Vixen::Box3 *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((Vixen::Model const *)arg1)->GetBound(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Model_GetBound__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Box3 *arg2 = (Vixen::Box3 *) 0 ;
  bool result;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2; 
  result = (bool)((Vixen::Model const *)arg1)->GetBound(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_SetBound__SWIG_0(void * jarg1, void * jarg2) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Box3 *arg2 = (Vixen::Box3 *) 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2; 
  (arg1)->SetBound((Vixen::Box3 const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_SetBound__SWIG_1(void * jarg1, void * jarg2) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Sphere *arg2 = (Vixen::Sphere *) 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Sphere *)jarg2; 
  (arg1)->SetBound((Vixen::Sphere const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Model_CalcSphere(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Sphere *arg2 = (Vixen::Sphere *) 0 ;
  bool result;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Sphere *)jarg2; 
  result = (bool)((Vixen::Model const *)arg1)->CalcSphere(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Model_CalcBound(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Box3 *arg2 = (Vixen::Box3 *) 0 ;
  bool result;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2; 
  result = (bool)((Vixen::Model const *)arg1)->CalcBound(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_Reset(void * jarg1) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_Turn__SWIG_0(void * jarg1, void * jarg2, float jarg3) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->Turn((Vixen::Vec3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_Turn__SWIG_1(void * jarg1, void * jarg2) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Quat *arg2 = 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Quat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  (arg1)->Turn((Vixen::Quat const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_Rotate__SWIG_0(void * jarg1, void * jarg2, float jarg3) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->Rotate((Vixen::Vec3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_Rotate__SWIG_1(void * jarg1, void * jarg2) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Quat *arg2 = 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Quat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  (arg1)->Rotate((Vixen::Quat const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_LookAt(void * jarg1, void * jarg2, float jarg3) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->LookAt((Vixen::Vec3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_Move__SWIG_0(void * jarg1, void * jarg2) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  (arg1)->Move((Vixen::Vec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_Move__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->Move(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_Translate__SWIG_0(void * jarg1, void * jarg2) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  (arg1)->Translate((Vixen::Vec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_Translate__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->Translate(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_Scale__SWIG_0(void * jarg1, void * jarg2) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  (arg1)->Scale((Vixen::Vec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_Scale__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->Scale(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_Size__SWIG_0(void * jarg1, void * jarg2) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  (arg1)->Size((Vixen::Vec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_Size__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->Size(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_TotalTransform__SWIG_0(void * jarg1, void * jarg2) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Matrix *arg2 = (Vixen::Matrix *) 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Matrix *)jarg2; 
  ((Vixen::Model const *)arg1)->TotalTransform(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_TotalTransform__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Matrix *arg2 = (Vixen::Matrix *) 0 ;
  Vixen::Model *arg3 = (Vixen::Model *) 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Matrix *)jarg2; 
  arg3 = (Vixen::Model *)jarg3; 
  ((Vixen::Model const *)arg1)->TotalTransform(arg2,(Vixen::Model const *)arg3);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Model_GetNumVtx(void * jarg1) {
  long long jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  intptr result;
  
  arg1 = (Vixen::Model *)jarg1; 
  result = (intptr)((Vixen::Model const *)arg1)->GetNumVtx();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_DoCulling_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Vixen::Model::DoCulling = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Model_DoCulling_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Vixen::Model::DoCulling;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Model_XAXIS_get() {
  void * jresult ;
  Vixen::Vec3 *result = 0 ;
  
  result = (Vixen::Vec3 *) &Vixen::Model::XAXIS;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Model_YAXIS_get() {
  void * jresult ;
  Vixen::Vec3 *result = 0 ;
  
  result = (Vixen::Vec3 *) &Vixen::Model::YAXIS;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Model_ZAXIS_get() {
  void * jresult ;
  Vixen::Vec3 *result = 0 ;
  
  result = (Vixen::Vec3 *) &Vixen::Model::ZAXIS;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_Render(void * jarg1, void * jarg2) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Scene *arg2 = (Vixen::Scene *) 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Scene *)jarg2; 
  (arg1)->Render(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_Hints_set(void * jarg1, int jarg2) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_Model_Hints_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Model_Hints_get(void * jarg1) {
  int jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  int result;
  
  arg1 = (Vixen::Model *)jarg1; 
  result = (int)Vixen_Model_Hints_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_Translation_set(void * jarg1, void * jarg2) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  Vixen_Model_Translation_set(arg1,(Vixen::Vec3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Model_Translation_get(void * jarg1) {
  void * jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  result = (Vixen::Vec3 *) &Vixen_Model_Translation_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_Rotation_set(void * jarg1, void * jarg2) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Quat *arg2 = 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Quat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  Vixen_Model_Rotation_set(arg1,(Vixen::Quat const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Model_Rotation_get(void * jarg1) {
  void * jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Quat *result = 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  result = (Vixen::Quat *) &Vixen_Model_Rotation_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Model_Center_get(void * jarg1) {
  void * jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  result = (Vixen::Vec3 *) &Vixen_Model_Center_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_Culling_set(void * jarg1, unsigned int jarg2) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  bool arg2 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Vixen_Model_Culling_set(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Model_Culling_get(void * jarg1) {
  unsigned int jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  bool result;
  
  arg1 = (Vixen::Model *)jarg1; 
  result = (bool)Vixen_Model_Culling_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Model_Transform_set(void * jarg1, void * jarg2) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Matrix *arg2 = (Vixen::Matrix *) 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (Vixen::Matrix *)jarg2; 
  Vixen_Model_Transform_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Model_Transform_get(void * jarg1) {
  void * jresult ;
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  Vixen::Matrix *result = 0 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  result = (Vixen::Matrix *)Vixen_Model_Transform_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Camera_PERSPECTIVE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Camera::PERSPECTIVE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Camera_ORTHOGRAPHIC_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Camera::ORTHOGRAPHIC;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Camera_LEFT_PERSP_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Camera::LEFT_PERSP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Camera_RIGHT_PERSP_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Camera::RIGHT_PERSP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Camera_VISIBLE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Camera::VISIBLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Camera_ALL_VISIBLE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Camera::ALL_VISIBLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Camera__SWIG_0() {
  void * jresult ;
  Vixen::Camera *result = 0 ;
  
  result = (Vixen::Camera *)new Vixen::Camera();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Camera__SWIG_1(void * jarg1) {
  void * jresult ;
  Vixen::Camera *arg1 = 0 ;
  Vixen::Camera *result = 0 ;
  
  arg1 = (Vixen::Camera *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Camera const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Camera *)new Vixen::Camera((Vixen::Camera const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_SetCullVol(void * jarg1, void * jarg2) {
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  Vixen::Box3 *arg2 = 0 ;
  
  arg1 = (Vixen::Camera *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Box3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetCullVol((Vixen::Box3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_SetEyeSep(void * jarg1, float jarg2) {
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Camera *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetEyeSep(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_SetFocal(void * jarg1, float jarg2) {
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Camera *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetFocal(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera_GetEyeSep(void * jarg1) {
  float jresult ;
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  float result;
  
  arg1 = (Vixen::Camera *)jarg1; 
  result = (float)((Vixen::Camera const *)arg1)->GetEyeSep();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera_GetFocal(void * jarg1) {
  float jresult ;
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  float result;
  
  arg1 = (Vixen::Camera *)jarg1; 
  result = (float)((Vixen::Camera const *)arg1)->GetFocal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_GetViewVol(void * jarg1, void * jarg2) {
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  Vixen::Box3 *arg2 = (Vixen::Box3 *) 0 ;
  
  arg1 = (Vixen::Camera *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2; 
  ((Vixen::Camera const *)arg1)->GetViewVol(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_GetCullVol(void * jarg1) {
  void * jresult ;
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  Vixen::Box3 *result = 0 ;
  
  arg1 = (Vixen::Camera *)jarg1; 
  result = (Vixen::Box3 *) &((Vixen::Camera const *)arg1)->GetCullVol();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Camera_IsVisible__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  Vixen::Sphere *arg2 = 0 ;
  int result;
  
  arg1 = (Vixen::Camera *)jarg1; 
  arg2 = (Vixen::Sphere *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Sphere const & type is null", 0);
    return 0;
  } 
  result = (int)((Vixen::Camera const *)arg1)->IsVisible((Vixen::Sphere const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Camera_IsVisible__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  Vixen::Box3 *arg2 = 0 ;
  int result;
  
  arg1 = (Vixen::Camera *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Box3 const & type is null", 0);
    return 0;
  } 
  result = (int)((Vixen::Camera const *)arg1)->IsVisible((Vixen::Box3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_GetViewTrans(void * jarg1) {
  void * jresult ;
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  Vixen::Matrix *result = 0 ;
  
  arg1 = (Vixen::Camera *)jarg1; 
  result = (Vixen::Matrix *)((Vixen::Camera const *)arg1)->GetViewTrans();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_GetStereoView(void * jarg1, int jarg2, void * jarg3) {
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  int arg2 ;
  Vixen::Box3 *arg3 = 0 ;
  
  arg1 = (Vixen::Camera *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vixen::Box3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Box3 & type is null", 0);
    return ;
  } 
  ((Vixen::Camera const *)arg1)->GetStereoView(arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_GetCenter__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  int arg2 ;
  Vixen::Vec3 result;
  
  arg1 = (Vixen::Camera *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((Vixen::Camera const *)arg1)->GetCenter(arg2);
  jresult = new Vixen::Vec3((const Vixen::Vec3 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Camera_GetCenter__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  Vixen::Vec3 *arg2 = (Vixen::Vec3 *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (Vixen::Camera *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((Vixen::Camera const *)arg1)->GetCenter(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Camera_GetCenter__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  Vixen::Vec3 *arg2 = (Vixen::Vec3 *) 0 ;
  bool result;
  
  arg1 = (Vixen::Camera *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2; 
  result = (bool)((Vixen::Camera const *)arg1)->GetCenter(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_SetViewTrans__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  Vixen::Scene *arg2 = (Vixen::Scene *) 0 ;
  Vixen::Matrix *arg3 = (Vixen::Matrix *) 0 ;
  
  arg1 = (Vixen::Camera *)jarg1; 
  arg2 = (Vixen::Scene *)jarg2; 
  arg3 = (Vixen::Matrix *)jarg3; 
  (arg1)->SetViewTrans(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_SetViewTrans__SWIG_1(void * jarg1, void * jarg2) {
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  Vixen::Scene *arg2 = (Vixen::Scene *) 0 ;
  
  arg1 = (Vixen::Camera *)jarg1; 
  arg2 = (Vixen::Scene *)jarg2; 
  (arg1)->SetViewTrans(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_ViewVol_set(void * jarg1, void * jarg2) {
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  Vixen::Box3 *arg2 = 0 ;
  
  arg1 = (Vixen::Camera *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Box3 const & type is null", 0);
    return ;
  } 
  Vixen_Camera_ViewVol_set(arg1,(Vixen::Box3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_ViewVol_get(void * jarg1) {
  void * jresult ;
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  Vixen::Box3 *result = 0 ;
  
  arg1 = (Vixen::Camera *)jarg1; 
  result = (Vixen::Box3 *) &Vixen_Camera_ViewVol_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_Type_set(void * jarg1, int jarg2) {
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Camera *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_Camera_Type_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Camera_Type_get(void * jarg1) {
  int jresult ;
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  int result;
  
  arg1 = (Vixen::Camera *)jarg1; 
  result = (int)Vixen_Camera_Type_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_Aspect_set(void * jarg1, float jarg2) {
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Camera *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Camera_Aspect_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera_Aspect_get(void * jarg1) {
  float jresult ;
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  float result;
  
  arg1 = (Vixen::Camera *)jarg1; 
  result = (float)Vixen_Camera_Aspect_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_FieldOfView_set(void * jarg1, float jarg2) {
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Camera *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Camera_FieldOfView_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera_FieldOfView_get(void * jarg1) {
  float jresult ;
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  float result;
  
  arg1 = (Vixen::Camera *)jarg1; 
  result = (float)Vixen_Camera_FieldOfView_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_Hither_set(void * jarg1, float jarg2) {
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Camera *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Camera_Hither_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera_Hither_get(void * jarg1) {
  float jresult ;
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  float result;
  
  arg1 = (Vixen::Camera *)jarg1; 
  result = (float)Vixen_Camera_Hither_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_Yon_set(void * jarg1, float jarg2) {
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Camera *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Camera_Yon_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera_Yon_get(void * jarg1) {
  float jresult ;
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  float result;
  
  arg1 = (Vixen::Camera *)jarg1; 
  result = (float)Vixen_Camera_Yon_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_Height_set(void * jarg1, float jarg2) {
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Camera *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Camera_Height_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera_Height_get(void * jarg1) {
  float jresult ;
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  float result;
  
  arg1 = (Vixen::Camera *)jarg1; 
  result = (float)Vixen_Camera_Height_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Camera(void * jarg1) {
  Vixen::Camera *arg1 = (Vixen::Camera *) 0 ;
  
  arg1 = (Vixen::Camera *)jarg1; 
  arg1->Release();
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMOD_IsLoaded_get() {
  int jresult ;
  int result;
  
  result = (int)(32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMOD_IsLoading_get() {
  int jresult ;
  int result;
  
  result = (int)(64);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExtModel() {
  void * jresult ;
  Vixen::ExtModel *result = 0 ;
  
  result = (Vixen::ExtModel *)new Vixen::ExtModel();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExtModel_IsLoaded(void * jarg1) {
  unsigned int jresult ;
  Vixen::ExtModel *arg1 = (Vixen::ExtModel *) 0 ;
  bool result;
  
  arg1 = (Vixen::ExtModel *)jarg1; 
  result = (bool)((Vixen::ExtModel const *)arg1)->IsLoaded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtModel_Unload(void * jarg1) {
  Vixen::ExtModel *arg1 = (Vixen::ExtModel *) 0 ;
  
  arg1 = (Vixen::ExtModel *)jarg1; 
  (arg1)->Unload();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtModel_Load__SWIG_0(void * jarg1, char * jarg2) {
  Vixen::ExtModel *arg1 = (Vixen::ExtModel *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  
  arg1 = (Vixen::ExtModel *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  (arg1)->Load((TCHAR const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtModel_Load__SWIG_1(void * jarg1) {
  Vixen::ExtModel *arg1 = (Vixen::ExtModel *) 0 ;
  
  arg1 = (Vixen::ExtModel *)jarg1; 
  (arg1)->Load();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtModel_AutoLoadAll(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Vixen::ExtModel::AutoLoadAll(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExtModel_AUTOLOAD_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::ExtModel::AUTOLOAD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExtModel_REMOVE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::ExtModel::REMOVE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtModel_FileName_set(void * jarg1, char * jarg2) {
  Vixen::ExtModel *arg1 = (Vixen::ExtModel *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Vixen::ExtModel *)jarg1; 
  arg2 = (char *)jarg2; 
  Vixen_ExtModel_FileName_set(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ExtModel_FileName_get(void * jarg1) {
  char * jresult ;
  Vixen::ExtModel *arg1 = (Vixen::ExtModel *) 0 ;
  char *result = 0 ;
  
  arg1 = (Vixen::ExtModel *)jarg1; 
  result = (char *)Vixen_ExtModel_FileName_get(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtModel_ExtName_set(void * jarg1, char * jarg2) {
  Vixen::ExtModel *arg1 = (Vixen::ExtModel *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Vixen::ExtModel *)jarg1; 
  arg2 = (char *)jarg2; 
  Vixen_ExtModel_ExtName_set(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ExtModel_ExtName_get(void * jarg1) {
  char * jresult ;
  Vixen::ExtModel *arg1 = (Vixen::ExtModel *) 0 ;
  char *result = 0 ;
  
  arg1 = (Vixen::ExtModel *)jarg1; 
  result = (char *)Vixen_ExtModel_ExtName_get(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtModel_Options_set(void * jarg1, int jarg2) {
  Vixen::ExtModel *arg1 = (Vixen::ExtModel *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::ExtModel *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_ExtModel_Options_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExtModel_Options_get(void * jarg1) {
  int jresult ;
  Vixen::ExtModel *arg1 = (Vixen::ExtModel *) 0 ;
  int result;
  
  arg1 = (Vixen::ExtModel *)jarg1; 
  result = (int)Vixen_ExtModel_Options_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ExtModel(void * jarg1) {
  Vixen::ExtModel *arg1 = (Vixen::ExtModel *) 0 ;
  
  arg1 = (Vixen::ExtModel *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Bitmap() {
  void * jresult ;
  Vixen::Bitmap *result = 0 ;
  
  result = (Vixen::Bitmap *)new Vixen::Bitmap();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Bitmap(void * jarg1) {
  Vixen::Bitmap *arg1 = (Vixen::Bitmap *) 0 ;
  
  arg1 = (Vixen::Bitmap *)jarg1; 
  arg1->Release();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bitmap_ISLOADING_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Bitmap::ISLOADING;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bitmap_NOTEXTURE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Bitmap::NOTEXTURE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bitmap_DIB_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Bitmap::DIB;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bitmap_GLBITMAP_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Bitmap::GLBITMAP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bitmap_DXBITMAP_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Bitmap::DXBITMAP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bitmap_DDS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Bitmap::DDS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bitmap_FONT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Bitmap::FONT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bitmap_TEXHANDLE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Bitmap::TEXHANDLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bitmap_HASALPHA_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Bitmap::HASALPHA;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bitmap_NOFREE_DATA_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Bitmap::NOFREE_DATA;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bitmap_HASCOLOR_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Bitmap::HASCOLOR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bitmap_HASCOLORKEY_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Bitmap::HASCOLORKEY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bitmap_Kill(void * jarg1) {
  Vixen::Bitmap *arg1 = (Vixen::Bitmap *) 0 ;
  
  arg1 = (Vixen::Bitmap *)jarg1; 
  (arg1)->Kill();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Bitmap_WriteRGB(char * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (TCHAR *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)Vixen::Bitmap::WriteRGB((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bitmap_Type_set(void * jarg1, int jarg2) {
  Vixen::Bitmap *arg1 = (Vixen::Bitmap *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Bitmap *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bitmap_Type_get(void * jarg1) {
  int jresult ;
  Vixen::Bitmap *arg1 = (Vixen::Bitmap *) 0 ;
  int result;
  
  arg1 = (Vixen::Bitmap *)jarg1; 
  result = (int) ((arg1)->Type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bitmap_Depth_set(void * jarg1, int jarg2) {
  Vixen::Bitmap *arg1 = (Vixen::Bitmap *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Bitmap *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Depth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bitmap_Depth_get(void * jarg1) {
  int jresult ;
  Vixen::Bitmap *arg1 = (Vixen::Bitmap *) 0 ;
  int result;
  
  arg1 = (Vixen::Bitmap *)jarg1; 
  result = (int) ((arg1)->Depth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bitmap_Format_set(void * jarg1, int jarg2) {
  Vixen::Bitmap *arg1 = (Vixen::Bitmap *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Bitmap *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Format = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bitmap_Format_get(void * jarg1) {
  int jresult ;
  Vixen::Bitmap *arg1 = (Vixen::Bitmap *) 0 ;
  int result;
  
  arg1 = (Vixen::Bitmap *)jarg1; 
  result = (int) ((arg1)->Format);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bitmap_Width_set(void * jarg1, int jarg2) {
  Vixen::Bitmap *arg1 = (Vixen::Bitmap *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Bitmap *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bitmap_Width_get(void * jarg1) {
  int jresult ;
  Vixen::Bitmap *arg1 = (Vixen::Bitmap *) 0 ;
  int result;
  
  arg1 = (Vixen::Bitmap *)jarg1; 
  result = (int) ((arg1)->Width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bitmap_Height_set(void * jarg1, int jarg2) {
  Vixen::Bitmap *arg1 = (Vixen::Bitmap *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Bitmap *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bitmap_Height_get(void * jarg1) {
  int jresult ;
  Vixen::Bitmap *arg1 = (Vixen::Bitmap *) 0 ;
  int result;
  
  arg1 = (Vixen::Bitmap *)jarg1; 
  result = (int) ((arg1)->Height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bitmap_ByteSize_set(void * jarg1, int jarg2) {
  Vixen::Bitmap *arg1 = (Vixen::Bitmap *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Bitmap *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ByteSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bitmap_ByteSize_get(void * jarg1) {
  int jresult ;
  Vixen::Bitmap *arg1 = (Vixen::Bitmap *) 0 ;
  int result;
  
  arg1 = (Vixen::Bitmap *)jarg1; 
  result = (int) ((arg1)->ByteSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bitmap_Data_set(void * jarg1, void * jarg2) {
  Vixen::Bitmap *arg1 = (Vixen::Bitmap *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Vixen::Bitmap *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bitmap_Data_get(void * jarg1) {
  void * jresult ;
  Vixen::Bitmap *arg1 = (Vixen::Bitmap *) 0 ;
  void *result = 0 ;
  
  arg1 = (Vixen::Bitmap *)jarg1; 
  result = (void *) ((arg1)->Data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture_MIPMAP_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Texture::MIPMAP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture_CUBEMAP_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Texture::CUBEMAP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture_NORMALIZED_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Texture::NORMALIZED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture_RENDERTARGET_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Texture::RENDERTARGET;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Texture__SWIG_0(char * jarg1) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  Vixen::Texture *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  result = (Vixen::Texture *)new Vixen::Texture((TCHAR const *)arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Texture__SWIG_1() {
  void * jresult ;
  Vixen::Texture *result = 0 ;
  
  result = (Vixen::Texture *)new Vixen::Texture();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Texture(void * jarg1) {
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  
  arg1 = (Vixen::Texture *)jarg1; 
  arg1->Release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Texture_HasColor(void * jarg1) {
  unsigned int jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  bool result;
  
  arg1 = (Vixen::Texture *)jarg1; 
  result = (bool)((Vixen::Texture const *)arg1)->HasColor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Texture_HasAlpha(void * jarg1) {
  unsigned int jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  bool result;
  
  arg1 = (Vixen::Texture *)jarg1; 
  result = (bool)((Vixen::Texture const *)arg1)->HasAlpha();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Texture_IsMipMap(void * jarg1) {
  unsigned int jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  bool result;
  
  arg1 = (Vixen::Texture *)jarg1; 
  result = (bool)((Vixen::Texture const *)arg1)->IsMipMap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Texture_HasColorKey(void * jarg1) {
  unsigned int jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  bool result;
  
  arg1 = (Vixen::Texture *)jarg1; 
  result = (bool)((Vixen::Texture const *)arg1)->HasColorKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Texture_IsCubeMap(void * jarg1) {
  unsigned int jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  bool result;
  
  arg1 = (Vixen::Texture *)jarg1; 
  result = (bool)((Vixen::Texture const *)arg1)->IsCubeMap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture_BytesPerPixel(void * jarg1) {
  int jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  int result;
  
  arg1 = (Vixen::Texture *)jarg1; 
  result = (int)((Vixen::Texture const *)arg1)->BytesPerPixel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Texture_GetTexHandle(void * jarg1) {
  void * jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  void *result = 0 ;
  
  arg1 = (Vixen::Texture *)jarg1; 
  result = (void *)((Vixen::Texture const *)arg1)->GetTexHandle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Texture_UpdateData(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  
  arg1 = (Vixen::Texture *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (bool)(arg1)->UpdateData(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Texture_Load(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  bool result;
  
  arg1 = (Vixen::Texture *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  result = (bool)(arg1)->Load((TCHAR const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Texture_NotEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  Vixen::Texture *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Texture *)jarg1; 
  arg2 = (Vixen::Texture *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Texture const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Texture const *)arg1)->operator !=((Vixen::Texture const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Texture_Equal(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  Vixen::Texture *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Texture *)jarg1; 
  arg2 = (Vixen::Texture *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Texture const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Texture const *)arg1)->operator ==((Vixen::Texture const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_DoTexturing_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Vixen::Texture::DoTexturing = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Texture_DoTexturing_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Vixen::Texture::DoTexturing;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_DevHandle_set(void * jarg1, long long jarg2) {
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  intptr arg2 ;
  
  arg1 = (Vixen::Texture *)jarg1; 
  arg2 = (intptr)jarg2; 
  if (arg1) (arg1)->DevHandle = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Texture_DevHandle_get(void * jarg1) {
  long long jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  intptr result;
  
  arg1 = (Vixen::Texture *)jarg1; 
  result = (intptr) ((arg1)->DevHandle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_Width_set(void * jarg1, int jarg2) {
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Texture *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_Texture_Width_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture_Width_get(void * jarg1) {
  int jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  int result;
  
  arg1 = (Vixen::Texture *)jarg1; 
  result = (int)Vixen_Texture_Width_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_Height_set(void * jarg1, int jarg2) {
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Texture *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_Texture_Height_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture_Height_get(void * jarg1) {
  int jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  int result;
  
  arg1 = (Vixen::Texture *)jarg1; 
  result = (int)Vixen_Texture_Height_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_Depth_set(void * jarg1, int jarg2) {
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Texture *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_Texture_Depth_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture_Depth_get(void * jarg1) {
  int jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  int result;
  
  arg1 = (Vixen::Texture *)jarg1; 
  result = (int)Vixen_Texture_Depth_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_NumLod_set(void * jarg1, int jarg2) {
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Texture *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_Texture_NumLod_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture_NumLod_get(void * jarg1) {
  int jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  int result;
  
  arg1 = (Vixen::Texture *)jarg1; 
  result = (int)Vixen_Texture_NumLod_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_Format_set(void * jarg1, int jarg2) {
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Texture *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_Texture_Format_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture_Format_get(void * jarg1) {
  int jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  int result;
  
  arg1 = (Vixen::Texture *)jarg1; 
  result = (int)Vixen_Texture_Format_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_TranspColor_set(void * jarg1, void * jarg2) {
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  Vixen::Col4 *arg2 = 0 ;
  
  arg1 = (Vixen::Texture *)jarg1; 
  arg2 = (Vixen::Col4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Col4 const & type is null", 0);
    return ;
  } 
  Vixen_Texture_TranspColor_set(arg1,(Vixen::Col4 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Texture_TranspColor_get(void * jarg1) {
  void * jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  Vixen::Col4 *result = 0 ;
  
  arg1 = (Vixen::Texture *)jarg1; 
  result = (Vixen::Col4 *) &Vixen_Texture_TranspColor_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_Bitmap_set(void * jarg1, void * jarg2) {
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  Vixen::Bitmap *arg2 = (Vixen::Bitmap *) 0 ;
  
  arg1 = (Vixen::Texture *)jarg1; 
  arg2 = (Vixen::Bitmap *)jarg2; 
  Vixen_Texture_Bitmap_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Texture_Bitmap_get(void * jarg1) {
  void * jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  Vixen::Bitmap *result = 0 ;
  
  arg1 = (Vixen::Texture *)jarg1; 
  result = (Vixen::Bitmap *)Vixen_Texture_Bitmap_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_FileName_set(void * jarg1, char * jarg2) {
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Vixen::Texture *)jarg1; 
  arg2 = (char *)jarg2; 
  Vixen_Texture_FileName_set(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Texture_FileName_get(void * jarg1) {
  char * jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  char *result = 0 ;
  
  arg1 = (Vixen::Texture *)jarg1; 
  result = (char *)Vixen_Texture_FileName_get(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DeviceBuffer__SWIG_0(char * jarg1, unsigned long jarg2) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  size_t arg2 ;
  Vixen::DeviceBuffer *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (Vixen::DeviceBuffer *)new Vixen::DeviceBuffer((TCHAR const *)arg1,arg2);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DeviceBuffer__SWIG_1(char * jarg1) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  Vixen::DeviceBuffer *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  result = (Vixen::DeviceBuffer *)new Vixen::DeviceBuffer((TCHAR const *)arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DeviceBuffer__SWIG_2() {
  void * jresult ;
  Vixen::DeviceBuffer *result = 0 ;
  
  result = (Vixen::DeviceBuffer *)new Vixen::DeviceBuffer();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DeviceBuffer__SWIG_3(void * jarg1) {
  void * jresult ;
  Vixen::DeviceBuffer *arg1 = 0 ;
  Vixen::DeviceBuffer *result = 0 ;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::DeviceBuffer const & type is null", 0);
    return 0;
  } 
  result = (Vixen::DeviceBuffer *)new Vixen::DeviceBuffer((Vixen::DeviceBuffer const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DeviceBuffer(void * jarg1) {
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  arg1->Release();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DeviceBuffer_GetDescriptor(void * jarg1) {
  char * jresult ;
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  TCHAR *result = 0 ;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  result = (TCHAR *)((Vixen::DeviceBuffer const *)arg1)->GetDescriptor();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DeviceBuffer_GetData(void * jarg1) {
  void * jresult ;
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  void *result = 0 ;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  result = (void *)((Vixen::DeviceBuffer const *)arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceBuffer_SetData(void * jarg1, void * jarg2) {
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->SetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceBuffer_Reset(void * jarg1, char * jarg2, unsigned long jarg3) {
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  size_t arg3 ;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->Reset((TCHAR const *)arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DeviceBuffer_Get__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  float *arg3 = 0 ;
  bool result;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (float *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::DeviceBuffer const *)arg1)->Get((TCHAR const *)arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DeviceBuffer_Get__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::Col4 *arg3 = 0 ;
  bool result;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (Vixen::Col4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Col4 & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::DeviceBuffer const *)arg1)->Get((TCHAR const *)arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DeviceBuffer_Get__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::Vec3 *arg3 = 0 ;
  bool result;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (Vixen::Vec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::DeviceBuffer const *)arg1)->Get((TCHAR const *)arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DeviceBuffer_Get__SWIG_3(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::Vec4 *arg3 = 0 ;
  bool result;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (Vixen::Vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec4 & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::DeviceBuffer const *)arg1)->Get((TCHAR const *)arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DeviceBuffer_Get__SWIG_4(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::Vec2 *arg3 = 0 ;
  bool result;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (Vixen::Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec2 & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::DeviceBuffer const *)arg1)->Get((TCHAR const *)arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DeviceBuffer_Set__SWIG_0(void * jarg1, char * jarg2, float jarg3) {
  unsigned int jresult ;
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->Set((TCHAR const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DeviceBuffer_Set__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  int32 arg3 ;
  bool result;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (int32)jarg3; 
  result = (bool)(arg1)->Set((TCHAR const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DeviceBuffer_Set__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::Col4 *arg3 = 0 ;
  bool result;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (Vixen::Col4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Col4 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Set((TCHAR const *)arg2,(Vixen::Col4 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DeviceBuffer_Set__SWIG_3(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::Vec3 *arg3 = 0 ;
  bool result;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (Vixen::Vec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Set((TCHAR const *)arg2,(Vixen::Vec3 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DeviceBuffer_Set__SWIG_4(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::Vec4 *arg3 = 0 ;
  bool result;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (Vixen::Vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec4 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Set((TCHAR const *)arg2,(Vixen::Vec4 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DeviceBuffer_Set__SWIG_5(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::Vec2 *arg3 = 0 ;
  bool result;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (Vixen::Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec2 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Set((TCHAR const *)arg2,(Vixen::Vec2 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DeviceBuffer_Get__SWIG_5(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  int32 *arg3 = (int32 *) 0 ;
  bool result;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (int32 *)jarg3; 
  result = (bool)((Vixen::DeviceBuffer const *)arg1)->Get((TCHAR const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DeviceBuffer_Set__SWIG_6(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  int32 *arg3 = (int32 *) 0 ;
  bool result;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (int32 *)jarg3; 
  result = (bool)(arg1)->Set((TCHAR const *)arg2,(int32 const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceBuffer_DevHandle_set(void * jarg1, long long jarg2) {
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  intptr arg2 ;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  arg2 = (intptr)jarg2; 
  if (arg1) (arg1)->DevHandle = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_DeviceBuffer_DevHandle_get(void * jarg1) {
  long long jresult ;
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  intptr result;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  result = (intptr) ((arg1)->DevHandle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceBuffer_Layout_set(void * jarg1, char * jarg2) {
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  arg2 = (char *)jarg2; 
  Vixen_DeviceBuffer_Layout_set(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DeviceBuffer_Layout_get(void * jarg1) {
  char * jresult ;
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  char *result = 0 ;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  result = (char *)Vixen_DeviceBuffer_Layout_get(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceBuffer_ByteSize_set(void * jarg1, int jarg2) {
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_DeviceBuffer_ByteSize_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_DeviceBuffer_ByteSize_get(void * jarg1) {
  int jresult ;
  Vixen::DeviceBuffer *arg1 = (Vixen::DeviceBuffer *) 0 ;
  int result;
  
  arg1 = (Vixen::DeviceBuffer *)jarg1; 
  result = (int)Vixen_DeviceBuffer_ByteSize_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Material__SWIG_0(char * jarg1, int jarg2) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  int arg2 ;
  Vixen::Material *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Vixen::Material *)new Vixen::Material((TCHAR const *)arg1,arg2);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Material__SWIG_1(char * jarg1) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  Vixen::Material *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  result = (Vixen::Material *)new Vixen::Material((TCHAR const *)arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Material__SWIG_2() {
  void * jresult ;
  Vixen::Material *result = 0 ;
  
  result = (Vixen::Material *)new Vixen::Material();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Material(void * jarg1) {
  Vixen::Material *arg1 = (Vixen::Material *) 0 ;
  
  arg1 = (Vixen::Material *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PhongMaterial__SWIG_0() {
  void * jresult ;
  Vixen::PhongMaterial *result = 0 ;
  
  result = (Vixen::PhongMaterial *)new Vixen::PhongMaterial();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PhongMaterial__SWIG_1(void * jarg1) {
  void * jresult ;
  Vixen::Col4 *arg1 = 0 ;
  Vixen::PhongMaterial *result = 0 ;
  
  arg1 = (Vixen::Col4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Col4 const & type is null", 0);
    return 0;
  } 
  result = (Vixen::PhongMaterial *)new Vixen::PhongMaterial((Vixen::Col4 const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PhongMaterial__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::PhongMaterial *arg1 = 0 ;
  Vixen::PhongMaterial *result = 0 ;
  
  arg1 = (Vixen::PhongMaterial *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::PhongMaterial const & type is null", 0);
    return 0;
  } 
  result = (Vixen::PhongMaterial *)new Vixen::PhongMaterial((Vixen::PhongMaterial const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PhongMaterial(void * jarg1) {
  Vixen::PhongMaterial *arg1 = (Vixen::PhongMaterial *) 0 ;
  
  arg1 = (Vixen::PhongMaterial *)jarg1; 
  arg1->Release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhongMaterial_Equal(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::PhongMaterial *arg1 = (Vixen::PhongMaterial *) 0 ;
  Vixen::PhongMaterial *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::PhongMaterial *)jarg1; 
  arg2 = (Vixen::PhongMaterial *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::PhongMaterial const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->operator ==((Vixen::PhongMaterial const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhongMaterial_NotEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::PhongMaterial *arg1 = (Vixen::PhongMaterial *) 0 ;
  Vixen::PhongMaterial *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::PhongMaterial *)jarg1; 
  arg2 = (Vixen::PhongMaterial *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::PhongMaterial const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->operator !=((Vixen::PhongMaterial const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhongMaterial_Emission_set(void * jarg1, void * jarg2) {
  Vixen::PhongMaterial *arg1 = (Vixen::PhongMaterial *) 0 ;
  Vixen::Col4 *arg2 = 0 ;
  
  arg1 = (Vixen::PhongMaterial *)jarg1; 
  arg2 = (Vixen::Col4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Col4 const & type is null", 0);
    return ;
  } 
  Vixen_PhongMaterial_Emission_set(arg1,(Vixen::Col4 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhongMaterial_Emission_get(void * jarg1) {
  void * jresult ;
  Vixen::PhongMaterial *arg1 = (Vixen::PhongMaterial *) 0 ;
  Vixen::Col4 *result = 0 ;
  
  arg1 = (Vixen::PhongMaterial *)jarg1; 
  result = (Vixen::Col4 *) &Vixen_PhongMaterial_Emission_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhongMaterial_Shine_set(void * jarg1, float jarg2) {
  Vixen::PhongMaterial *arg1 = (Vixen::PhongMaterial *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::PhongMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_PhongMaterial_Shine_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhongMaterial_Shine_get(void * jarg1) {
  float jresult ;
  Vixen::PhongMaterial *arg1 = (Vixen::PhongMaterial *) 0 ;
  float result;
  
  arg1 = (Vixen::PhongMaterial *)jarg1; 
  result = (float)Vixen_PhongMaterial_Shine_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhongMaterial_Ambient_set(void * jarg1, void * jarg2) {
  Vixen::PhongMaterial *arg1 = (Vixen::PhongMaterial *) 0 ;
  Vixen::Col4 *arg2 = 0 ;
  
  arg1 = (Vixen::PhongMaterial *)jarg1; 
  arg2 = (Vixen::Col4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Col4 const & type is null", 0);
    return ;
  } 
  Vixen_PhongMaterial_Ambient_set(arg1,(Vixen::Col4 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhongMaterial_Ambient_get(void * jarg1) {
  void * jresult ;
  Vixen::PhongMaterial *arg1 = (Vixen::PhongMaterial *) 0 ;
  Vixen::Col4 *result = 0 ;
  
  arg1 = (Vixen::PhongMaterial *)jarg1; 
  result = (Vixen::Col4 *) &Vixen_PhongMaterial_Ambient_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhongMaterial_Diffuse_set(void * jarg1, void * jarg2) {
  Vixen::PhongMaterial *arg1 = (Vixen::PhongMaterial *) 0 ;
  Vixen::Col4 *arg2 = 0 ;
  
  arg1 = (Vixen::PhongMaterial *)jarg1; 
  arg2 = (Vixen::Col4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Col4 const & type is null", 0);
    return ;
  } 
  Vixen_PhongMaterial_Diffuse_set(arg1,(Vixen::Col4 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhongMaterial_Diffuse_get(void * jarg1) {
  void * jresult ;
  Vixen::PhongMaterial *arg1 = (Vixen::PhongMaterial *) 0 ;
  Vixen::Col4 *result = 0 ;
  
  arg1 = (Vixen::PhongMaterial *)jarg1; 
  result = (Vixen::Col4 *) &Vixen_PhongMaterial_Diffuse_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhongMaterial_Specular_set(void * jarg1, void * jarg2) {
  Vixen::PhongMaterial *arg1 = (Vixen::PhongMaterial *) 0 ;
  Vixen::Col4 *arg2 = 0 ;
  
  arg1 = (Vixen::PhongMaterial *)jarg1; 
  arg2 = (Vixen::Col4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Col4 const & type is null", 0);
    return ;
  } 
  Vixen_PhongMaterial_Specular_set(arg1,(Vixen::Col4 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhongMaterial_Specular_get(void * jarg1) {
  void * jresult ;
  Vixen::PhongMaterial *arg1 = (Vixen::PhongMaterial *) 0 ;
  Vixen::Col4 *result = 0 ;
  
  arg1 = (Vixen::PhongMaterial *)jarg1; 
  result = (Vixen::Col4 *) &Vixen_PhongMaterial_Specular_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sampler_NONE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Sampler::NONE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sampler_TEXTUREOP_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Sampler::TEXTUREOP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sampler_TEXCOORD_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Sampler::TEXCOORD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sampler_MINFILTER_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Sampler::MINFILTER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sampler_MAGFILTER_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Sampler::MAGFILTER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sampler_MIPMAP_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Sampler::MIPMAP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sampler_NUM_ATTRS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Sampler::NUM_ATTRS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sampler_TEXGEN_SPHERE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Sampler::TEXGEN_SPHERE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sampler_TEXGEN_CUBE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Sampler::TEXGEN_CUBE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sampler_NEAREST_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Sampler::NEAREST;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sampler_LINEAR_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Sampler::LINEAR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sampler_EMISSION_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Sampler::EMISSION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sampler_DIFFUSE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Sampler::DIFFUSE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sampler_SPECULAR_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Sampler::SPECULAR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sampler_BUMP_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Sampler::BUMP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sampler_SHADER_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Sampler::SHADER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sampler__SWIG_0() {
  void * jresult ;
  Vixen::Sampler *result = 0 ;
  
  result = (Vixen::Sampler *)new Vixen::Sampler();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sampler__SWIG_1(void * jarg1) {
  void * jresult ;
  Vixen::Sampler *arg1 = 0 ;
  Vixen::Sampler *result = 0 ;
  
  arg1 = (Vixen::Sampler *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Sampler const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Sampler *)new Vixen::Sampler((Vixen::Sampler const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sampler__SWIG_2(char * jarg1) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  Vixen::Sampler *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  result = (Vixen::Sampler *)new Vixen::Sampler((TCHAR const *)arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sampler__SWIG_3(void * jarg1) {
  void * jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  Vixen::Sampler *result = 0 ;
  
  arg1 = (Vixen::Texture *)jarg1; 
  result = (Vixen::Sampler *)new Vixen::Sampler(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sampler_Equal(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Sampler *arg1 = (Vixen::Sampler *) 0 ;
  Vixen::Sampler *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Sampler *)jarg1; 
  arg2 = (Vixen::Sampler *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Sampler const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Sampler const *)arg1)->operator ==((Vixen::Sampler const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sampler_NotEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Sampler *arg1 = (Vixen::Sampler *) 0 ;
  Vixen::Sampler *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Sampler *)jarg1; 
  arg2 = (Vixen::Sampler *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Sampler const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Sampler const *)arg1)->operator !=((Vixen::Sampler const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Sampler_GetAttrName(void * jarg1, int jarg2) {
  char * jresult ;
  Vixen::Sampler *arg1 = (Vixen::Sampler *) 0 ;
  int arg2 ;
  TCHAR *result = 0 ;
  
  arg1 = (Vixen::Sampler *)jarg1; 
  arg2 = (int)jarg2; 
  result = (TCHAR *)((Vixen::Sampler const *)arg1)->GetAttrName(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sampler_Get(void * jarg1, int jarg2) {
  int jresult ;
  Vixen::Sampler *arg1 = (Vixen::Sampler *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Vixen::Sampler *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((Vixen::Sampler const *)arg1)->Get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sampler_Set(void * jarg1, int jarg2, int jarg3) {
  Vixen::Sampler *arg1 = (Vixen::Sampler *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Vixen::Sampler *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Set(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sampler_IsMipMap(void * jarg1) {
  unsigned int jresult ;
  Vixen::Sampler *arg1 = (Vixen::Sampler *) 0 ;
  bool result;
  
  arg1 = (Vixen::Sampler *)jarg1; 
  result = (bool)((Vixen::Sampler const *)arg1)->IsMipMap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sampler_HasAlpha(void * jarg1) {
  unsigned int jresult ;
  Vixen::Sampler *arg1 = (Vixen::Sampler *) 0 ;
  bool result;
  
  arg1 = (Vixen::Sampler *)jarg1; 
  result = (bool)((Vixen::Sampler const *)arg1)->HasAlpha();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sampler_Texture_set(void * jarg1, void * jarg2) {
  Vixen::Sampler *arg1 = (Vixen::Sampler *) 0 ;
  Vixen::Texture *arg2 = (Vixen::Texture *) 0 ;
  
  arg1 = (Vixen::Sampler *)jarg1; 
  arg2 = (Vixen::Texture *)jarg2; 
  Vixen_Sampler_Texture_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sampler_Texture_get(void * jarg1) {
  void * jresult ;
  Vixen::Sampler *arg1 = (Vixen::Sampler *) 0 ;
  Vixen::Texture *result = 0 ;
  
  arg1 = (Vixen::Sampler *)jarg1; 
  result = (Vixen::Texture *)Vixen_Sampler_Texture_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sampler(void * jarg1) {
  Vixen::Sampler *arg1 = (Vixen::Sampler *) 0 ;
  
  arg1 = (Vixen::Sampler *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Shader__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  Vixen::Shader *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Vixen::Shader *)new Vixen::Shader(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Shader__SWIG_1() {
  void * jresult ;
  Vixen::Shader *result = 0 ;
  
  result = (Vixen::Shader *)new Vixen::Shader();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Shader(void * jarg1) {
  Vixen::Shader *arg1 = (Vixen::Shader *) 0 ;
  
  arg1 = (Vixen::Shader *)jarg1; 
  arg1->Release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Shader_HasSource(void * jarg1) {
  unsigned int jresult ;
  Vixen::Shader *arg1 = (Vixen::Shader *) 0 ;
  bool result;
  
  arg1 = (Vixen::Shader *)jarg1; 
  result = (bool)((Vixen::Shader const *)arg1)->HasSource();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Shader_GetShaderType(void * jarg1) {
  int jresult ;
  Vixen::Shader *arg1 = (Vixen::Shader *) 0 ;
  int result;
  
  arg1 = (Vixen::Shader *)jarg1; 
  result = (int)((Vixen::Shader const *)arg1)->GetShaderType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shader_SetShaderCode(void * jarg1, void * jarg2, unsigned long jarg3) {
  Vixen::Shader *arg1 = (Vixen::Shader *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  
  arg1 = (Vixen::Shader *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (size_t)jarg3; 
  ((Vixen::Shader const *)arg1)->SetShaderCode((void const *)arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Shader_PIXEL_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Shader::PIXEL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Shader_VERTEX_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Shader::VERTEX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Shader_LIGHT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Shader::LIGHT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Shader_CLASS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Shader::CLASS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shader_FileName_set(void * jarg1, char * jarg2) {
  Vixen::Shader *arg1 = (Vixen::Shader *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Vixen::Shader *)jarg1; 
  arg2 = (char *)jarg2; 
  Vixen_Shader_FileName_set(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Shader_FileName_get(void * jarg1) {
  char * jresult ;
  Vixen::Shader *arg1 = (Vixen::Shader *) 0 ;
  char *result = 0 ;
  
  arg1 = (Vixen::Shader *)jarg1; 
  result = (char *)Vixen_Shader_FileName_get(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shader_Source_set(void * jarg1, char * jarg2) {
  Vixen::Shader *arg1 = (Vixen::Shader *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Vixen::Shader *)jarg1; 
  arg2 = (char *)jarg2; 
  Vixen_Shader_Source_set(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Shader_Source_get(void * jarg1) {
  char * jresult ;
  Vixen::Shader *arg1 = (Vixen::Shader *) 0 ;
  char *result = 0 ;
  
  arg1 = (Vixen::Shader *)jarg1; 
  result = (char *)Vixen_Shader_Source_get(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shader_InputDesc_set(void * jarg1, char * jarg2) {
  Vixen::Shader *arg1 = (Vixen::Shader *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Vixen::Shader *)jarg1; 
  arg2 = (char *)jarg2; 
  Vixen_Shader_InputDesc_set(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Shader_InputDesc_get(void * jarg1) {
  char * jresult ;
  Vixen::Shader *arg1 = (Vixen::Shader *) 0 ;
  char *result = 0 ;
  
  arg1 = (Vixen::Shader *)jarg1; 
  result = (char *)Vixen_Shader_InputDesc_get(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shader_OutputDesc_set(void * jarg1, char * jarg2) {
  Vixen::Shader *arg1 = (Vixen::Shader *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Vixen::Shader *)jarg1; 
  arg2 = (char *)jarg2; 
  Vixen_Shader_OutputDesc_set(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Shader_OutputDesc_get(void * jarg1) {
  char * jresult ;
  Vixen::Shader *arg1 = (Vixen::Shader *) 0 ;
  char *result = 0 ;
  
  arg1 = (Vixen::Shader *)jarg1; 
  result = (char *)Vixen_Shader_OutputDesc_get(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Appearance_NONE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Appearance::NONE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Appearance_CULLING_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Appearance::CULLING;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Appearance_LIGHTING_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Appearance::LIGHTING;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Appearance_SHADING_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Appearance::SHADING;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Appearance_ZBUFFER_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Appearance::ZBUFFER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Appearance_TRANSPARENCY_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Appearance::TRANSPARENCY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Appearance_NUM_ATTRS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Appearance::NUM_ATTRS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Appearance_SMOOTH_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Appearance::SMOOTH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Appearance_WIRE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Appearance::WIRE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Appearance_POINTS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Appearance::POINTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Appearance__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  Vixen::Appearance *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Vixen::Appearance *)new Vixen::Appearance(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Appearance__SWIG_1() {
  void * jresult ;
  Vixen::Appearance *result = 0 ;
  
  result = (Vixen::Appearance *)new Vixen::Appearance();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Appearance__SWIG_2(char * jarg1) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  Vixen::Appearance *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  result = (Vixen::Appearance *)new Vixen::Appearance((TCHAR const *)arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Appearance__SWIG_3(void * jarg1) {
  void * jresult ;
  Vixen::Appearance *arg1 = 0 ;
  Vixen::Appearance *result = 0 ;
  
  arg1 = (Vixen::Appearance *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Appearance const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Appearance *)new Vixen::Appearance((Vixen::Appearance const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Appearance__SWIG_4(void * jarg1) {
  void * jresult ;
  Vixen::Col4 *arg1 = 0 ;
  Vixen::Appearance *result = 0 ;
  
  arg1 = (Vixen::Col4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Col4 const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Appearance *)new Vixen::Appearance((Vixen::Col4 const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Appearance_Equal(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Appearance *arg1 = (Vixen::Appearance *) 0 ;
  Vixen::Appearance *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Appearance *)jarg1; 
  arg2 = (Vixen::Appearance *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Appearance const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Appearance const *)arg1)->operator ==((Vixen::Appearance const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Appearance_NotEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Appearance *arg1 = (Vixen::Appearance *) 0 ;
  Vixen::Appearance *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Appearance *)jarg1; 
  arg2 = (Vixen::Appearance *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Appearance const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Appearance const *)arg1)->operator !=((Vixen::Appearance const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Appearance_SetSampler(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  Vixen::Appearance *arg1 = (Vixen::Appearance *) 0 ;
  int arg2 ;
  Vixen::Sampler *arg3 = (Vixen::Sampler *) 0 ;
  bool result;
  
  arg1 = (Vixen::Appearance *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vixen::Sampler *)jarg3; 
  result = (bool)(arg1)->SetSampler(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Appearance_GetSampler(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::Appearance *arg1 = (Vixen::Appearance *) 0 ;
  int arg2 ;
  Vixen::Sampler *result = 0 ;
  
  arg1 = (Vixen::Appearance *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Vixen::Sampler *)(arg1)->GetSampler(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Appearance_SetVertexShader(void * jarg1, void * jarg2) {
  Vixen::Appearance *arg1 = (Vixen::Appearance *) 0 ;
  Vixen::Shader *arg2 = (Vixen::Shader *) 0 ;
  
  arg1 = (Vixen::Appearance *)jarg1; 
  arg2 = (Vixen::Shader *)jarg2; 
  (arg1)->SetVertexShader((Vixen::Shader const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Appearance_GetVertexShader(void * jarg1) {
  void * jresult ;
  Vixen::Appearance *arg1 = (Vixen::Appearance *) 0 ;
  Vixen::Shader *result = 0 ;
  
  arg1 = (Vixen::Appearance *)jarg1; 
  result = (Vixen::Shader *)((Vixen::Appearance const *)arg1)->GetVertexShader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Appearance_Get(void * jarg1, int jarg2) {
  int jresult ;
  Vixen::Appearance *arg1 = (Vixen::Appearance *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Vixen::Appearance *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((Vixen::Appearance const *)arg1)->Get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Appearance_Set(void * jarg1, int jarg2, int jarg3) {
  Vixen::Appearance *arg1 = (Vixen::Appearance *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Vixen::Appearance *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Set(arg2,arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Appearance_GetAttrName(void * jarg1, int jarg2) {
  char * jresult ;
  Vixen::Appearance *arg1 = (Vixen::Appearance *) 0 ;
  int arg2 ;
  TCHAR *result = 0 ;
  
  arg1 = (Vixen::Appearance *)jarg1; 
  arg2 = (int)jarg2; 
  result = (TCHAR *)((Vixen::Appearance const *)arg1)->GetAttrName(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Appearance_Apply(void * jarg1, int jarg2, int jarg3) {
  Vixen::Model *arg1 = (Vixen::Model *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Vixen::Model *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Vixen::Appearance::Apply(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Appearance_DoLighting_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Vixen::Appearance::DoLighting = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Appearance_DoLighting_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Vixen::Appearance::DoLighting;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Appearance_Material_set(void * jarg1, void * jarg2) {
  Vixen::Appearance *arg1 = (Vixen::Appearance *) 0 ;
  Vixen::Material *arg2 = (Vixen::Material *) 0 ;
  
  arg1 = (Vixen::Appearance *)jarg1; 
  arg2 = (Vixen::Material *)jarg2; 
  Vixen_Appearance_Material_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Appearance_Material_get(void * jarg1) {
  void * jresult ;
  Vixen::Appearance *arg1 = (Vixen::Appearance *) 0 ;
  Vixen::Material *result = 0 ;
  
  arg1 = (Vixen::Appearance *)jarg1; 
  result = (Vixen::Material *)Vixen_Appearance_Material_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Appearance_PixelShader_set(void * jarg1, void * jarg2) {
  Vixen::Appearance *arg1 = (Vixen::Appearance *) 0 ;
  Vixen::Shader *arg2 = (Vixen::Shader *) 0 ;
  
  arg1 = (Vixen::Appearance *)jarg1; 
  arg2 = (Vixen::Shader *)jarg2; 
  Vixen_Appearance_PixelShader_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Appearance_PixelShader_get(void * jarg1) {
  void * jresult ;
  Vixen::Appearance *arg1 = (Vixen::Appearance *) 0 ;
  Vixen::Shader *result = 0 ;
  
  arg1 = (Vixen::Appearance *)jarg1; 
  result = (Vixen::Shader *)Vixen_Appearance_PixelShader_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Appearance_NumSamplers_set(void * jarg1, int jarg2) {
  Vixen::Appearance *arg1 = (Vixen::Appearance *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Appearance *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_Appearance_NumSamplers_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Appearance_NumSamplers_get(void * jarg1) {
  int jresult ;
  Vixen::Appearance *arg1 = (Vixen::Appearance *) 0 ;
  int result;
  
  arg1 = (Vixen::Appearance *)jarg1; 
  result = (int)Vixen_Appearance_NumSamplers_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Appearance(void * jarg1) {
  Vixen::Appearance *arg1 = (Vixen::Appearance *) 0 ;
  
  arg1 = (Vixen::Appearance *)jarg1; 
  arg1->Release();
}


SWIGEXPORT int SWIGSTDCALL CSharp_VertexPool_MORPH_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::VertexPool::MORPH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VertexPool_LOCATIONS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::VertexPool::LOCATIONS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VertexPool_COLORS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::VertexPool::COLORS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VertexPool_NORMALS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::VertexPool::NORMALS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VertexPool_TEXCOORDS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::VertexPool::TEXCOORDS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VertexPool_TANGENTS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::VertexPool::TANGENTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VertexPool_INTEGER_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::VertexPool::INTEGER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VertexPool_MAX_TEXCOORDS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::VertexPool::MAX_TEXCOORDS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VertexPool_MAX_SLOTS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::VertexPool::MAX_SLOTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VertexPool_MAX_VTX_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::VertexPool::MAX_VTX_SIZE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VertexPool__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  Vixen::VertexPool *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Vixen::VertexPool *)new Vixen::VertexPool(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VertexPool__SWIG_1() {
  void * jresult ;
  Vixen::VertexPool *result = 0 ;
  
  result = (Vixen::VertexPool *)new Vixen::VertexPool();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VertexPool__SWIG_2(char * jarg1) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  Vixen::VertexPool *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  result = (Vixen::VertexPool *)new Vixen::VertexPool((TCHAR const *)arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VertexPool(void * jarg1) {
  Vixen::VertexPool *arg1 = (Vixen::VertexPool *) 0 ;
  
  arg1 = (Vixen::VertexPool *)jarg1; 
  arg1->Release();
}


SWIGEXPORT int SWIGSTDCALL CSharp_VertexPool_GetStyle(void * jarg1) {
  int jresult ;
  Vixen::VertexPool *arg1 = (Vixen::VertexPool *) 0 ;
  int result;
  
  arg1 = (Vixen::VertexPool *)jarg1; 
  result = (int)((Vixen::VertexPool const *)arg1)->GetStyle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VertexPool_SetStyle(void * jarg1, int jarg2) {
  Vixen::VertexPool *arg1 = (Vixen::VertexPool *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::VertexPool *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetStyle(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VertexPool_GetVtxSize(void * jarg1) {
  int jresult ;
  Vixen::VertexPool *arg1 = (Vixen::VertexPool *) 0 ;
  int result;
  
  arg1 = (Vixen::VertexPool *)jarg1; 
  result = (int)((Vixen::VertexPool const *)arg1)->GetVtxSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_VertexPool_GetNumVtx(void * jarg1) {
  long long jresult ;
  Vixen::VertexPool *arg1 = (Vixen::VertexPool *) 0 ;
  intptr result;
  
  arg1 = (Vixen::VertexPool *)jarg1; 
  result = (intptr)((Vixen::VertexPool const *)arg1)->GetNumVtx();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_VertexPool_GetMaxVtx(void * jarg1) {
  long long jresult ;
  Vixen::VertexPool *arg1 = (Vixen::VertexPool *) 0 ;
  intptr result;
  
  arg1 = (Vixen::VertexPool *)jarg1; 
  result = (intptr)((Vixen::VertexPool const *)arg1)->GetMaxVtx();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VertexPool_SetNumVtx(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  Vixen::VertexPool *arg1 = (Vixen::VertexPool *) 0 ;
  intptr arg2 ;
  bool result;
  
  arg1 = (Vixen::VertexPool *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (bool)(arg1)->SetNumVtx(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VertexPool_SetMaxVtx(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  Vixen::VertexPool *arg1 = (Vixen::VertexPool *) 0 ;
  intptr arg2 ;
  bool result;
  
  arg1 = (Vixen::VertexPool *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (bool)(arg1)->SetMaxVtx(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VertexPool_Grow(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  Vixen::VertexPool *arg1 = (Vixen::VertexPool *) 0 ;
  intptr arg2 ;
  bool result;
  
  arg1 = (Vixen::VertexPool *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (bool)(arg1)->Grow(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VertexPool_GetBound(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::VertexPool *arg1 = (Vixen::VertexPool *) 0 ;
  Vixen::Box3 *arg2 = (Vixen::Box3 *) 0 ;
  bool result;
  
  arg1 = (Vixen::VertexPool *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2; 
  result = (bool)((Vixen::VertexPool const *)arg1)->GetBound(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_VertexPool_Find(void * jarg1, float* jarg2) {
  long long jresult ;
  Vixen::VertexPool *arg1 = (Vixen::VertexPool *) 0 ;
  float *arg2 = (float *) 0 ;
  intptr result;
  
  arg1 = (Vixen::VertexPool *)jarg1; 
  arg2 = jarg2;
  result = (intptr)((Vixen::VertexPool const *)arg1)->Find((float const *)arg2);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_VertexPool_AddVertices(void * jarg1, float* jarg2, long long jarg3) {
  long long jresult ;
  Vixen::VertexPool *arg1 = (Vixen::VertexPool *) 0 ;
  float *arg2 = (float *) 0 ;
  intptr arg3 ;
  intptr result;
  
  arg1 = (Vixen::VertexPool *)jarg1; 
  arg2 = jarg2;
  arg3 = (intptr)jarg3; 
  result = (intptr)(arg1)->AddVertices((float const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VertexPool_PadVertices(void * jarg1, float* jarg2, long long jarg3, long long jarg4) {
  void * jresult ;
  Vixen::VertexPool *arg1 = (Vixen::VertexPool *) 0 ;
  float *arg2 = (float *) 0 ;
  intptr arg3 ;
  intptr arg4 ;
  float *result = 0 ;
  
  arg1 = (Vixen::VertexPool *)jarg1; 
  arg2 = jarg2;
  arg3 = (intptr)jarg3; 
  arg4 = (intptr)jarg4; 
  result = (float *)(arg1)->PadVertices((float const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VertexPool_Mul(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::VertexPool *arg1 = (Vixen::VertexPool *) 0 ;
  Vixen::Matrix *arg2 = 0 ;
  Vixen::VertexPool *result = 0 ;
  
  arg1 = (Vixen::VertexPool *)jarg1; 
  arg2 = (Vixen::Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Matrix const & type is null", 0);
    return 0;
  } 
  result = (Vixen::VertexPool *) &(arg1)->operator *=((Vixen::Matrix const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VertexArray__SWIG_0(int jarg1, long long jarg2) {
  void * jresult ;
  int arg1 ;
  intptr arg2 ;
  Vixen::VertexArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (Vixen::VertexArray *)new Vixen::VertexArray(arg1,arg2);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VertexArray__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  Vixen::VertexArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Vixen::VertexArray *)new Vixen::VertexArray(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VertexArray__SWIG_2() {
  void * jresult ;
  Vixen::VertexArray *result = 0 ;
  
  result = (Vixen::VertexArray *)new Vixen::VertexArray();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VertexArray__SWIG_3(char * jarg1, long long jarg2) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  intptr arg2 ;
  Vixen::VertexArray *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (Vixen::VertexArray *)new Vixen::VertexArray((TCHAR const *)arg1,arg2);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VertexArray__SWIG_4(char * jarg1) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  Vixen::VertexArray *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  result = (Vixen::VertexArray *)new Vixen::VertexArray((TCHAR const *)arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VertexArray__SWIG_5(void * jarg1) {
  void * jresult ;
  Vixen::VertexArray *arg1 = 0 ;
  Vixen::VertexArray *result = 0 ;
  
  arg1 = (Vixen::VertexArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::VertexArray const & type is null", 0);
    return 0;
  } 
  result = (Vixen::VertexArray *)new Vixen::VertexArray((Vixen::VertexArray const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VertexArray_VertexAlloc_set(void * jarg1) {
  Vixen::Core::Allocator *arg1 = (Vixen::Core::Allocator *) 0 ;
  
  arg1 = (Vixen::Core::Allocator *)jarg1; 
  Vixen::VertexArray::VertexAlloc = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VertexArray_VertexAlloc_get() {
  void * jresult ;
  Vixen::Core::Allocator *result = 0 ;
  
  result = (Vixen::Core::Allocator *)Vixen::VertexArray::VertexAlloc;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VertexArray_getitem(void * jarg1, long long jarg2, float* jarg3) {
  Vixen::VertexArray *arg1 = (Vixen::VertexArray *) 0 ;
  long long arg2 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (Vixen::VertexArray *)jarg1; 
  arg2 = (long long)jarg2; 
  arg3 = jarg3;
  try {
    Vixen_VertexArray_getitem(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VertexArray_setitem(void * jarg1, long long jarg2, float* jarg3) {
  Vixen::VertexArray *arg1 = (Vixen::VertexArray *) 0 ;
  long long arg2 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (Vixen::VertexArray *)jarg1; 
  arg2 = (long long)jarg2; 
  arg3 = jarg3;
  try {
    Vixen_VertexArray_setitem(arg1,arg2,(float const *)arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return ; 
  }
  
  
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_VertexArray_LastIndexOf(void * jarg1, float* jarg2) {
  int jresult ;
  Vixen::VertexArray *arg1 = (Vixen::VertexArray *) 0 ;
  float *arg2 = (float *) 0 ;
  int result;
  
  arg1 = (Vixen::VertexArray *)jarg1; 
  arg2 = jarg2;
  try {
    result = (int)Vixen_VertexArray_LastIndexOf(arg1,(float const *)arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return 0; 
  }
  
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VertexArray_IndexOf(void * jarg1, float* jarg2) {
  int jresult ;
  Vixen::VertexArray *arg1 = (Vixen::VertexArray *) 0 ;
  float *arg2 = (float *) 0 ;
  int result;
  
  arg1 = (Vixen::VertexArray *)jarg1; 
  arg2 = jarg2;
  try {
    result = (int)Vixen_VertexArray_IndexOf(arg1,(float const *)arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::out_of_range exception thrown");
    return 0; 
  }
  
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VertexArray_Repeat(float* jarg1, int jarg2) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  Vixen::VertexArray *result = 0 ;
  
  arg1 = jarg1;
  arg2 = (int)jarg2; 
  try {
    result = (Vixen::VertexArray *)Vixen_VertexArray_Repeat((float const *)arg1,arg2);
  }
  catch(std::invalid_argument &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::invalid_argument exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VertexArray_Insert(void * jarg1, int jarg2, float* jarg3) {
  Vixen::VertexArray *arg1 = (Vixen::VertexArray *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (Vixen::VertexArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3;
  try {
    Vixen_VertexArray_Insert(arg1,arg2,arg3);
  }
  catch(std::invalid_argument &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::invalid_argument exception thrown");
    return ; 
  }
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VertexArray_InsertRange(void * jarg1, int jarg2, float* jarg3) {
  Vixen::VertexArray *arg1 = (Vixen::VertexArray *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (Vixen::VertexArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3;
  try {
    Vixen_VertexArray_InsertRange(arg1,arg2,(float const *)arg3);
  }
  catch(std::invalid_argument &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::invalid_argument exception thrown");
    return ; 
  }
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VertexArray_RemoveElem(void * jarg1, int jarg2) {
  Vixen::VertexArray *arg1 = (Vixen::VertexArray *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::VertexArray *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    Vixen_VertexArray_RemoveElem(arg1,arg2);
  }
  catch(std::invalid_argument &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::invalid_argument exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VertexArray_RemoveAt(void * jarg1, int jarg2) {
  Vixen::VertexArray *arg1 = (Vixen::VertexArray *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::VertexArray *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    Vixen_VertexArray_RemoveAt(arg1,arg2);
  }
  catch(std::invalid_argument &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::invalid_argument exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VertexArray_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  Vixen::VertexArray *arg1 = (Vixen::VertexArray *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Vixen::VertexArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    Vixen_VertexArray_RemoveRange(arg1,arg2,arg3);
  }
  catch(std::invalid_argument &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::invalid_argument exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VertexArray_Reverse(void * jarg1, long jarg2, long jarg3) {
  Vixen::VertexArray *arg1 = (Vixen::VertexArray *) 0 ;
  long arg2 ;
  long arg3 ;
  
  arg1 = (Vixen::VertexArray *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  try {
    Vixen_VertexArray_Reverse(arg1,arg2,arg3);
  }
  catch(std::invalid_argument &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::invalid_argument exception thrown");
    return ; 
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VertexArray_Remove(void * jarg1, float* jarg2) {
  unsigned int jresult ;
  Vixen::VertexArray *arg1 = (Vixen::VertexArray *) 0 ;
  float *arg2 = (float *) 0 ;
  bool result;
  
  arg1 = (Vixen::VertexArray *)jarg1; 
  arg2 = jarg2;
  try {
    result = (bool)Vixen_VertexArray_Remove(arg1,(float const *)arg2);
  }
  catch(std::invalid_argument &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ std::invalid_argument exception thrown");
    return 0; 
  }
  
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VertexArray_Style_set(void * jarg1, int jarg2) {
  Vixen::VertexArray *arg1 = (Vixen::VertexArray *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::VertexArray *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_VertexArray_Style_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VertexArray_Style_get(void * jarg1) {
  int jresult ;
  Vixen::VertexArray *arg1 = (Vixen::VertexArray *) 0 ;
  int result;
  
  arg1 = (Vixen::VertexArray *)jarg1; 
  result = (int)Vixen_VertexArray_Style_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VertexArray_VertexSize_set(void * jarg1, int jarg2) {
  Vixen::VertexArray *arg1 = (Vixen::VertexArray *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::VertexArray *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_VertexArray_VertexSize_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VertexArray_VertexSize_get(void * jarg1) {
  int jresult ;
  Vixen::VertexArray *arg1 = (Vixen::VertexArray *) 0 ;
  int result;
  
  arg1 = (Vixen::VertexArray *)jarg1; 
  result = (int)Vixen_VertexArray_VertexSize_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VertexArray_VertexCount_set(void * jarg1, long long jarg2) {
  Vixen::VertexArray *arg1 = (Vixen::VertexArray *) 0 ;
  long long arg2 ;
  
  arg1 = (Vixen::VertexArray *)jarg1; 
  arg2 = (long long)jarg2; 
  Vixen_VertexArray_VertexCount_set(arg1,arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_VertexArray_VertexCount_get(void * jarg1) {
  long long jresult ;
  Vixen::VertexArray *arg1 = (Vixen::VertexArray *) 0 ;
  long long result;
  
  arg1 = (Vixen::VertexArray *)jarg1; 
  result = (long long)Vixen_VertexArray_VertexCount_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VertexArray_MaxVerts_set(void * jarg1, long long jarg2) {
  Vixen::VertexArray *arg1 = (Vixen::VertexArray *) 0 ;
  long long arg2 ;
  
  arg1 = (Vixen::VertexArray *)jarg1; 
  arg2 = (long long)jarg2; 
  Vixen_VertexArray_MaxVerts_set(arg1,arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_VertexArray_MaxVerts_get(void * jarg1) {
  long long jresult ;
  Vixen::VertexArray *arg1 = (Vixen::VertexArray *) 0 ;
  long long result;
  
  arg1 = (Vixen::VertexArray *)jarg1; 
  result = (long long)Vixen_VertexArray_MaxVerts_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VertexArray(void * jarg1) {
  Vixen::VertexArray *arg1 = (Vixen::VertexArray *) 0 ;
  
  arg1 = (Vixen::VertexArray *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Geometry__SWIG_0() {
  void * jresult ;
  Vixen::Geometry *result = 0 ;
  
  result = (Vixen::Geometry *)new Vixen::Geometry();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Geometry__SWIG_1(void * jarg1) {
  void * jresult ;
  Vixen::Geometry *arg1 = 0 ;
  Vixen::Geometry *result = 0 ;
  
  arg1 = (Vixen::Geometry *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Geometry const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Geometry *)new Vixen::Geometry((Vixen::Geometry const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geometry_Touch(void * jarg1) {
  Vixen::Geometry *arg1 = (Vixen::Geometry *) 0 ;
  
  arg1 = (Vixen::Geometry *)jarg1; 
  (arg1)->Touch();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geometry_Empty(void * jarg1) {
  Vixen::Geometry *arg1 = (Vixen::Geometry *) 0 ;
  
  arg1 = (Vixen::Geometry *)jarg1; 
  (arg1)->Empty();
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Geometry_GetNumFaces(void * jarg1) {
  long long jresult ;
  Vixen::Geometry *arg1 = (Vixen::Geometry *) 0 ;
  intptr result;
  
  arg1 = (Vixen::Geometry *)jarg1; 
  result = (intptr)((Vixen::Geometry const *)arg1)->GetNumFaces();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Geometry_GetNumVtx(void * jarg1) {
  long long jresult ;
  Vixen::Geometry *arg1 = (Vixen::Geometry *) 0 ;
  intptr result;
  
  arg1 = (Vixen::Geometry *)jarg1; 
  result = (intptr)((Vixen::Geometry const *)arg1)->GetNumVtx();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Geometry_GetBound(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Geometry *arg1 = (Vixen::Geometry *) 0 ;
  Vixen::Box3 *arg2 = (Vixen::Box3 *) 0 ;
  bool result;
  
  arg1 = (Vixen::Geometry *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2; 
  result = (bool)((Vixen::Geometry const *)arg1)->GetBound(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_Mul(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Geometry *arg1 = (Vixen::Geometry *) 0 ;
  Vixen::Matrix *arg2 = 0 ;
  Vixen::Geometry *result = 0 ;
  
  arg1 = (Vixen::Geometry *)jarg1; 
  arg2 = (Vixen::Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Matrix const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Geometry *) &(arg1)->operator *=((Vixen::Matrix const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Geometry(void * jarg1) {
  Vixen::Geometry *arg1 = (Vixen::Geometry *) 0 ;
  
  arg1 = (Vixen::Geometry *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Mesh__SWIG_0() {
  void * jresult ;
  Vixen::Mesh *result = 0 ;
  
  result = (Vixen::Mesh *)new Vixen::Mesh();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Mesh__SWIG_1(int jarg1, long long jarg2) {
  void * jresult ;
  int arg1 ;
  intptr arg2 ;
  Vixen::Mesh *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (Vixen::Mesh *)new Vixen::Mesh(arg1,arg2);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Mesh__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  Vixen::Mesh *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Vixen::Mesh *)new Vixen::Mesh(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Mesh__SWIG_3(char * jarg1, long long jarg2) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  intptr arg2 ;
  Vixen::Mesh *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (Vixen::Mesh *)new Vixen::Mesh((TCHAR const *)arg1,arg2);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Mesh__SWIG_4(char * jarg1) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  Vixen::Mesh *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  result = (Vixen::Mesh *)new Vixen::Mesh((TCHAR const *)arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Mesh__SWIG_5(void * jarg1) {
  void * jresult ;
  Vixen::Mesh *arg1 = 0 ;
  Vixen::Mesh *result = 0 ;
  
  arg1 = (Vixen::Mesh *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Mesh const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Mesh *)new Vixen::Mesh((Vixen::Mesh const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_GetStyle(void * jarg1) {
  int jresult ;
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  int result;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  result = (int)((Vixen::Mesh const *)arg1)->GetStyle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mesh_SetMaxVtx(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  intptr arg2 ;
  bool result;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (bool)(arg1)->SetMaxVtx(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mesh_GetIndex(void * jarg1, long long jarg2) {
  long long jresult ;
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  intptr arg2 ;
  intptr result;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (intptr)((Vixen::Mesh const *)arg1)->GetIndex(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mesh_SetIndex(void * jarg1, long long jarg2, long long jarg3) {
  unsigned int jresult ;
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  intptr arg2 ;
  intptr arg3 ;
  bool result;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  arg2 = (intptr)jarg2; 
  arg3 = (intptr)jarg3; 
  result = (bool)(arg1)->SetIndex(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mesh_AddIndex(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  intptr arg2 ;
  bool result;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (bool)(arg1)->AddIndex(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mesh_AddIndices(void * jarg1, int* jarg2, long long jarg3) {
  long long jresult ;
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  int32 *arg2 = (int32 *) 0 ;
  intptr arg3 ;
  intptr result;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  arg2 = jarg2;
  arg3 = (intptr)jarg3; 
  result = (intptr)(arg1)->AddIndices((int32 const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mesh_AddVertices(void * jarg1, float* jarg2, long long jarg3) {
  long long jresult ;
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  float *arg2 = (float *) 0 ;
  intptr arg3 ;
  intptr result;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  arg2 = jarg2;
  arg3 = (intptr)jarg3; 
  result = (intptr)(arg1)->AddVertices((float const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_Vertices_set(void * jarg1, void * jarg2) {
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  Vixen::VertexArray *arg2 = (Vixen::VertexArray *) 0 ;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  arg2 = (Vixen::VertexArray *)jarg2; 
  Vixen_Mesh_Vertices_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_Vertices_get(void * jarg1) {
  void * jresult ;
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  Vixen::VertexArray *result = 0 ;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  result = (Vixen::VertexArray *)Vixen_Mesh_Vertices_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_Indices_set(void * jarg1, void * jarg2) {
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  Vixen::IndexArray *arg2 = (Vixen::IndexArray *) 0 ;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  arg2 = (Vixen::IndexArray *)jarg2; 
  Vixen_Mesh_Indices_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_Indices_get(void * jarg1) {
  void * jresult ;
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  Vixen::IndexArray *result = 0 ;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  result = (Vixen::IndexArray *)Vixen_Mesh_Indices_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_VertexSize_set(void * jarg1, int jarg2) {
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_Mesh_VertexSize_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_VertexSize_get(void * jarg1) {
  int jresult ;
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  int result;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  result = (int)Vixen_Mesh_VertexSize_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_IndexCount_set(void * jarg1, long long jarg2) {
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  long long arg2 ;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  arg2 = (long long)jarg2; 
  Vixen_Mesh_IndexCount_set(arg1,arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mesh_IndexCount_get(void * jarg1) {
  long long jresult ;
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  long long result;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  result = (long long)Vixen_Mesh_IndexCount_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_VertexCount_set(void * jarg1, long long jarg2) {
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  long long arg2 ;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  arg2 = (long long)jarg2; 
  Vixen_Mesh_VertexCount_set(arg1,arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mesh_VertexCount_get(void * jarg1) {
  long long jresult ;
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  long long result;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  result = (long long)Vixen_Mesh_VertexCount_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_StartVertex_set(void * jarg1, long long jarg2) {
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  long long arg2 ;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  arg2 = (long long)jarg2; 
  Vixen_Mesh_StartVertex_set(arg1,arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mesh_StartVertex_get(void * jarg1) {
  long long jresult ;
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  long long result;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  result = (long long)Vixen_Mesh_StartVertex_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_EndVertex_set(void * jarg1, long long jarg2) {
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  long long arg2 ;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  arg2 = (long long)jarg2; 
  Vixen_Mesh_EndVertex_set(arg1,arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mesh_EndVertex_get(void * jarg1) {
  long long jresult ;
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  long long result;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  result = (long long)Vixen_Mesh_EndVertex_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Mesh(void * jarg1) {
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TriMesh__SWIG_0(int jarg1, long long jarg2) {
  void * jresult ;
  int arg1 ;
  intptr arg2 ;
  Vixen::TriMesh *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (Vixen::TriMesh *)new Vixen::TriMesh(arg1,arg2);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TriMesh__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  Vixen::TriMesh *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Vixen::TriMesh *)new Vixen::TriMesh(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TriMesh__SWIG_2() {
  void * jresult ;
  Vixen::TriMesh *result = 0 ;
  
  result = (Vixen::TriMesh *)new Vixen::TriMesh();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TriMesh__SWIG_3(char * jarg1, long long jarg2) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  intptr arg2 ;
  Vixen::TriMesh *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  arg2 = (intptr)jarg2; 
  result = (Vixen::TriMesh *)new Vixen::TriMesh((TCHAR const *)arg1,arg2);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TriMesh__SWIG_4(char * jarg1) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  Vixen::TriMesh *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  result = (Vixen::TriMesh *)new Vixen::TriMesh((TCHAR const *)arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TriMesh__SWIG_5(void * jarg1) {
  void * jresult ;
  Vixen::TriMesh *arg1 = 0 ;
  Vixen::TriMesh *result = 0 ;
  
  arg1 = (Vixen::TriMesh *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::TriMesh const & type is null", 0);
    return 0;
  } 
  result = (Vixen::TriMesh *)new Vixen::TriMesh((Vixen::TriMesh const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TriMesh_MakeNormals__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Vixen::TriMesh *arg1 = (Vixen::TriMesh *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (Vixen::TriMesh *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->MakeNormals(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TriMesh_MakeNormals__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Vixen::TriMesh *arg1 = (Vixen::TriMesh *) 0 ;
  bool result;
  
  arg1 = (Vixen::TriMesh *)jarg1; 
  result = (bool)(arg1)->MakeNormals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TriMesh(void * jarg1) {
  Vixen::TriMesh *arg1 = (Vixen::TriMesh *) 0 ;
  
  arg1 = (Vixen::TriMesh *)jarg1; 
  arg1->Release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeoUtil_Rect__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  Vixen::TriMesh *arg1 = (Vixen::TriMesh *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (Vixen::TriMesh *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)Vixen::GeoUtil::Rect(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeoUtil_Rect__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  unsigned int jresult ;
  Vixen::TriMesh *arg1 = (Vixen::TriMesh *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (Vixen::TriMesh *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)Vixen::GeoUtil::Rect(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeoUtil_Rect__SWIG_2(void * jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  Vixen::TriMesh *arg1 = (Vixen::TriMesh *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (Vixen::TriMesh *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)Vixen::GeoUtil::Rect(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeoUtil_Rect__SWIG_3(void * jarg1, float jarg2) {
  unsigned int jresult ;
  Vixen::TriMesh *arg1 = (Vixen::TriMesh *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (Vixen::TriMesh *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)Vixen::GeoUtil::Rect(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeoUtil_Rect__SWIG_4(void * jarg1) {
  unsigned int jresult ;
  Vixen::TriMesh *arg1 = (Vixen::TriMesh *) 0 ;
  bool result;
  
  arg1 = (Vixen::TriMesh *)jarg1; 
  result = (bool)Vixen::GeoUtil::Rect(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeoUtil_Block(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::TriMesh *arg1 = (Vixen::TriMesh *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::TriMesh *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  result = (bool)Vixen::GeoUtil::Block(arg1,(Vixen::Vec3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeoUtil_QuadMesh(void * jarg1, int jarg2, int jarg3, float jarg4, long long jarg5) {
  unsigned int jresult ;
  Vixen::TriMesh *arg1 = (Vixen::TriMesh *) 0 ;
  int arg2 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  intptr arg5 ;
  bool result;
  
  arg1 = (Vixen::TriMesh *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)&jarg4; 
  arg5 = (intptr)jarg5; 
  result = (bool)Vixen::GeoUtil::QuadMesh(arg1,arg2,arg3,(float const *)arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeoUtil_Torus(void * jarg1, float jarg2, float jarg3, int jarg4) {
  unsigned int jresult ;
  Vixen::TriMesh *arg1 = (Vixen::TriMesh *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (Vixen::TriMesh *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)Vixen::GeoUtil::Torus(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeoUtil_Cylinder(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, int jarg6) {
  unsigned int jresult ;
  Vixen::TriMesh *arg1 = (Vixen::TriMesh *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (Vixen::TriMesh *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)Vixen::GeoUtil::Cylinder(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeoUtil_Ellipsoid(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  Vixen::TriMesh *arg1 = (Vixen::TriMesh *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (Vixen::TriMesh *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)Vixen::GeoUtil::Ellipsoid(arg1,(Vixen::Vec3 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeoUtil_IcosaSphere(void * jarg1, float jarg2, int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Vixen::TriMesh *arg1 = (Vixen::TriMesh *) 0 ;
  float arg2 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (Vixen::TriMesh *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)Vixen::GeoUtil::IcosaSphere(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GeoUtil() {
  void * jresult ;
  Vixen::GeoUtil *result = 0 ;
  
  result = (Vixen::GeoUtil *)new Vixen::GeoUtil();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GeoUtil(void * jarg1) {
  Vixen::GeoUtil *arg1 = (Vixen::GeoUtil *) 0 ;
  
  arg1 = (Vixen::GeoUtil *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Shape__SWIG_0() {
  void * jresult ;
  Vixen::Shape *result = 0 ;
  
  result = (Vixen::Shape *)new Vixen::Shape();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Shape__SWIG_1(void * jarg1) {
  void * jresult ;
  Vixen::Shape *arg1 = 0 ;
  Vixen::Shape *result = 0 ;
  
  arg1 = (Vixen::Shape *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Shape const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Shape *)new Vixen::Shape((Vixen::Shape const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shape_Geometry_set(void * jarg1, void * jarg2) {
  Vixen::Shape *arg1 = (Vixen::Shape *) 0 ;
  Vixen::Geometry *arg2 = (Vixen::Geometry *) 0 ;
  
  arg1 = (Vixen::Shape *)jarg1; 
  arg2 = (Vixen::Geometry *)jarg2; 
  Vixen_Shape_Geometry_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Shape_Geometry_get(void * jarg1) {
  void * jresult ;
  Vixen::Shape *arg1 = (Vixen::Shape *) 0 ;
  Vixen::Geometry *result = 0 ;
  
  arg1 = (Vixen::Shape *)jarg1; 
  result = (Vixen::Geometry *)Vixen_Shape_Geometry_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shape_Appearance_set(void * jarg1, void * jarg2) {
  Vixen::Shape *arg1 = (Vixen::Shape *) 0 ;
  Vixen::Appearance *arg2 = (Vixen::Appearance *) 0 ;
  
  arg1 = (Vixen::Shape *)jarg1; 
  arg2 = (Vixen::Appearance *)jarg2; 
  Vixen_Shape_Appearance_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Shape_Appearance_get(void * jarg1) {
  void * jresult ;
  Vixen::Shape *arg1 = (Vixen::Shape *) 0 ;
  Vixen::Appearance *result = 0 ;
  
  arg1 = (Vixen::Shape *)jarg1; 
  result = (Vixen::Appearance *)Vixen_Shape_Appearance_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Shape(void * jarg1) {
  Vixen::Shape *arg1 = (Vixen::Shape *) 0 ;
  
  arg1 = (Vixen::Shape *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Light__SWIG_0(char * jarg1, char * jarg2) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::Light *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  result = (Vixen::Light *)new Vixen::Light((TCHAR const *)arg1,(TCHAR const *)arg2);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Light__SWIG_1(char * jarg1) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  Vixen::Light *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  result = (Vixen::Light *)new Vixen::Light((TCHAR const *)arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Light__SWIG_2() {
  void * jresult ;
  Vixen::Light *result = 0 ;
  
  result = (Vixen::Light *)new Vixen::Light();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Light(void * jarg1) {
  Vixen::Light *arg1 = (Vixen::Light *) 0 ;
  
  arg1 = (Vixen::Light *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_SetDecay(void * jarg1, int jarg2) {
  Vixen::Light *arg1 = (Vixen::Light *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Light *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDecay(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light_GetDecay(void * jarg1) {
  int jresult ;
  Vixen::Light *arg1 = (Vixen::Light *) 0 ;
  int result;
  
  arg1 = (Vixen::Light *)jarg1; 
  result = (int)((Vixen::Light const *)arg1)->GetDecay();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_Attach(void * jarg1, void * jarg2) {
  Vixen::Light *arg1 = (Vixen::Light *) 0 ;
  Vixen::Scene *arg2 = (Vixen::Scene *) 0 ;
  
  arg1 = (Vixen::Light *)jarg1; 
  arg2 = (Vixen::Scene *)jarg2; 
  (arg1)->Attach(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Light_GetDataBuffer__SWIG_0(void * jarg1) {
  void * jresult ;
  Vixen::Light *arg1 = (Vixen::Light *) 0 ;
  Vixen::DeviceBuffer *result = 0 ;
  
  arg1 = (Vixen::Light *)jarg1; 
  result = (Vixen::DeviceBuffer *)(arg1)->GetDataBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Light_GetCenter__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::Light *arg1 = (Vixen::Light *) 0 ;
  int arg2 ;
  Vixen::Vec3 result;
  
  arg1 = (Vixen::Light *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((Vixen::Light const *)arg1)->GetCenter(arg2);
  jresult = new Vixen::Vec3((const Vixen::Vec3 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Light_GetCenter__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  Vixen::Light *arg1 = (Vixen::Light *) 0 ;
  Vixen::Vec3 *arg2 = (Vixen::Vec3 *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (Vixen::Light *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((Vixen::Light const *)arg1)->GetCenter(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Light_GetCenter__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Light *arg1 = (Vixen::Light *) 0 ;
  Vixen::Vec3 *arg2 = (Vixen::Vec3 *) 0 ;
  bool result;
  
  arg1 = (Vixen::Light *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2; 
  result = (bool)((Vixen::Light const *)arg1)->GetCenter(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light_NONE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Light::NONE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light_INVERSE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Light::INVERSE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light_INVERSE_SQUARE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Light::INVERSE_SQUARE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_Color_set(void * jarg1, void * jarg2) {
  Vixen::Light *arg1 = (Vixen::Light *) 0 ;
  Vixen::Col4 *arg2 = 0 ;
  
  arg1 = (Vixen::Light *)jarg1; 
  arg2 = (Vixen::Col4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Col4 const & type is null", 0);
    return ;
  } 
  Vixen_Light_Color_set(arg1,(Vixen::Col4 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Light_Color_get(void * jarg1) {
  void * jresult ;
  Vixen::Light *arg1 = (Vixen::Light *) 0 ;
  Vixen::Col4 *result = 0 ;
  
  arg1 = (Vixen::Light *)jarg1; 
  result = (Vixen::Col4 *) &Vixen_Light_Color_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_Radius_set(void * jarg1, float jarg2) {
  Vixen::Light *arg1 = (Vixen::Light *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Light *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Light_Radius_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Light_Radius_get(void * jarg1) {
  float jresult ;
  Vixen::Light *arg1 = (Vixen::Light *) 0 ;
  float result;
  
  arg1 = (Vixen::Light *)jarg1; 
  result = (float)Vixen_Light_Radius_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DirectLight() {
  void * jresult ;
  Vixen::DirectLight *result = 0 ;
  
  result = (Vixen::DirectLight *)new Vixen::DirectLight();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DirectLight_GetCenter__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::DirectLight *arg1 = (Vixen::DirectLight *) 0 ;
  int arg2 ;
  Vixen::Vec3 result;
  
  arg1 = (Vixen::DirectLight *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((Vixen::DirectLight const *)arg1)->GetCenter(arg2);
  jresult = new Vixen::Vec3((const Vixen::Vec3 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DirectLight_GetCenter__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  Vixen::DirectLight *arg1 = (Vixen::DirectLight *) 0 ;
  Vixen::Vec3 *arg2 = (Vixen::Vec3 *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (Vixen::DirectLight *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((Vixen::DirectLight const *)arg1)->GetCenter(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DirectLight_GetCenter__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::DirectLight *arg1 = (Vixen::DirectLight *) 0 ;
  Vixen::Vec3 *arg2 = (Vixen::Vec3 *) 0 ;
  bool result;
  
  arg1 = (Vixen::DirectLight *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2; 
  result = (bool)((Vixen::DirectLight const *)arg1)->GetCenter(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DirectLight(void * jarg1) {
  Vixen::DirectLight *arg1 = (Vixen::DirectLight *) 0 ;
  
  arg1 = (Vixen::DirectLight *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AmbientLight__SWIG_0() {
  void * jresult ;
  Vixen::AmbientLight *result = 0 ;
  
  result = (Vixen::AmbientLight *)new Vixen::AmbientLight();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AmbientLight__SWIG_1(void * jarg1) {
  void * jresult ;
  Vixen::Col4 *arg1 = 0 ;
  Vixen::AmbientLight *result = 0 ;
  
  arg1 = (Vixen::Col4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Col4 const & type is null", 0);
    return 0;
  } 
  result = (Vixen::AmbientLight *)new Vixen::AmbientLight((Vixen::Col4 const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AmbientLight(void * jarg1) {
  Vixen::AmbientLight *arg1 = (Vixen::AmbientLight *) 0 ;
  
  arg1 = (Vixen::AmbientLight *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpotLight() {
  void * jresult ;
  Vixen::SpotLight *result = 0 ;
  
  result = (Vixen::SpotLight *)new Vixen::SpotLight();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpotLight_OuterAngle_set(void * jarg1, float jarg2) {
  Vixen::SpotLight *arg1 = (Vixen::SpotLight *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::SpotLight *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_SpotLight_OuterAngle_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SpotLight_OuterAngle_get(void * jarg1) {
  float jresult ;
  Vixen::SpotLight *arg1 = (Vixen::SpotLight *) 0 ;
  float result;
  
  arg1 = (Vixen::SpotLight *)jarg1; 
  result = (float)Vixen_SpotLight_OuterAngle_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpotLight_InnerAngle_set(void * jarg1, float jarg2) {
  Vixen::SpotLight *arg1 = (Vixen::SpotLight *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::SpotLight *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_SpotLight_InnerAngle_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SpotLight_InnerAngle_get(void * jarg1) {
  float jresult ;
  Vixen::SpotLight *arg1 = (Vixen::SpotLight *) 0 ;
  float result;
  
  arg1 = (Vixen::SpotLight *)jarg1; 
  result = (float)Vixen_SpotLight_InnerAngle_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpotLight_Decay_set(void * jarg1, int jarg2) {
  Vixen::SpotLight *arg1 = (Vixen::SpotLight *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::SpotLight *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_SpotLight_Decay_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpotLight_Decay_get(void * jarg1) {
  int jresult ;
  Vixen::SpotLight *arg1 = (Vixen::SpotLight *) 0 ;
  int result;
  
  arg1 = (Vixen::SpotLight *)jarg1; 
  result = (int)Vixen_SpotLight_Decay_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpotLight(void * jarg1) {
  Vixen::SpotLight *arg1 = (Vixen::SpotLight *) 0 ;
  
  arg1 = (Vixen::SpotLight *)jarg1; 
  arg1->Release();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_CYCLE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Engine::CYCLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_CONTROL_CHILDREN_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Engine::CONTROL_CHILDREN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_CHILDREN_FIRST_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Engine::CHILDREN_FIRST;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_REVERSE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Engine::REVERSE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_DATA_PARALLEL_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Engine::DATA_PARALLEL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_ACTIVE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Engine::ACTIVE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_PING_PONG_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Engine::PING_PONG;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_TASK_PARALLEL_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Engine::TASK_PARALLEL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_RECORD_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Engine::RECORD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_BLEND_TO_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Engine::BLEND_TO;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_BLEND_BETWEEN_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Engine::BLEND_BETWEEN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_USER_AVAILABLE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Engine::USER_AVAILABLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_CYCLE_REVERSE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Engine::CYCLE_REVERSE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_CYCLE_PING_PONG_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Engine::CYCLE_PING_PONG;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_CYCLE_REVERSE_PING_PONG_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Engine::CYCLE_REVERSE_PING_PONG;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_DONE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Engine::DONE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_IDLE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Engine::IDLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_RUNNING_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Engine::RUNNING;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_RELATIVE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Engine::RELATIVE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_ONLYME_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Engine::ONLYME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine_Parent(void * jarg1) {
  void * jresult ;
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  Vixen::Engine *result = 0 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  result = (Vixen::Engine *)(arg1)->Parent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine_First(void * jarg1) {
  void * jresult ;
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  Vixen::Engine *result = 0 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  result = (Vixen::Engine *)(arg1)->First();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine_Last(void * jarg1) {
  void * jresult ;
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  Vixen::Engine *result = 0 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  result = (Vixen::Engine *)(arg1)->Last();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine_Next(void * jarg1) {
  void * jresult ;
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  Vixen::Engine *result = 0 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  result = (Vixen::Engine *)(arg1)->Next();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine_GetAt(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  int arg2 ;
  Vixen::Engine *result = 0 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Vixen::Engine *)(arg1)->GetAt(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Engine__SWIG_0() {
  void * jresult ;
  Vixen::Engine *result = 0 ;
  
  result = (Vixen::Engine *)new Vixen::Engine();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Engine__SWIG_1(void * jarg1) {
  void * jresult ;
  Vixen::Engine *arg1 = 0 ;
  Vixen::Engine *result = 0 ;
  
  arg1 = (Vixen::Engine *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Engine const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Engine *)new Vixen::Engine((Vixen::Engine const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Engine(void * jarg1) {
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg1->Release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Engine_IsRunning(void * jarg1) {
  unsigned int jresult ;
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  bool result;
  
  arg1 = (Vixen::Engine *)jarg1; 
  result = (bool)((Vixen::Engine const *)arg1)->IsRunning();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_Enable__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Enable(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_Enable__SWIG_1(void * jarg1, int jarg2) {
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Enable(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_Disable__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Disable(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_Disable__SWIG_1(void * jarg1, int jarg2) {
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Disable(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_Start__SWIG_0(void * jarg1, int jarg2) {
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Start(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_Start__SWIG_1(void * jarg1) {
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  (arg1)->Start();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_Stop__SWIG_0(void * jarg1, int jarg2) {
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Stop(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_Stop__SWIG_1(void * jarg1) {
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  (arg1)->Stop();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine_FindTarget(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  Vixen::SharedObj *arg2 = (Vixen::SharedObj *) 0 ;
  Vixen::Engine *result = 0 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg2 = (Vixen::SharedObj *)jarg2; 
  result = (Vixen::Engine *)((Vixen::Engine const *)arg1)->FindTarget((Vixen::SharedObj const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_Compute(void * jarg1, float jarg2) {
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Compute(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_ComputeChildren__SWIG_0(void * jarg1, float jarg2, int jarg3) {
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  float arg2 ;
  int arg3 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->ComputeChildren(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_ComputeChildren__SWIG_1(void * jarg1, float jarg2) {
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->ComputeChildren(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Engine_ComputeTime(void * jarg1, float jarg2) {
  float jresult ;
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  float arg2 ;
  float result;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)(arg1)->ComputeTime(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_State_set(void * jarg1, int jarg2) {
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_Engine_State_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_State_get(void * jarg1) {
  int jresult ;
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  int result;
  
  arg1 = (Vixen::Engine *)jarg1; 
  result = (int)Vixen_Engine_State_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_Elapsed_set(void * jarg1, float jarg2) {
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Engine_Elapsed_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Engine_Elapsed_get(void * jarg1) {
  float jresult ;
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  float result;
  
  arg1 = (Vixen::Engine *)jarg1; 
  result = (float)Vixen_Engine_Elapsed_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_StopTime_set(void * jarg1, float jarg2) {
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Engine_StopTime_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Engine_StopTime_get(void * jarg1) {
  float jresult ;
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  float result;
  
  arg1 = (Vixen::Engine *)jarg1; 
  result = (float)Vixen_Engine_StopTime_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_Target_set(void * jarg1, void * jarg2) {
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  Vixen::SharedObj *arg2 = (Vixen::SharedObj *) 0 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg2 = (Vixen::SharedObj *)jarg2; 
  Vixen_Engine_Target_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine_Target_get(void * jarg1) {
  void * jresult ;
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  Vixen::SharedObj *result = 0 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  result = (Vixen::SharedObj *)Vixen_Engine_Target_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_StartTime_set(void * jarg1, float jarg2) {
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Engine_StartTime_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Engine_StartTime_get(void * jarg1) {
  float jresult ;
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  float result;
  
  arg1 = (Vixen::Engine *)jarg1; 
  result = (float)Vixen_Engine_StartTime_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_Control_set(void * jarg1, int jarg2) {
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_Engine_Control_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine_Control_get(void * jarg1) {
  int jresult ;
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  int result;
  
  arg1 = (Vixen::Engine *)jarg1; 
  result = (int)Vixen_Engine_Control_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_Speed_set(void * jarg1, float jarg2) {
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Engine_Speed_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Engine_Speed_get(void * jarg1) {
  float jresult ;
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  float result;
  
  arg1 = (Vixen::Engine *)jarg1; 
  result = (float)Vixen_Engine_Speed_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_Duration_set(void * jarg1, float jarg2) {
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Engine_Duration_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Engine_Duration_get(void * jarg1) {
  float jresult ;
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  float result;
  
  arg1 = (Vixen::Engine *)jarg1; 
  result = (float)Vixen_Engine_Duration_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_TimeOfs_set(void * jarg1, float jarg2) {
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Engine *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Engine_TimeOfs_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Engine_TimeOfs_get(void * jarg1) {
  float jresult ;
  Vixen::Engine *arg1 = (Vixen::Engine *) 0 ;
  float result;
  
  arg1 = (Vixen::Engine *)jarg1; 
  result = (float)Vixen_Engine_TimeOfs_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MouseEngine() {
  void * jresult ;
  Vixen::MouseEngine *result = 0 ;
  
  result = (Vixen::MouseEngine *)new Vixen::MouseEngine();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MouseEngine_OnMouse(void * jarg1, void * jarg2, unsigned int jarg3) {
  Vixen::MouseEngine *arg1 = (Vixen::MouseEngine *) 0 ;
  Vixen::Vec2 *arg2 = 0 ;
  uint32 arg3 ;
  
  arg1 = (Vixen::MouseEngine *)jarg1; 
  arg2 = (Vixen::Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec2 const & type is null", 0);
    return ;
  } 
  arg3 = (uint32)jarg3; 
  (arg1)->OnMouse((Vixen::Vec2 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MouseEngine(void * jarg1) {
  Vixen::MouseEngine *arg1 = (Vixen::MouseEngine *) 0 ;
  
  arg1 = (Vixen::MouseEngine *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Trigger__SWIG_0() {
  void * jresult ;
  Vixen::Trigger *result = 0 ;
  
  result = (Vixen::Trigger *)new Vixen::Trigger();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Trigger__SWIG_1(void * jarg1) {
  void * jresult ;
  Vixen::Trigger *arg1 = 0 ;
  Vixen::Trigger *result = 0 ;
  
  arg1 = (Vixen::Trigger *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Trigger const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Trigger *)new Vixen::Trigger((Vixen::Trigger const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Trigger_AddCollider(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Trigger *arg1 = (Vixen::Trigger *) 0 ;
  Vixen::Model *arg2 = (Vixen::Model *) 0 ;
  bool result;
  
  arg1 = (Vixen::Trigger *)jarg1; 
  arg2 = (Vixen::Model *)jarg2; 
  result = (bool)(arg1)->AddCollider((Vixen::Model const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Trigger_RemoveCollider(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Trigger *arg1 = (Vixen::Trigger *) 0 ;
  Vixen::Model *arg2 = (Vixen::Model *) 0 ;
  bool result;
  
  arg1 = (Vixen::Trigger *)jarg1; 
  arg2 = (Vixen::Model *)jarg2; 
  result = (bool)(arg1)->RemoveCollider((Vixen::Model const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Trigger_SetGeoSphere(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Trigger *arg1 = (Vixen::Trigger *) 0 ;
  Vixen::Sphere *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Trigger *)jarg1; 
  arg2 = (Vixen::Sphere *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Sphere const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetGeoSphere((Vixen::Sphere const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Trigger_SetGeoBox(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Trigger *arg1 = (Vixen::Trigger *) 0 ;
  Vixen::Box3 *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Trigger *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Box3 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetGeoBox((Vixen::Box3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Trigger_GetGeoSphere(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Trigger *arg1 = (Vixen::Trigger *) 0 ;
  Vixen::Sphere *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Trigger *)jarg1; 
  arg2 = (Vixen::Sphere *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Sphere & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Trigger const *)arg1)->GetGeoSphere(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Trigger_GetGeoBox(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Trigger *arg1 = (Vixen::Trigger *) 0 ;
  Vixen::Box3 *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Trigger *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Box3 & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Trigger const *)arg1)->GetGeoBox(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Trigger_SPHERE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Trigger::SPHERE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Trigger_BOX_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Trigger::BOX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Trigger_FIT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Trigger::FIT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Trigger_OUTSIDE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Trigger::OUTSIDE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Trigger_INSIDE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Trigger::INSIDE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Trigger_ENTER_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Trigger::ENTER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Trigger_LEAVE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Trigger::LEAVE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trigger_Options_set(void * jarg1, int jarg2) {
  Vixen::Trigger *arg1 = (Vixen::Trigger *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Trigger *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_Trigger_Options_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Trigger_Options_get(void * jarg1) {
  int jresult ;
  Vixen::Trigger *arg1 = (Vixen::Trigger *) 0 ;
  int result;
  
  arg1 = (Vixen::Trigger *)jarg1; 
  result = (int)Vixen_Trigger_Options_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trigger_Geometry_set(void * jarg1, void * jarg2) {
  Vixen::Trigger *arg1 = (Vixen::Trigger *) 0 ;
  Vixen::Model *arg2 = (Vixen::Model *) 0 ;
  
  arg1 = (Vixen::Trigger *)jarg1; 
  arg2 = (Vixen::Model *)jarg2; 
  Vixen_Trigger_Geometry_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Trigger_Geometry_get(void * jarg1) {
  void * jresult ;
  Vixen::Trigger *arg1 = (Vixen::Trigger *) 0 ;
  Vixen::Model *result = 0 ;
  
  arg1 = (Vixen::Trigger *)jarg1; 
  result = (Vixen::Model *)Vixen_Trigger_Geometry_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trigger_Colliders_set(void * jarg1, void * jarg2) {
  Vixen::Trigger *arg1 = (Vixen::Trigger *) 0 ;
  Vixen::SharedObj *arg2 = (Vixen::SharedObj *) 0 ;
  
  arg1 = (Vixen::Trigger *)jarg1; 
  arg2 = (Vixen::SharedObj *)jarg2; 
  Vixen_Trigger_Colliders_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Trigger_Colliders_get(void * jarg1) {
  void * jresult ;
  Vixen::Trigger *arg1 = (Vixen::Trigger *) 0 ;
  Vixen::SharedObj *result = 0 ;
  
  arg1 = (Vixen::Trigger *)jarg1; 
  result = (Vixen::SharedObj *)Vixen_Trigger_Colliders_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Trigger(void * jarg1) {
  Vixen::Trigger *arg1 = (Vixen::Trigger *) 0 ;
  
  arg1 = (Vixen::Trigger *)jarg1; 
  arg1->Release();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Evaluator_UNKNOWN_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Evaluator::UNKNOWN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Evaluator_POSITION_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Evaluator::POSITION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Evaluator_ROTATION_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Evaluator::ROTATION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Evaluator_SCALE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Evaluator::SCALE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Evaluator_LOOK_ROTATION_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Evaluator::LOOK_ROTATION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Evaluator_LOCAL_POSITION_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Evaluator::LOCAL_POSITION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Evaluator_ALPHA_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Evaluator::ALPHA;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Evaluator_XPOS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Evaluator::XPOS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Evaluator_YPOS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Evaluator::YPOS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Evaluator_ZPOS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Evaluator::ZPOS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Evaluator_COLOR_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Evaluator::COLOR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Evaluator_FACE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Evaluator::FACE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Evaluator_LAST_DEST_TYPE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Evaluator::LAST_DEST_TYPE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Evaluator_STEP_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Evaluator::STEP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Evaluator_LINEAR_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Evaluator::LINEAR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Evaluator_QSTEP_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Evaluator::QSTEP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Evaluator_SLERP_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Evaluator::SLERP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Evaluator_MAX_KEY_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Evaluator::MAX_KEY_SIZE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Evaluator() {
  void * jresult ;
  Vixen::Evaluator *result = 0 ;
  
  result = (Vixen::Evaluator *)new Vixen::Evaluator();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Evaluator_ClearDest(void * jarg1) {
  Vixen::Evaluator *arg1 = (Vixen::Evaluator *) 0 ;
  
  arg1 = (Vixen::Evaluator *)jarg1; 
  (arg1)->ClearDest();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Evaluator_DestType_set(void * jarg1, int jarg2) {
  Vixen::Evaluator *arg1 = (Vixen::Evaluator *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Evaluator *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_Evaluator_DestType_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Evaluator_DestType_get(void * jarg1) {
  int jresult ;
  Vixen::Evaluator *arg1 = (Vixen::Evaluator *) 0 ;
  int result;
  
  arg1 = (Vixen::Evaluator *)jarg1; 
  result = (int)Vixen_Evaluator_DestType_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Evaluator_ValSize_set(void * jarg1, int jarg2) {
  Vixen::Evaluator *arg1 = (Vixen::Evaluator *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Evaluator *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_Evaluator_ValSize_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Evaluator_ValSize_get(void * jarg1) {
  int jresult ;
  Vixen::Evaluator *arg1 = (Vixen::Evaluator *) 0 ;
  int result;
  
  arg1 = (Vixen::Evaluator *)jarg1; 
  result = (int)Vixen_Evaluator_ValSize_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Evaluator_Alpha_set(void * jarg1, float jarg2) {
  Vixen::Evaluator *arg1 = (Vixen::Evaluator *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Evaluator *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Evaluator_Alpha_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Evaluator_Alpha_get(void * jarg1) {
  float jresult ;
  Vixen::Evaluator *arg1 = (Vixen::Evaluator *) 0 ;
  float result;
  
  arg1 = (Vixen::Evaluator *)jarg1; 
  result = (float)Vixen_Evaluator_Alpha_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Evaluator(void * jarg1) {
  Vixen::Evaluator *arg1 = (Vixen::Evaluator *) 0 ;
  
  arg1 = (Vixen::Evaluator *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vec3Blender() {
  void * jresult ;
  Vixen::Vec3Blender *result = 0 ;
  
  result = (Vixen::Vec3Blender *)new Vixen::Vec3Blender();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Blender_GetXInput(void * jarg1) {
  void * jresult ;
  Vixen::Vec3Blender *arg1 = (Vixen::Vec3Blender *) 0 ;
  float *result = 0 ;
  
  arg1 = (Vixen::Vec3Blender *)jarg1; 
  result = (float *)((Vixen::Vec3Blender const *)arg1)->GetXInput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Blender_GetYInput(void * jarg1) {
  void * jresult ;
  Vixen::Vec3Blender *arg1 = (Vixen::Vec3Blender *) 0 ;
  float *result = 0 ;
  
  arg1 = (Vixen::Vec3Blender *)jarg1; 
  result = (float *)((Vixen::Vec3Blender const *)arg1)->GetYInput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Blender_GetZInput(void * jarg1) {
  void * jresult ;
  Vixen::Vec3Blender *arg1 = (Vixen::Vec3Blender *) 0 ;
  float *result = 0 ;
  
  arg1 = (Vixen::Vec3Blender *)jarg1; 
  result = (float *)((Vixen::Vec3Blender const *)arg1)->GetZInput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec3Blender_SetXInput(void * jarg1, void * jarg2) {
  Vixen::Vec3Blender *arg1 = (Vixen::Vec3Blender *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (Vixen::Vec3Blender *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetXInput((float const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec3Blender_SetYInput(void * jarg1, void * jarg2) {
  Vixen::Vec3Blender *arg1 = (Vixen::Vec3Blender *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (Vixen::Vec3Blender *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetYInput((float const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec3Blender_SetZInput(void * jarg1, void * jarg2) {
  Vixen::Vec3Blender *arg1 = (Vixen::Vec3Blender *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (Vixen::Vec3Blender *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetZInput((float const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vec3Blender(void * jarg1) {
  Vixen::Vec3Blender *arg1 = (Vixen::Vec3Blender *) 0 ;
  
  arg1 = (Vixen::Vec3Blender *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Interpolator() {
  void * jresult ;
  Vixen::Interpolator *result = 0 ;
  
  result = (Vixen::Interpolator *)new Vixen::Interpolator();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Interpolator_GetSize(void * jarg1) {
  int jresult ;
  Vixen::Interpolator *arg1 = (Vixen::Interpolator *) 0 ;
  int result;
  
  arg1 = (Vixen::Interpolator *)jarg1; 
  result = (int)((Vixen::Interpolator const *)arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Interpolator_SetSize(void * jarg1, int jarg2) {
  Vixen::Interpolator *arg1 = (Vixen::Interpolator *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Interpolator *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSize(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Interpolator_GetMaxSize(void * jarg1) {
  int jresult ;
  Vixen::Interpolator *arg1 = (Vixen::Interpolator *) 0 ;
  int result;
  
  arg1 = (Vixen::Interpolator *)jarg1; 
  result = (int)((Vixen::Interpolator const *)arg1)->GetMaxSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Interpolator_SetMaxSize(void * jarg1, int jarg2) {
  Vixen::Interpolator *arg1 = (Vixen::Interpolator *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Interpolator *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMaxSize(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Interpolator_GetTime(void * jarg1, int jarg2) {
  float jresult ;
  Vixen::Interpolator *arg1 = (Vixen::Interpolator *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Vixen::Interpolator *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)((Vixen::Interpolator const *)arg1)->GetTime(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Interpolator_AddKey(void * jarg1, float jarg2, float* jarg3) {
  unsigned int jresult ;
  Vixen::Interpolator *arg1 = (Vixen::Interpolator *) 0 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  arg1 = (Vixen::Interpolator *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->AddKey(arg2,(float const *)arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Interpolator_ScaleKeys(void * jarg1, float jarg2) {
  Vixen::Interpolator *arg1 = (Vixen::Interpolator *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Interpolator *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->ScaleKeys(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Interpolator_InterpType_set(void * jarg1, int jarg2) {
  Vixen::Interpolator *arg1 = (Vixen::Interpolator *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Interpolator *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_Interpolator_InterpType_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Interpolator_InterpType_get(void * jarg1) {
  int jresult ;
  Vixen::Interpolator *arg1 = (Vixen::Interpolator *) 0 ;
  int result;
  
  arg1 = (Vixen::Interpolator *)jarg1; 
  result = (int)Vixen_Interpolator_InterpType_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Interpolator_Keys_set(void * jarg1, void * jarg2) {
  Vixen::Interpolator *arg1 = (Vixen::Interpolator *) 0 ;
  Vixen::FloatArray *arg2 = (Vixen::FloatArray *) 0 ;
  
  arg1 = (Vixen::Interpolator *)jarg1; 
  arg2 = (Vixen::FloatArray *)jarg2; 
  Vixen_Interpolator_Keys_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Interpolator_Keys_get(void * jarg1) {
  void * jresult ;
  Vixen::Interpolator *arg1 = (Vixen::Interpolator *) 0 ;
  Vixen::FloatArray *result = 0 ;
  
  arg1 = (Vixen::Interpolator *)jarg1; 
  result = (Vixen::FloatArray *)Vixen_Interpolator_Keys_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Interpolator(void * jarg1) {
  Vixen::Interpolator *arg1 = (Vixen::Interpolator *) 0 ;
  
  arg1 = (Vixen::Interpolator *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_KeyFramer() {
  void * jresult ;
  Vixen::KeyFramer *result = 0 ;
  
  result = (Vixen::KeyFramer *)new Vixen::KeyFramer();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyFramer_Find__SWIG_0(void * jarg1, void * jarg2, float jarg3) {
  int jresult ;
  Vixen::KeyFramer *arg1 = (Vixen::KeyFramer *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  int result;
  
  arg1 = (Vixen::KeyFramer *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  result = (int)(arg1)->Find((float const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyFramer_Find__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  Vixen::KeyFramer *arg1 = (Vixen::KeyFramer *) 0 ;
  float *arg2 = (float *) 0 ;
  int result;
  
  arg1 = (Vixen::KeyFramer *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (int)(arg1)->Find((float const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KeyFramer_Part_set(void * jarg1, int jarg2) {
  Vixen::KeyFramer *arg1 = (Vixen::KeyFramer *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::KeyFramer *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_KeyFramer_Part_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyFramer_Part_get(void * jarg1) {
  int jresult ;
  Vixen::KeyFramer *arg1 = (Vixen::KeyFramer *) 0 ;
  int result;
  
  arg1 = (Vixen::KeyFramer *)jarg1; 
  result = (int)Vixen_KeyFramer_Part_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_KeyFramer(void * jarg1) {
  Vixen::KeyFramer *arg1 = (Vixen::KeyFramer *) 0 ;
  
  arg1 = (Vixen::KeyFramer *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_KeyColor() {
  void * jresult ;
  Vixen::Key< Vixen::Col4 > *result = 0 ;
  
  result = (Vixen::Key< Vixen::Col4 > *)new Vixen::Key< Vixen::Col4 >();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KeyColor_GetVal(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::Key< Vixen::Col4 > *arg1 = (Vixen::Key< Vixen::Col4 > *) 0 ;
  int arg2 ;
  Vixen::Col4 *result = 0 ;
  
  arg1 = (Vixen::Key< Vixen::Col4 > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Vixen::Col4 *) &((Vixen::Key< Vixen::Col4 > const *)arg1)->GetVal(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KeyColor_AddVal(void * jarg1, float jarg2, void * jarg3) {
  unsigned int jresult ;
  Vixen::Key< Vixen::Col4 > *arg1 = (Vixen::Key< Vixen::Col4 > *) 0 ;
  float arg2 ;
  Vixen::Col4 *arg3 = 0 ;
  bool result;
  
  arg1 = (Vixen::Key< Vixen::Col4 > *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (Vixen::Col4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Col4 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->AddVal(arg2,(Vixen::Col4 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_KeyColor(void * jarg1) {
  Vixen::Key< Vixen::Col4 > *arg1 = (Vixen::Key< Vixen::Col4 > *) 0 ;
  
  arg1 = (Vixen::Key< Vixen::Col4 > *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FloatInterp() {
  void * jresult ;
  Vixen::Key< float > *result = 0 ;
  
  result = (Vixen::Key< float > *)new Vixen::Key< float >();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FloatInterp_GetVal(void * jarg1, int jarg2) {
  float jresult ;
  Vixen::Key< float > *arg1 = (Vixen::Key< float > *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  arg1 = (Vixen::Key< float > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float *) &((Vixen::Key< float > const *)arg1)->GetVal(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FloatInterp_AddVal(void * jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  Vixen::Key< float > *arg1 = (Vixen::Key< float > *) 0 ;
  float arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  bool result;
  
  arg1 = (Vixen::Key< float > *)jarg1; 
  arg2 = (float)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  result = (bool)(arg1)->AddVal(arg2,(float const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FloatInterp(void * jarg1) {
  Vixen::Key< float > *arg1 = (Vixen::Key< float > *) 0 ;
  
  arg1 = (Vixen::Key< float > *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColorInterp() {
  void * jresult ;
  Vixen::ColorInterp *result = 0 ;
  
  result = (Vixen::ColorInterp *)new Vixen::ColorInterp();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ColorInterp(void * jarg1) {
  Vixen::ColorInterp *arg1 = (Vixen::ColorInterp *) 0 ;
  
  arg1 = (Vixen::ColorInterp *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TimeInterp() {
  void * jresult ;
  Vixen::TimeInterp *result = 0 ;
  
  result = (Vixen::TimeInterp *)new Vixen::TimeInterp();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TimeInterp(void * jarg1) {
  Vixen::TimeInterp *arg1 = (Vixen::TimeInterp *) 0 ;
  
  arg1 = (Vixen::TimeInterp *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Transformer__SWIG_0() {
  void * jresult ;
  Vixen::Transformer *result = 0 ;
  
  result = (Vixen::Transformer *)new Vixen::Transformer();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Transformer__SWIG_1(void * jarg1) {
  void * jresult ;
  Vixen::Matrix *arg1 = (Vixen::Matrix *) 0 ;
  Vixen::Transformer *result = 0 ;
  
  arg1 = (Vixen::Matrix *)jarg1; 
  result = (Vixen::Transformer *)new Vixen::Transformer((Vixen::Matrix const *)arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Transformer_GetTotalTransform(void * jarg1) {
  void * jresult ;
  Vixen::Transformer *arg1 = (Vixen::Transformer *) 0 ;
  Vixen::Matrix *result = 0 ;
  
  arg1 = (Vixen::Transformer *)jarg1; 
  result = (Vixen::Matrix *)((Vixen::Transformer const *)arg1)->GetTotalTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transformer_SetOptions(void * jarg1, int jarg2) {
  Vixen::Transformer *arg1 = (Vixen::Transformer *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Transformer *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetOptions(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Transformer_GetOptions(void * jarg1) {
  int jresult ;
  Vixen::Transformer *arg1 = (Vixen::Transformer *) 0 ;
  int result;
  
  arg1 = (Vixen::Transformer *)jarg1; 
  result = (int)((Vixen::Transformer const *)arg1)->GetOptions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transformer_SetLocalPosition(void * jarg1, void * jarg2) {
  Vixen::Transformer *arg1 = (Vixen::Transformer *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Transformer *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetLocalPosition((Vixen::Vec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transformer_Reset(void * jarg1) {
  Vixen::Transformer *arg1 = (Vixen::Transformer *) 0 ;
  
  arg1 = (Vixen::Transformer *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Transformer_CalcMatrix(void * jarg1) {
  void * jresult ;
  Vixen::Transformer *arg1 = (Vixen::Transformer *) 0 ;
  Vixen::Matrix *result = 0 ;
  
  arg1 = (Vixen::Transformer *)jarg1; 
  result = (Vixen::Matrix *)(arg1)->CalcMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Transformer_LOCAL_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Transformer::LOCAL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Transformer_WORLD_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Transformer::WORLD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transformer_Position_set(void * jarg1, void * jarg2) {
  Vixen::Transformer *arg1 = (Vixen::Transformer *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Transformer *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  Vixen_Transformer_Position_set(arg1,(Vixen::Vec3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Transformer_Position_get(void * jarg1) {
  void * jresult ;
  Vixen::Transformer *arg1 = (Vixen::Transformer *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::Transformer *)jarg1; 
  result = (Vixen::Vec3 *) &Vixen_Transformer_Position_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transformer_Scale_set(void * jarg1, void * jarg2) {
  Vixen::Transformer *arg1 = (Vixen::Transformer *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Transformer *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  Vixen_Transformer_Scale_set(arg1,(Vixen::Vec3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Transformer_Scale_get(void * jarg1) {
  void * jresult ;
  Vixen::Transformer *arg1 = (Vixen::Transformer *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::Transformer *)jarg1; 
  result = (Vixen::Vec3 *) &Vixen_Transformer_Scale_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transformer_Rotation_set(void * jarg1, void * jarg2) {
  Vixen::Transformer *arg1 = (Vixen::Transformer *) 0 ;
  Vixen::Quat *arg2 = 0 ;
  
  arg1 = (Vixen::Transformer *)jarg1; 
  arg2 = (Vixen::Quat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  Vixen_Transformer_Rotation_set(arg1,(Vixen::Quat const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Transformer_Rotation_get(void * jarg1) {
  void * jresult ;
  Vixen::Transformer *arg1 = (Vixen::Transformer *) 0 ;
  Vixen::Quat *result = 0 ;
  
  arg1 = (Vixen::Transformer *)jarg1; 
  result = (Vixen::Quat *) &Vixen_Transformer_Rotation_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transformer_LookRotation_set(void * jarg1, void * jarg2) {
  Vixen::Transformer *arg1 = (Vixen::Transformer *) 0 ;
  Vixen::Quat *arg2 = 0 ;
  
  arg1 = (Vixen::Transformer *)jarg1; 
  arg2 = (Vixen::Quat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  Vixen_Transformer_LookRotation_set(arg1,(Vixen::Quat const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Transformer_LookRotation_get(void * jarg1) {
  void * jresult ;
  Vixen::Transformer *arg1 = (Vixen::Transformer *) 0 ;
  Vixen::Quat *result = 0 ;
  
  arg1 = (Vixen::Transformer *)jarg1; 
  result = (Vixen::Quat *) &Vixen_Transformer_LookRotation_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transformer_Transform_set(void * jarg1, void * jarg2) {
  Vixen::Transformer *arg1 = (Vixen::Transformer *) 0 ;
  Vixen::Matrix *arg2 = (Vixen::Matrix *) 0 ;
  
  arg1 = (Vixen::Transformer *)jarg1; 
  arg2 = (Vixen::Matrix *)jarg2; 
  Vixen_Transformer_Transform_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Transformer_Transform_get(void * jarg1) {
  void * jresult ;
  Vixen::Transformer *arg1 = (Vixen::Transformer *) 0 ;
  Vixen::Matrix *result = 0 ;
  
  arg1 = (Vixen::Transformer *)jarg1; 
  result = (Vixen::Matrix *)Vixen_Transformer_Transform_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transformer_BoneIndex_set(void * jarg1, int jarg2) {
  Vixen::Transformer *arg1 = (Vixen::Transformer *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Transformer *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_Transformer_BoneIndex_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Transformer_BoneIndex_get(void * jarg1) {
  int jresult ;
  Vixen::Transformer *arg1 = (Vixen::Transformer *) 0 ;
  int result;
  
  arg1 = (Vixen::Transformer *)jarg1; 
  result = (int)Vixen_Transformer_BoneIndex_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Transformer(void * jarg1) {
  Vixen::Transformer *arg1 = (Vixen::Transformer *) 0 ;
  
  arg1 = (Vixen::Transformer *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Deformer() {
  void * jresult ;
  Vixen::Deformer *result = 0 ;
  
  result = (Vixen::Deformer *)new Vixen::Deformer();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Deformer_SetRestNormals(void * jarg1, void * jarg2) {
  Vixen::Deformer *arg1 = (Vixen::Deformer *) 0 ;
  Vixen::FloatArray *arg2 = (Vixen::FloatArray *) 0 ;
  
  arg1 = (Vixen::Deformer *)jarg1; 
  arg2 = (Vixen::FloatArray *)jarg2; 
  (arg1)->SetRestNormals(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Deformer_SetVertexMap(void * jarg1, void * jarg2) {
  Vixen::Deformer *arg1 = (Vixen::Deformer *) 0 ;
  Vixen::IntArray *arg2 = (Vixen::IntArray *) 0 ;
  
  arg1 = (Vixen::Deformer *)jarg1; 
  arg2 = (Vixen::IntArray *)jarg2; 
  (arg1)->SetVertexMap(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Deformer_MakeVertexMap(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Deformer *arg1 = (Vixen::Deformer *) 0 ;
  Vixen::VertexArray *arg2 = (Vixen::VertexArray *) 0 ;
  bool result;
  
  arg1 = (Vixen::Deformer *)jarg1; 
  arg2 = (Vixen::VertexArray *)jarg2; 
  result = (bool)(arg1)->MakeVertexMap((Vixen::VertexArray const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Deformer_GetVertexMap(void * jarg1) {
  void * jresult ;
  Vixen::Deformer *arg1 = (Vixen::Deformer *) 0 ;
  Vixen::IntArray *result = 0 ;
  
  arg1 = (Vixen::Deformer *)jarg1; 
  result = (Vixen::IntArray *)((Vixen::Deformer const *)arg1)->GetVertexMap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Deformer_GetRestNormals(void * jarg1) {
  void * jresult ;
  Vixen::Deformer *arg1 = (Vixen::Deformer *) 0 ;
  Vixen::FloatArray *result = 0 ;
  
  arg1 = (Vixen::Deformer *)jarg1; 
  result = (Vixen::FloatArray *)((Vixen::Deformer const *)arg1)->GetRestNormals();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Deformer_GetActiveLocs(void * jarg1) {
  void * jresult ;
  Vixen::Deformer *arg1 = (Vixen::Deformer *) 0 ;
  Vixen::FloatArray *result = 0 ;
  
  arg1 = (Vixen::Deformer *)jarg1; 
  result = (Vixen::FloatArray *)((Vixen::Deformer const *)arg1)->GetActiveLocs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Deformer_GetActiveNormals(void * jarg1) {
  void * jresult ;
  Vixen::Deformer *arg1 = (Vixen::Deformer *) 0 ;
  Vixen::FloatArray *result = 0 ;
  
  arg1 = (Vixen::Deformer *)jarg1; 
  result = (Vixen::FloatArray *)((Vixen::Deformer const *)arg1)->GetActiveNormals();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Deformer_GetBound(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Deformer *arg1 = (Vixen::Deformer *) 0 ;
  Vixen::Box3 *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Deformer *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Box3 & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Deformer const *)arg1)->GetBound(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Deformer_UpdateVertices(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Vixen::FloatArray *arg1 = (Vixen::FloatArray *) 0 ;
  Vixen::VertexArray *arg2 = (Vixen::VertexArray *) 0 ;
  Vixen::IntArray *arg3 = (Vixen::IntArray *) 0 ;
  Vixen::FloatArray *arg4 = (Vixen::FloatArray *) 0 ;
  bool result;
  
  arg1 = (Vixen::FloatArray *)jarg1; 
  arg2 = (Vixen::VertexArray *)jarg2; 
  arg3 = (Vixen::IntArray *)jarg3; 
  arg4 = (Vixen::FloatArray *)jarg4; 
  result = (bool)Vixen::Deformer::UpdateVertices((Vixen::FloatArray const *)arg1,arg2,(Vixen::IntArray const *)arg3,(Vixen::FloatArray const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Deformer_RestLocs_set(void * jarg1, void * jarg2) {
  Vixen::Deformer *arg1 = (Vixen::Deformer *) 0 ;
  Vixen::VertexArray *arg2 = (Vixen::VertexArray *) 0 ;
  
  arg1 = (Vixen::Deformer *)jarg1; 
  arg2 = (Vixen::VertexArray *)jarg2; 
  Vixen_Deformer_RestLocs_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Deformer_RestLocs_get(void * jarg1) {
  void * jresult ;
  Vixen::Deformer *arg1 = (Vixen::Deformer *) 0 ;
  Vixen::VertexArray *result = 0 ;
  
  arg1 = (Vixen::Deformer *)jarg1; 
  result = (Vixen::VertexArray *)Vixen_Deformer_RestLocs_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Deformer(void * jarg1) {
  Vixen::Deformer *arg1 = (Vixen::Deformer *) 0 ;
  
  arg1 = (Vixen::Deformer *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Morph() {
  void * jresult ;
  Vixen::Morph *result = 0 ;
  
  result = (Vixen::Morph *)new Vixen::Morph();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Morph_GetSource(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::Morph *arg1 = (Vixen::Morph *) 0 ;
  int arg2 ;
  Vixen::VertexArray *result = 0 ;
  
  arg1 = (Vixen::Morph *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Vixen::VertexArray *)((Vixen::Morph const *)arg1)->GetSource(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Morph_SetSource(void * jarg1, int jarg2, void * jarg3) {
  Vixen::Morph *arg1 = (Vixen::Morph *) 0 ;
  int arg2 ;
  Vixen::VertexArray *arg3 = (Vixen::VertexArray *) 0 ;
  
  arg1 = (Vixen::Morph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vixen::VertexArray *)jarg3; 
  (arg1)->SetSource(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Morph_MakeRelative__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Vixen::Morph *arg1 = (Vixen::Morph *) 0 ;
  Vixen::VertexArray *arg2 = (Vixen::VertexArray *) 0 ;
  Vixen::FloatArray *arg3 = (Vixen::FloatArray *) 0 ;
  bool result;
  
  arg1 = (Vixen::Morph *)jarg1; 
  arg2 = (Vixen::VertexArray *)jarg2; 
  arg3 = (Vixen::FloatArray *)jarg3; 
  result = (bool)(arg1)->MakeRelative(arg2,(Vixen::FloatArray const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Morph_MakeRelative__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Morph *arg1 = (Vixen::Morph *) 0 ;
  Vixen::VertexArray *arg2 = (Vixen::VertexArray *) 0 ;
  bool result;
  
  arg1 = (Vixen::Morph *)jarg1; 
  arg2 = (Vixen::VertexArray *)jarg2; 
  result = (bool)(arg1)->MakeRelative(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Morph_GetWeight(void * jarg1, int jarg2) {
  float jresult ;
  Vixen::Morph *arg1 = (Vixen::Morph *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Vixen::Morph *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)((Vixen::Morph const *)arg1)->GetWeight(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Morph_SetWeight(void * jarg1, int jarg2, float jarg3) {
  Vixen::Morph *arg1 = (Vixen::Morph *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Vixen::Morph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetWeight(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Morph_Sources_set(void * jarg1, void * jarg2) {
  Vixen::Morph *arg1 = (Vixen::Morph *) 0 ;
  Vixen::ObjArray *arg2 = (Vixen::ObjArray *) 0 ;
  
  arg1 = (Vixen::Morph *)jarg1; 
  arg2 = (Vixen::ObjArray *)jarg2; 
  Vixen_Morph_Sources_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Morph_Sources_get(void * jarg1) {
  void * jresult ;
  Vixen::Morph *arg1 = (Vixen::Morph *) 0 ;
  Vixen::ObjArray *result = 0 ;
  
  arg1 = (Vixen::Morph *)jarg1; 
  result = (Vixen::ObjArray *)Vixen_Morph_Sources_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Morph_Weights_set(void * jarg1, void * jarg2) {
  Vixen::Morph *arg1 = (Vixen::Morph *) 0 ;
  Vixen::FloatArray *arg2 = (Vixen::FloatArray *) 0 ;
  
  arg1 = (Vixen::Morph *)jarg1; 
  arg2 = (Vixen::FloatArray *)jarg2; 
  Vixen_Morph_Weights_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Morph_Weights_get(void * jarg1) {
  void * jresult ;
  Vixen::Morph *arg1 = (Vixen::Morph *) 0 ;
  Vixen::FloatArray *result = 0 ;
  
  arg1 = (Vixen::Morph *)jarg1; 
  result = (Vixen::FloatArray *)Vixen_Morph_Weights_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Morph(void * jarg1) {
  Vixen::Morph *arg1 = (Vixen::Morph *) 0 ;
  
  arg1 = (Vixen::Morph *)jarg1; 
  arg1->Release();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Pose_WORLD_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Pose::WORLD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Pose_BIND_POSE_RELATIVE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Pose::BIND_POSE_RELATIVE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Pose_SKELETON_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Pose::SKELETON;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Pose_BIND_POSE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Pose::BIND_POSE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Pose__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  int arg2 ;
  Vixen::Pose *result = 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Vixen::Pose *)new Vixen::Pose((Vixen::Skeleton const *)arg1,arg2);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Pose__SWIG_1(void * jarg1) {
  void * jresult ;
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  Vixen::Pose *result = 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  result = (Vixen::Pose *)new Vixen::Pose((Vixen::Skeleton const *)arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Pose__SWIG_2() {
  void * jresult ;
  Vixen::Pose *result = 0 ;
  
  result = (Vixen::Pose *)new Vixen::Pose();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Pose_GetNumBones(void * jarg1) {
  int jresult ;
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  int result;
  
  arg1 = (Vixen::Pose *)jarg1; 
  result = (int)((Vixen::Pose const *)arg1)->GetNumBones();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Pose_GetCoordSpace(void * jarg1) {
  int jresult ;
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  int result;
  
  arg1 = (Vixen::Pose *)jarg1; 
  result = (int)((Vixen::Pose const *)arg1)->GetCoordSpace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Pose_GetSkeleton(void * jarg1) {
  void * jresult ;
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  Vixen::Skeleton *result = 0 ;
  
  arg1 = (Vixen::Pose *)jarg1; 
  result = (Vixen::Skeleton *)((Vixen::Pose const *)arg1)->GetSkeleton();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pose_ClearRotations(void * jarg1) {
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  
  arg1 = (Vixen::Pose *)jarg1; 
  (arg1)->ClearRotations();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Pose_GetWorldPosition(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  int arg2 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::Pose *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Vixen::Vec3 *) &((Vixen::Pose const *)arg1)->GetWorldPosition(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pose_GetWorldPositions__SWIG_0(void * jarg1, void * jarg2) {
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  Vixen::Vec3 *arg2 = (Vixen::Vec3 *) 0 ;
  
  arg1 = (Vixen::Pose *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2; 
  ((Vixen::Pose const *)arg1)->GetWorldPositions(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pose_GetWorldMatrix(void * jarg1, int jarg2, void * jarg3) {
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  int arg2 ;
  Vixen::Matrix *arg3 = 0 ;
  
  arg1 = (Vixen::Pose *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vixen::Matrix *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Matrix & type is null", 0);
    return ;
  } 
  ((Vixen::Pose const *)arg1)->GetWorldMatrix(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pose_SetWorldMatrix(void * jarg1, int jarg2, void * jarg3) {
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  int arg2 ;
  Vixen::Matrix *arg3 = 0 ;
  
  arg1 = (Vixen::Pose *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vixen::Matrix *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Matrix const & type is null", 0);
    return ;
  } 
  (arg1)->SetWorldMatrix(arg2,(Vixen::Matrix const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pose_GetWorldRotations__SWIG_0(void * jarg1, void * jarg2) {
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  Vixen::Quat *arg2 = (Vixen::Quat *) 0 ;
  
  arg1 = (Vixen::Pose *)jarg1; 
  arg2 = (Vixen::Quat *)jarg2; 
  ((Vixen::Pose const *)arg1)->GetWorldRotations(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Pose_GetWorldRotation(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  int arg2 ;
  Vixen::Quat *result = 0 ;
  
  arg1 = (Vixen::Pose *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Vixen::Quat *) &((Vixen::Pose const *)arg1)->GetWorldRotation(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pose_SetWorldRotation(void * jarg1, int jarg2, void * jarg3) {
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  int arg2 ;
  Vixen::Quat *arg3 = 0 ;
  
  arg1 = (Vixen::Pose *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vixen::Quat *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  (arg1)->SetWorldRotation(arg2,(Vixen::Quat const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pose_GetLocalMatrix(void * jarg1, int jarg2, void * jarg3) {
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  int arg2 ;
  Vixen::Matrix *arg3 = 0 ;
  
  arg1 = (Vixen::Pose *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vixen::Matrix *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Matrix & type is null", 0);
    return ;
  } 
  ((Vixen::Pose const *)arg1)->GetLocalMatrix(arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Pose_GetLocalRotation(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  int arg2 ;
  Vixen::Quat *result = 0 ;
  
  arg1 = (Vixen::Pose *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Vixen::Quat *) &((Vixen::Pose const *)arg1)->GetLocalRotation(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pose_SetLocalRotation(void * jarg1, int jarg2, void * jarg3) {
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  int arg2 ;
  Vixen::Quat *arg3 = 0 ;
  
  arg1 = (Vixen::Pose *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vixen::Quat *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  (arg1)->SetLocalRotation(arg2,(Vixen::Quat const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Pose_GetLocalPosition(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  int arg2 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::Pose *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Vixen::Vec3 *) &((Vixen::Pose const *)arg1)->GetLocalPosition(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Pose_Compare(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  Vixen::Pose *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Pose *)jarg1; 
  arg2 = (Vixen::Pose *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Pose const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Pose const *)arg1)->Compare((Vixen::Pose const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pose_SetPosition(void * jarg1, void * jarg2) {
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Pose *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetPosition((Vixen::Vec3 const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Pose_Sync(void * jarg1) {
  unsigned int jresult ;
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  bool result;
  
  arg1 = (Vixen::Pose *)jarg1; 
  result = (bool)((Vixen::Pose const *)arg1)->Sync();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pose_SetWorldPositions(void * jarg1, float* jarg2) {
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (Vixen::Pose *)jarg1; 
  arg2 = jarg2;
  Vixen_Pose_SetWorldPositions(arg1,(float const *)arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pose_GetWorldPositions__SWIG_1(void * jarg1, float* jarg2) {
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (Vixen::Pose *)jarg1; 
  arg2 = jarg2;
  Vixen_Pose_GetWorldPositions__SWIG_1(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pose_SetWorldRotations(void * jarg1, float* jarg2) {
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (Vixen::Pose *)jarg1; 
  arg2 = jarg2;
  Vixen_Pose_SetWorldRotations(arg1,(float const *)arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pose_GetWorldRotations__SWIG_1(void * jarg1, float* jarg2) {
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (Vixen::Pose *)jarg1; 
  arg2 = jarg2;
  Vixen_Pose_GetWorldRotations__SWIG_1(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pose_SetLocalRotations(void * jarg1, float* jarg2) {
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (Vixen::Pose *)jarg1; 
  arg2 = jarg2;
  Vixen_Pose_SetLocalRotations(arg1,(float const *)arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Pose(void * jarg1) {
  Vixen::Pose *arg1 = (Vixen::Pose *) 0 ;
  
  arg1 = (Vixen::Pose *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Skeleton__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  Vixen::Skeleton *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Vixen::Skeleton *)new Vixen::Skeleton(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Skeleton__SWIG_1() {
  void * jresult ;
  Vixen::Skeleton *result = 0 ;
  
  result = (Vixen::Skeleton *)new Vixen::Skeleton();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Skeleton__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::Skeleton *arg1 = 0 ;
  Vixen::Skeleton *result = 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Skeleton const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Skeleton *)new Vixen::Skeleton((Vixen::Skeleton const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_WAIST_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::WAIST;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_TORSO_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::TORSO;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_NECK_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::NECK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_HEAD_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::HEAD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_RIGHT_COLLAR_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::RIGHT_COLLAR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_RIGHT_SHOULDER_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::RIGHT_SHOULDER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_RIGHT_ELBOW_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::RIGHT_ELBOW;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_RIGHT_WRIST_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::RIGHT_WRIST;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_RIGHT_HAND_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::RIGHT_HAND;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_RIGHT_FINGER_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::RIGHT_FINGER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_LEFT_COLLAR_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::LEFT_COLLAR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_LEFT_SHOULDER_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::LEFT_SHOULDER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_LEFT_ELBOW_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::LEFT_ELBOW;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_LEFT_WRIST_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::LEFT_WRIST;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_LEFT_HAND_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::LEFT_HAND;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_LEFT_FINGER_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::LEFT_FINGER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_RIGHT_HIP_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::RIGHT_HIP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_RIGHT_KNEE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::RIGHT_KNEE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_RIGHT_ANKLE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::RIGHT_ANKLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_RIGHT_FOOT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::RIGHT_FOOT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_LEFT_HIP_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::LEFT_HIP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_LEFT_KNEE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::LEFT_KNEE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_LEFT_ANKLE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::LEFT_ANKLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_LEFT_FOOT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::LEFT_FOOT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_NUM_BONES_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::NUM_BONES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_WORLD_ABSOLUTE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::WORLD_ABSOLUTE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_WORLD_BIND_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::WORLD_BIND;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_BONE_LOCK_ROTATION_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::BONE_LOCK_ROTATION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_BONE_ANIMATE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::BONE_ANIMATE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_BONE_PHYSICS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Skeleton::BONE_PHYSICS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_MakeSkeleton__SWIG_0(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6) {
  void * jresult ;
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::Quat *arg3 = (Vixen::Quat *) 0 ;
  Vixen::Vec3 *arg4 = (Vixen::Vec3 *) 0 ;
  float *arg5 = (float *) 0 ;
  float arg6 ;
  Vixen::Model *result = 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (Vixen::Quat *)jarg3; 
  arg4 = (Vixen::Vec3 *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float)jarg6; 
  result = (Vixen::Model *)(arg1)->MakeSkeleton((TCHAR const *)arg2,(Vixen::Quat const *)arg3,(Vixen::Vec3 const *)arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_MakeSkeleton__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::Model *result = 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  result = (Vixen::Model *)(arg1)->MakeSkeleton((TCHAR const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_GetRootOffset(void * jarg1) {
  void * jresult ;
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  result = (Vixen::Vec3 *) &((Vixen::Skeleton const *)arg1)->GetRootOffset();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_SetRootOffset(void * jarg1, void * jarg2) {
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetRootOffset((Vixen::Vec3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_MakePose(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  int arg2 ;
  Vixen::Pose *result = 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Vixen::Pose *)((Vixen::Skeleton const *)arg1)->MakePose(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_ApplyPose(void * jarg1, void * jarg2) {
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  Vixen::Pose *arg2 = (Vixen::Pose *) 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (Vixen::Pose *)jarg2; 
  (arg1)->ApplyPose((Vixen::Pose const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_RestoreBindPose(void * jarg1) {
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  (arg1)->RestoreBindPose();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_GetBoneIndex__SWIG_0(void * jarg1, char * jarg2) {
  int jresult ;
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  int result;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  result = (int)((Vixen::Skeleton const *)arg1)->GetBoneIndex((TCHAR const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_GetParentBoneIndex(void * jarg1, int jarg2) {
  int jresult ;
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((Vixen::Skeleton const *)arg1)->GetParentBoneIndex(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Skeleton_SetParentBoneIndex(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->SetParentBoneIndex(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_GetBoneIndex__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  Vixen::Engine *arg2 = (Vixen::Engine *) 0 ;
  int result;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (Vixen::Engine *)jarg2; 
  result = (int)((Vixen::Skeleton const *)arg1)->GetBoneIndex((Vixen::Engine const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_SetBoneName(void * jarg1, int jarg2, char * jarg3) {
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  int arg2 ;
  TCHAR *arg3 = (TCHAR *) 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (TCHAR *)jarg3; 
  (arg1)->SetBoneName(arg2,(TCHAR const *)arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Skeleton_GetBoneName(void * jarg1, int jarg2) {
  char * jresult ;
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  int arg2 ;
  TCHAR *result = 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = (TCHAR *)((Vixen::Skeleton const *)arg1)->GetBoneName(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_GetBone(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  int arg2 ;
  Vixen::Transformer *result = 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Vixen::Transformer *)((Vixen::Skeleton const *)arg1)->GetBone(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_SetBoneOptions(void * jarg1, int jarg2, int jarg3) {
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetBoneOptions(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_GetBoneOptions(void * jarg1, int jarg2) {
  int jresult ;
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((Vixen::Skeleton const *)arg1)->GetBoneOptions(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Skeleton_IsLocked(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((Vixen::Skeleton const *)arg1)->IsLocked(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_AttachBones__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  Vixen::Model *arg2 = (Vixen::Model *) 0 ;
  Vixen::Engine *arg3 = (Vixen::Engine *) 0 ;
  int arg4 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (Vixen::Model *)jarg2; 
  arg3 = (Vixen::Engine *)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->AttachBones(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_AttachBones__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  Vixen::Model *arg2 = (Vixen::Model *) 0 ;
  Vixen::Engine *arg3 = (Vixen::Engine *) 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (Vixen::Model *)jarg2; 
  arg3 = (Vixen::Engine *)jarg3; 
  (arg1)->AttachBones(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_AttachBones__SWIG_2(void * jarg1, void * jarg2) {
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  Vixen::Model *arg2 = (Vixen::Model *) 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (Vixen::Model *)jarg2; 
  (arg1)->AttachBones(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_FindBones__SWIG_0(void * jarg1, void * jarg2) {
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  Vixen::Pose *arg2 = (Vixen::Pose *) 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (Vixen::Pose *)jarg2; 
  (arg1)->FindBones(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_FindBones__SWIG_1(void * jarg1) {
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  (arg1)->FindBones();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_MakeLimb(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, float jarg7, float jarg8) {
  void * jresult ;
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::Model *arg3 = (Vixen::Model *) 0 ;
  Vixen::Quat *arg4 = 0 ;
  Vixen::Vec3 *arg5 = 0 ;
  Vixen::Appearance *arg6 = (Vixen::Appearance *) 0 ;
  float arg7 ;
  float arg8 ;
  Vixen::Shape *result = 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (Vixen::Model *)jarg3; 
  arg4 = (Vixen::Quat *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return 0;
  } 
  arg5 = (Vixen::Vec3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return 0;
  } 
  arg6 = (Vixen::Appearance *)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  result = (Vixen::Shape *)(arg1)->MakeLimb((TCHAR const *)arg2,arg3,(Vixen::Quat const &)*arg4,(Vixen::Vec3 const &)*arg5,(Vixen::Appearance const *)arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_BoneAxis_set(void * jarg1, void * jarg2) {
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  Vixen_Skeleton_BoneAxis_set(arg1,(Vixen::Vec3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_BoneAxis_get(void * jarg1) {
  void * jresult ;
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  result = (Vixen::Vec3 *) &Vixen_Skeleton_BoneAxis_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_Bound_set(void * jarg1, void * jarg2) {
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  Vixen::Box3 *arg2 = 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Box3 const & type is null", 0);
    return ;
  } 
  Vixen_Skeleton_Bound_set(arg1,(Vixen::Box3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_Bound_get(void * jarg1) {
  void * jresult ;
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  Vixen::Box3 *result = 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  result = (Vixen::Box3 *) &Vixen_Skeleton_Bound_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_NumBones_set(void * jarg1, int jarg2) {
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_Skeleton_NumBones_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_NumBones_get(void * jarg1) {
  int jresult ;
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  int result;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  result = (int)Vixen_Skeleton_NumBones_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_Position_set(void * jarg1, void * jarg2) {
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  Vixen_Skeleton_Position_set(arg1,(Vixen::Vec3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_Position_get(void * jarg1) {
  void * jresult ;
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  result = (Vixen::Vec3 *) &Vixen_Skeleton_Position_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_Pose_set(void * jarg1, void * jarg2) {
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  Vixen::Pose *arg2 = (Vixen::Pose *) 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (Vixen::Pose *)jarg2; 
  Vixen_Skeleton_Pose_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_Pose_get(void * jarg1) {
  void * jresult ;
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  Vixen::Pose *result = 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  result = (Vixen::Pose *)Vixen_Skeleton_Pose_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_BindPose_set(void * jarg1, void * jarg2) {
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  Vixen::Pose *arg2 = (Vixen::Pose *) 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg2 = (Vixen::Pose *)jarg2; 
  Vixen_Skeleton_BindPose_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_BindPose_get(void * jarg1) {
  void * jresult ;
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  Vixen::Pose *result = 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  result = (Vixen::Pose *)Vixen_Skeleton_BindPose_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Skeleton(void * jarg1) {
  Vixen::Skeleton *arg1 = (Vixen::Skeleton *) 0 ;
  
  arg1 = (Vixen::Skeleton *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Skin() {
  void * jresult ;
  Vixen::Skin *result = 0 ;
  
  result = (Vixen::Skin *)new Vixen::Skin();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Skin(void * jarg1) {
  Vixen::Skin *arg1 = (Vixen::Skin *) 0 ;
  
  arg1 = (Vixen::Skin *)jarg1; 
  arg1->Release();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skin_GetNumBones(void * jarg1) {
  int jresult ;
  Vixen::Skin *arg1 = (Vixen::Skin *) 0 ;
  int result;
  
  arg1 = (Vixen::Skin *)jarg1; 
  result = (int)((Vixen::Skin const *)arg1)->GetNumBones();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skin_GetBonesPerVertex(void * jarg1) {
  int jresult ;
  Vixen::Skin *arg1 = (Vixen::Skin *) 0 ;
  int result;
  
  arg1 = (Vixen::Skin *)jarg1; 
  result = (int)((Vixen::Skin const *)arg1)->GetBonesPerVertex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skin_Validate(void * jarg1, long long jarg2, long long jarg3) {
  Vixen::Skin *arg1 = (Vixen::Skin *) 0 ;
  intptr arg2 ;
  intptr arg3 ;
  
  arg1 = (Vixen::Skin *)jarg1; 
  arg2 = (intptr)jarg2; 
  arg3 = (intptr)jarg3; 
  ((Vixen::Skin const *)arg1)->Validate(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skin_Skeleton_set(void * jarg1, void * jarg2) {
  Vixen::Skin *arg1 = (Vixen::Skin *) 0 ;
  Vixen::Skeleton *arg2 = (Vixen::Skeleton *) 0 ;
  
  arg1 = (Vixen::Skin *)jarg1; 
  arg2 = (Vixen::Skeleton *)jarg2; 
  Vixen_Skin_Skeleton_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skin_Skeleton_get(void * jarg1) {
  void * jresult ;
  Vixen::Skin *arg1 = (Vixen::Skin *) 0 ;
  Vixen::Skeleton *result = 0 ;
  
  arg1 = (Vixen::Skin *)jarg1; 
  result = (Vixen::Skeleton *)Vixen_Skin_Skeleton_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skin_VertexMap_set(void * jarg1, void * jarg2) {
  Vixen::Skin *arg1 = (Vixen::Skin *) 0 ;
  Vixen::IntArray *arg2 = (Vixen::IntArray *) 0 ;
  
  arg1 = (Vixen::Skin *)jarg1; 
  arg2 = (Vixen::IntArray *)jarg2; 
  Vixen_Skin_VertexMap_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skin_VertexMap_get(void * jarg1) {
  void * jresult ;
  Vixen::Skin *arg1 = (Vixen::Skin *) 0 ;
  Vixen::IntArray *result = 0 ;
  
  arg1 = (Vixen::Skin *)jarg1; 
  result = (Vixen::IntArray *)Vixen_Skin_VertexMap_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PoseMapper() {
  void * jresult ;
  Vixen::PoseMapper *result = 0 ;
  
  result = (Vixen::PoseMapper *)new Vixen::PoseMapper();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PoseMapper(void * jarg1) {
  Vixen::PoseMapper *arg1 = (Vixen::PoseMapper *) 0 ;
  
  arg1 = (Vixen::PoseMapper *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PoseMapper_GetBoneMap(void * jarg1) {
  void * jresult ;
  Vixen::PoseMapper *arg1 = (Vixen::PoseMapper *) 0 ;
  Vixen::IntArray *result = 0 ;
  
  arg1 = (Vixen::PoseMapper *)jarg1; 
  result = (Vixen::IntArray *) &((Vixen::PoseMapper const *)arg1)->GetBoneMap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PoseMapper_SetBoneMap(void * jarg1, int* jarg2) {
  Vixen::PoseMapper *arg1 = (Vixen::PoseMapper *) 0 ;
  int32 *arg2 = (int32 *) 0 ;
  
  arg1 = (Vixen::PoseMapper *)jarg1; 
  arg2 = jarg2;
  (arg1)->SetBoneMap(arg2);
  
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PoseMapper_SelectBoneMap(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Vixen::PoseMapper *arg1 = (Vixen::PoseMapper *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  bool result;
  
  arg1 = (Vixen::PoseMapper *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  result = (bool)(arg1)->SelectBoneMap((TCHAR const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PoseMapper_MapLocalToTarget(void * jarg1) {
  unsigned int jresult ;
  Vixen::PoseMapper *arg1 = (Vixen::PoseMapper *) 0 ;
  bool result;
  
  arg1 = (Vixen::PoseMapper *)jarg1; 
  result = (bool)(arg1)->MapLocalToTarget();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PoseMapper_MapWorldToTarget(void * jarg1) {
  unsigned int jresult ;
  Vixen::PoseMapper *arg1 = (Vixen::PoseMapper *) 0 ;
  bool result;
  
  arg1 = (Vixen::PoseMapper *)jarg1; 
  result = (bool)(arg1)->MapWorldToTarget();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PoseMapper_MapWorldToSource(void * jarg1) {
  unsigned int jresult ;
  Vixen::PoseMapper *arg1 = (Vixen::PoseMapper *) 0 ;
  bool result;
  
  arg1 = (Vixen::PoseMapper *)jarg1; 
  result = (bool)(arg1)->MapWorldToSource();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PoseMapper_MakeBoneMap(void * jarg1, void * jarg2, void * jarg3) {
  Vixen::IntArray *arg1 = 0 ;
  Vixen::Skeleton *arg2 = (Vixen::Skeleton *) 0 ;
  Vixen::Skeleton *arg3 = (Vixen::Skeleton *) 0 ;
  
  arg1 = (Vixen::IntArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::IntArray & type is null", 0);
    return ;
  } 
  arg2 = (Vixen::Skeleton *)jarg2; 
  arg3 = (Vixen::Skeleton *)jarg3; 
  Vixen::PoseMapper::MakeBoneMap(*arg1,(Vixen::Skeleton const *)arg2,(Vixen::Skeleton const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PoseMapper_Source_set(void * jarg1, void * jarg2) {
  Vixen::PoseMapper *arg1 = (Vixen::PoseMapper *) 0 ;
  Vixen::Skeleton *arg2 = (Vixen::Skeleton *) 0 ;
  
  arg1 = (Vixen::PoseMapper *)jarg1; 
  arg2 = (Vixen::Skeleton *)jarg2; 
  Vixen_PoseMapper_Source_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PoseMapper_Source_get(void * jarg1) {
  void * jresult ;
  Vixen::PoseMapper *arg1 = (Vixen::PoseMapper *) 0 ;
  Vixen::Skeleton *result = 0 ;
  
  arg1 = (Vixen::PoseMapper *)jarg1; 
  result = (Vixen::Skeleton *)Vixen_PoseMapper_Source_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animator_AUTO_PLAY_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Animator::AUTO_PLAY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animator_LOAD_STREAM_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Animator::LOAD_STREAM;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animator_KILL_ON_STOP_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Animator::KILL_ON_STOP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animator_ISATTACHED_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Animator::ISATTACHED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animator_FROM_FILE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Animator::FROM_FILE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animator_ISLOADING_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Animator::ISLOADING;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animator_WAS_KILLED_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Animator::WAS_KILLED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animator_MERGED_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Animator::MERGED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animator_PLAY_AFTER_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Animator::PLAY_AFTER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animator_PLAY_WITH_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Animator::PLAY_WITH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animator_PLAY_RELATIVE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Animator::PLAY_RELATIVE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animator_PLAYOPTS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Animator::PLAYOPTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Animator__SWIG_0(char * jarg1) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  Vixen::Animator *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  result = (Vixen::Animator *)new Vixen::Animator((TCHAR const *)arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Animator__SWIG_1() {
  void * jresult ;
  Vixen::Animator *result = 0 ;
  
  result = (Vixen::Animator *)new Vixen::Animator();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Animator(void * jarg1) {
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  arg1->Release();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Animator_GetEngineName(void * jarg1, char * jarg2) {
  char * jresult ;
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  TCHAR *result = 0 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  result = (TCHAR *)((Vixen::Animator const *)arg1)->GetEngineName(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animator_SetEngineName(void * jarg1, char * jarg2) {
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  (arg1)->SetEngineName((TCHAR const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Animator_GetFileName(void * jarg1) {
  char * jresult ;
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  TCHAR *result = 0 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  result = (TCHAR *)((Vixen::Animator const *)arg1)->GetFileName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Animator_GetRootEngine(void * jarg1) {
  void * jresult ;
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  Vixen::Engine *result = 0 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  result = (Vixen::Engine *)((Vixen::Animator const *)arg1)->GetRootEngine();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animator_SetOptions(void * jarg1, int jarg2) {
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetOptions(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animator_GetOptions(void * jarg1) {
  int jresult ;
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  int result;
  
  arg1 = (Vixen::Animator *)jarg1; 
  result = (int)((Vixen::Animator const *)arg1)->GetOptions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Animator_SetFileName(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  bool result;
  
  arg1 = (Vixen::Animator *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  result = (bool)(arg1)->SetFileName((TCHAR const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animator_SetRootEngine(void * jarg1, void * jarg2) {
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  Vixen::Engine *arg2 = (Vixen::Engine *) 0 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  arg2 = (Vixen::Engine *)jarg2; 
  (arg1)->SetRootEngine(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animator_SetLeader__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  Vixen::Engine *arg2 = (Vixen::Engine *) 0 ;
  int arg3 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  arg2 = (Vixen::Engine *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetLeader((Vixen::Engine const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animator_SetLeader__SWIG_1(void * jarg1, void * jarg2) {
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  Vixen::Engine *arg2 = (Vixen::Engine *) 0 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  arg2 = (Vixen::Engine *)jarg2; 
  (arg1)->SetLeader((Vixen::Engine const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Animator_GetLeader(void * jarg1) {
  void * jresult ;
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  Vixen::Engine *result = 0 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  result = (Vixen::Engine *)((Vixen::Animator const *)arg1)->GetLeader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animator_Kill(void * jarg1) {
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  (arg1)->Kill();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animator_Load__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  int arg3 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Load((TCHAR const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animator_Load__SWIG_1(void * jarg1, char * jarg2) {
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  (arg1)->Load((TCHAR const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animator_Blend__SWIG_0(void * jarg1, float jarg2, int jarg3) {
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  float arg2 ;
  int arg3 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Blend(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animator_Blend__SWIG_1(void * jarg1, float jarg2) {
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Blend(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Animator_Init(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  bool arg2 ;
  Vixen::Engine *result = 0 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (Vixen::Engine *)(arg1)->Init(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Animator_MakeName(void * jarg1, char * jarg2) {
  char * jresult ;
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  TCHAR *result = 0 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  result = (TCHAR *)(arg1)->MakeName((TCHAR const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Animator_GetPrefix(char * jarg1, char * jarg2) {
  char * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  TCHAR *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  result = (TCHAR *)Vixen::Animator::GetPrefix(arg1,(char const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animator_Start__SWIG_0(void * jarg1, int jarg2) {
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Start(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animator_Start__SWIG_1(void * jarg1) {
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  (arg1)->Start();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animator_Stop__SWIG_0(void * jarg1, int jarg2) {
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Stop(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animator_Stop__SWIG_1(void * jarg1) {
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  (arg1)->Stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animator_Enable__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Enable(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animator_Enable__SWIG_1(void * jarg1, int jarg2) {
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Enable(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animator_Disable__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Disable(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animator_Disable__SWIG_1(void * jarg1, int jarg2) {
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Animator *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Disable(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Animator_ComputeDuration(void * jarg1, void * jarg2) {
  float jresult ;
  Vixen::Animator *arg1 = (Vixen::Animator *) 0 ;
  Vixen::Engine *arg2 = (Vixen::Engine *) 0 ;
  float result;
  
  arg1 = (Vixen::Animator *)jarg1; 
  arg2 = (Vixen::Engine *)jarg2; 
  result = (float)(arg1)->ComputeDuration(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BoneAnimator__SWIG_0(char * jarg1) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  Vixen::BoneAnimator *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  result = (Vixen::BoneAnimator *)new Vixen::BoneAnimator((TCHAR const *)arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BoneAnimator__SWIG_1() {
  void * jresult ;
  Vixen::BoneAnimator *result = 0 ;
  
  result = (Vixen::BoneAnimator *)new Vixen::BoneAnimator();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BoneAnimator__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::BoneAnimator *arg1 = 0 ;
  Vixen::BoneAnimator *result = 0 ;
  
  arg1 = (Vixen::BoneAnimator *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::BoneAnimator const & type is null", 0);
    return 0;
  } 
  result = (Vixen::BoneAnimator *)new Vixen::BoneAnimator((Vixen::BoneAnimator const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BoneAnimator(void * jarg1) {
  Vixen::BoneAnimator *arg1 = (Vixen::BoneAnimator *) 0 ;
  
  arg1 = (Vixen::BoneAnimator *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoneAnimator_Start__SWIG_0(void * jarg1, int jarg2) {
  Vixen::BoneAnimator *arg1 = (Vixen::BoneAnimator *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::BoneAnimator *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Start(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoneAnimator_Start__SWIG_1(void * jarg1) {
  Vixen::BoneAnimator *arg1 = (Vixen::BoneAnimator *) 0 ;
  
  arg1 = (Vixen::BoneAnimator *)jarg1; 
  (arg1)->Start();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoneAnimator_Stop__SWIG_0(void * jarg1, int jarg2) {
  Vixen::BoneAnimator *arg1 = (Vixen::BoneAnimator *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::BoneAnimator *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Stop(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoneAnimator_Stop__SWIG_1(void * jarg1) {
  Vixen::BoneAnimator *arg1 = (Vixen::BoneAnimator *) 0 ;
  
  arg1 = (Vixen::BoneAnimator *)jarg1; 
  (arg1)->Stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoneAnimator_Enable__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  Vixen::BoneAnimator *arg1 = (Vixen::BoneAnimator *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Vixen::BoneAnimator *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Enable(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoneAnimator_Enable__SWIG_1(void * jarg1, int jarg2) {
  Vixen::BoneAnimator *arg1 = (Vixen::BoneAnimator *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::BoneAnimator *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Enable(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoneAnimator_Disable__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  Vixen::BoneAnimator *arg1 = (Vixen::BoneAnimator *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Vixen::BoneAnimator *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Disable(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoneAnimator_Disable__SWIG_1(void * jarg1, int jarg2) {
  Vixen::BoneAnimator *arg1 = (Vixen::BoneAnimator *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::BoneAnimator *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Disable(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoneAnimator_Blend__SWIG_0(void * jarg1, float jarg2, int jarg3) {
  Vixen::BoneAnimator *arg1 = (Vixen::BoneAnimator *) 0 ;
  float arg2 ;
  int arg3 ;
  
  arg1 = (Vixen::BoneAnimator *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Blend(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoneAnimator_Blend__SWIG_1(void * jarg1, float jarg2) {
  Vixen::BoneAnimator *arg1 = (Vixen::BoneAnimator *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::BoneAnimator *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Blend(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sequencer_Load__SWIG_0(void * jarg1, char * jarg2, char * jarg3, int jarg4, void * jarg5) {
  void * jresult ;
  Vixen::Sequencer *arg1 = (Vixen::Sequencer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  TCHAR *arg3 = (TCHAR *) 0 ;
  int arg4 ;
  Vixen::SharedObj *arg5 = (Vixen::SharedObj *) 0 ;
  Vixen::Animator *result = 0 ;
  
  arg1 = (Vixen::Sequencer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (TCHAR *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (Vixen::SharedObj *)jarg5; 
  result = (Vixen::Animator *)(arg1)->Load((TCHAR const *)arg2,(TCHAR const *)arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sequencer_Load__SWIG_1(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  Vixen::Sequencer *arg1 = (Vixen::Sequencer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  TCHAR *arg3 = (TCHAR *) 0 ;
  int arg4 ;
  Vixen::Animator *result = 0 ;
  
  arg1 = (Vixen::Sequencer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (TCHAR *)jarg3; 
  arg4 = (int)jarg4; 
  result = (Vixen::Animator *)(arg1)->Load((TCHAR const *)arg2,(TCHAR const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sequencer_Load__SWIG_2(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Vixen::Sequencer *arg1 = (Vixen::Sequencer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  TCHAR *arg3 = (TCHAR *) 0 ;
  Vixen::Animator *result = 0 ;
  
  arg1 = (Vixen::Sequencer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (TCHAR *)jarg3; 
  result = (Vixen::Animator *)(arg1)->Load((TCHAR const *)arg2,(TCHAR const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sequencer_Load__SWIG_3(void * jarg1, char * jarg2) {
  void * jresult ;
  Vixen::Sequencer *arg1 = (Vixen::Sequencer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::Animator *result = 0 ;
  
  arg1 = (Vixen::Sequencer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  result = (Vixen::Animator *)(arg1)->Load((TCHAR const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sequencer_Begin__SWIG_0(void * jarg1, char * jarg2, char * jarg3, void * jarg4, int jarg5) {
  Vixen::Sequencer *arg1 = (Vixen::Sequencer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  TCHAR *arg3 = (TCHAR *) 0 ;
  Vixen::SharedObj *arg4 = (Vixen::SharedObj *) 0 ;
  int arg5 ;
  
  arg1 = (Vixen::Sequencer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (TCHAR *)jarg3; 
  arg4 = (Vixen::SharedObj *)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->Begin((TCHAR const *)arg2,(TCHAR const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sequencer_Begin__SWIG_1(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  Vixen::Sequencer *arg1 = (Vixen::Sequencer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  TCHAR *arg3 = (TCHAR *) 0 ;
  Vixen::SharedObj *arg4 = (Vixen::SharedObj *) 0 ;
  
  arg1 = (Vixen::Sequencer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (TCHAR *)jarg3; 
  arg4 = (Vixen::SharedObj *)jarg4; 
  (arg1)->Begin((TCHAR const *)arg2,(TCHAR const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sequencer_Begin__SWIG_2(void * jarg1, char * jarg2, char * jarg3) {
  Vixen::Sequencer *arg1 = (Vixen::Sequencer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  TCHAR *arg3 = (TCHAR *) 0 ;
  
  arg1 = (Vixen::Sequencer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (TCHAR *)jarg3; 
  (arg1)->Begin((TCHAR const *)arg2,(TCHAR const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sequencer_Begin__SWIG_3(void * jarg1, char * jarg2) {
  Vixen::Sequencer *arg1 = (Vixen::Sequencer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  
  arg1 = (Vixen::Sequencer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  (arg1)->Begin((TCHAR const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sequencer_Begin__SWIG_4(void * jarg1) {
  Vixen::Sequencer *arg1 = (Vixen::Sequencer *) 0 ;
  
  arg1 = (Vixen::Sequencer *)jarg1; 
  (arg1)->Begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sequencer_End__SWIG_0(void * jarg1, char * jarg2) {
  Vixen::Sequencer *arg1 = (Vixen::Sequencer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  
  arg1 = (Vixen::Sequencer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  (arg1)->End((TCHAR const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sequencer_End__SWIG_1(void * jarg1) {
  Vixen::Sequencer *arg1 = (Vixen::Sequencer *) 0 ;
  
  arg1 = (Vixen::Sequencer *)jarg1; 
  (arg1)->End();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sequencer_Kill__SWIG_0(void * jarg1, char * jarg2) {
  Vixen::Sequencer *arg1 = (Vixen::Sequencer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  
  arg1 = (Vixen::Sequencer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  (arg1)->Kill((TCHAR const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sequencer_Kill__SWIG_1(void * jarg1) {
  Vixen::Sequencer *arg1 = (Vixen::Sequencer *) 0 ;
  
  arg1 = (Vixen::Sequencer *)jarg1; 
  (arg1)->Kill();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sequencer_GetRootEngine(void * jarg1, char * jarg2) {
  void * jresult ;
  Vixen::Sequencer *arg1 = (Vixen::Sequencer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::Engine *result = 0 ;
  
  arg1 = (Vixen::Sequencer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  result = (Vixen::Engine *)((Vixen::Sequencer const *)arg1)->GetRootEngine((TCHAR const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sequencer_FindAnim__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  Vixen::Sequencer *arg1 = (Vixen::Sequencer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::SharedObj *arg3 = (Vixen::SharedObj *) 0 ;
  Vixen::Animator *result = 0 ;
  
  arg1 = (Vixen::Sequencer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (Vixen::SharedObj *)jarg3; 
  result = (Vixen::Animator *)((Vixen::Sequencer const *)arg1)->FindAnim((TCHAR const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sequencer_FindAnim__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Vixen::Sequencer *arg1 = (Vixen::Sequencer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::Animator *result = 0 ;
  
  arg1 = (Vixen::Sequencer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  result = (Vixen::Animator *)((Vixen::Sequencer const *)arg1)->FindAnim((TCHAR const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sequencer_MakeAnim__SWIG_0(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  Vixen::Sequencer *arg1 = (Vixen::Sequencer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::SharedObj *arg3 = (Vixen::SharedObj *) 0 ;
  bool arg4 ;
  Vixen::Animator *result = 0 ;
  
  arg1 = (Vixen::Sequencer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (Vixen::SharedObj *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (Vixen::Animator *)(arg1)->MakeAnim((TCHAR const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sequencer_MakeAnim__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  Vixen::Sequencer *arg1 = (Vixen::Sequencer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::SharedObj *arg3 = (Vixen::SharedObj *) 0 ;
  Vixen::Animator *result = 0 ;
  
  arg1 = (Vixen::Sequencer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (Vixen::SharedObj *)jarg3; 
  result = (Vixen::Animator *)(arg1)->MakeAnim((TCHAR const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sequencer_MakeAnim__SWIG_2(void * jarg1, char * jarg2) {
  void * jresult ;
  Vixen::Sequencer *arg1 = (Vixen::Sequencer *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::Animator *result = 0 ;
  
  arg1 = (Vixen::Sequencer *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  result = (Vixen::Animator *)(arg1)->MakeAnim((TCHAR const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sequencer(void * jarg1) {
  Vixen::Sequencer *arg1 = (Vixen::Sequencer *) 0 ;
  
  arg1 = (Vixen::Sequencer *)jarg1; 
  arg1->Release();
}


SWIGEXPORT int SWIGSTDCALL CSharp_SCRIPT_Key_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Scriptor() {
  void * jresult ;
  Vixen::Scriptor *result = 0 ;
  
  result = (Vixen::Scriptor *)new Vixen::Scriptor();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Scriptor_GetError(void * jarg1) {
  int jresult ;
  Vixen::Scriptor *arg1 = (Vixen::Scriptor *) 0 ;
  int result;
  
  arg1 = (Vixen::Scriptor *)jarg1; 
  result = (int)((Vixen::Scriptor const *)arg1)->GetError();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scriptor_Find(char * jarg1) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  Vixen::SharedObj *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  result = (Vixen::SharedObj *)Vixen::Scriptor::Find((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scriptor_Exec__SWIG_0(void * jarg1, char * jarg2) {
  Vixen::Scriptor *arg1 = (Vixen::Scriptor *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  
  arg1 = (Vixen::Scriptor *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  (arg1)->Exec((TCHAR const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scriptor_Exec__SWIG_1(void * jarg1) {
  Vixen::Scriptor *arg1 = (Vixen::Scriptor *) 0 ;
  
  arg1 = (Vixen::Scriptor *)jarg1; 
  (arg1)->Exec();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scriptor_WhenEvent(void * jarg1, int jarg2, void * jarg3, char * jarg4) {
  unsigned int jresult ;
  Vixen::Scriptor *arg1 = (Vixen::Scriptor *) 0 ;
  int arg2 ;
  Vixen::SharedObj *arg3 = (Vixen::SharedObj *) 0 ;
  TCHAR *arg4 = (TCHAR *) 0 ;
  bool result;
  
  arg1 = (Vixen::Scriptor *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vixen::SharedObj *)jarg3; 
  arg4 = (TCHAR *)jarg4; 
  result = (bool)(arg1)->WhenEvent(arg2,arg3,(TCHAR const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scriptor_LoadScript(void * jarg1, char * jarg2) {
  Vixen::Scriptor *arg1 = (Vixen::Scriptor *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  
  arg1 = (Vixen::Scriptor *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  (arg1)->LoadScript((TCHAR const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scriptor_SetAnimationScale(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  Vixen::Scriptor::SetAnimationScale(arg1);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Scriptor_GetAnimationScale() {
  float jresult ;
  float result;
  
  result = (float)Vixen::Scriptor::GetAnimationScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scriptor_Directory_set(void * jarg1, char * jarg2) {
  Vixen::Scriptor *arg1 = (Vixen::Scriptor *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Vixen::Scriptor *)jarg1; 
  arg2 = (char *)jarg2; 
  Vixen_Scriptor_Directory_set(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Scriptor_Directory_get(void * jarg1) {
  char * jresult ;
  Vixen::Scriptor *arg1 = (Vixen::Scriptor *) 0 ;
  char *result = 0 ;
  
  arg1 = (Vixen::Scriptor *)jarg1; 
  result = (char *)Vixen_Scriptor_Directory_get(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Scriptor(void * jarg1) {
  Vixen::Scriptor *arg1 = (Vixen::Scriptor *) 0 ;
  
  arg1 = (Vixen::Scriptor *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshAnimator() {
  void * jresult ;
  Vixen::MeshAnimator *result = 0 ;
  
  result = (Vixen::MeshAnimator *)new Vixen::MeshAnimator();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshAnimator_GetSource(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::MeshAnimator *arg1 = (Vixen::MeshAnimator *) 0 ;
  int arg2 ;
  Vixen::VertexArray *result = 0 ;
  
  arg1 = (Vixen::MeshAnimator *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Vixen::VertexArray *)((Vixen::MeshAnimator const *)arg1)->GetSource(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshAnimator_SetSource(void * jarg1, int jarg2, void * jarg3) {
  Vixen::MeshAnimator *arg1 = (Vixen::MeshAnimator *) 0 ;
  int arg2 ;
  Vixen::VertexArray *arg3 = (Vixen::VertexArray *) 0 ;
  
  arg1 = (Vixen::MeshAnimator *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vixen::VertexArray *)jarg3; 
  (arg1)->SetSource(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshAnimator_Clear(void * jarg1) {
  Vixen::MeshAnimator *arg1 = (Vixen::MeshAnimator *) 0 ;
  
  arg1 = (Vixen::MeshAnimator *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshAnimator_TimeInc_set(void * jarg1, float jarg2) {
  Vixen::MeshAnimator *arg1 = (Vixen::MeshAnimator *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::MeshAnimator *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_MeshAnimator_TimeInc_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_MeshAnimator_TimeInc_get(void * jarg1) {
  float jresult ;
  Vixen::MeshAnimator *arg1 = (Vixen::MeshAnimator *) 0 ;
  float result;
  
  arg1 = (Vixen::MeshAnimator *)jarg1; 
  result = (float)Vixen_MeshAnimator_TimeInc_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshAnimator_NumSources_set(void * jarg1, int jarg2) {
  Vixen::MeshAnimator *arg1 = (Vixen::MeshAnimator *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::MeshAnimator *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_MeshAnimator_NumSources_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshAnimator_NumSources_get(void * jarg1) {
  int jresult ;
  Vixen::MeshAnimator *arg1 = (Vixen::MeshAnimator *) 0 ;
  int result;
  
  arg1 = (Vixen::MeshAnimator *)jarg1; 
  result = (int)Vixen_MeshAnimator_NumSources_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MeshAnimator(void * jarg1) {
  Vixen::MeshAnimator *arg1 = (Vixen::MeshAnimator *) 0 ;
  
  arg1 = (Vixen::MeshAnimator *)jarg1; 
  arg1->Release();
}


SWIGEXPORT int SWIGSTDCALL CSharp_SCENE_ShaderChanged_get() {
  int jresult ;
  int result;
  
  result = (int)(64);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneStats_TotalModels_set(void * jarg1, int jarg2) {
  Vixen::SceneStats *arg1 = (Vixen::SceneStats *) 0 ;
  vint32 arg2 ;
  
  arg1 = (Vixen::SceneStats *)jarg1; 
  arg2 = (vint32)jarg2; 
  if (arg1) (arg1)->TotalModels = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneStats_TotalModels_get(void * jarg1) {
  int jresult ;
  Vixen::SceneStats *arg1 = (Vixen::SceneStats *) 0 ;
  vint32 result;
  
  arg1 = (Vixen::SceneStats *)jarg1; 
  result = (vint32) ((arg1)->TotalModels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneStats_CulledModels_set(void * jarg1, int jarg2) {
  Vixen::SceneStats *arg1 = (Vixen::SceneStats *) 0 ;
  vint32 arg2 ;
  
  arg1 = (Vixen::SceneStats *)jarg1; 
  arg2 = (vint32)jarg2; 
  if (arg1) (arg1)->CulledModels = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneStats_CulledModels_get(void * jarg1) {
  int jresult ;
  Vixen::SceneStats *arg1 = (Vixen::SceneStats *) 0 ;
  vint32 result;
  
  arg1 = (Vixen::SceneStats *)jarg1; 
  result = (vint32) ((arg1)->CulledModels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneStats_TotalVerts_set(void * jarg1, int jarg2) {
  Vixen::SceneStats *arg1 = (Vixen::SceneStats *) 0 ;
  vint32 arg2 ;
  
  arg1 = (Vixen::SceneStats *)jarg1; 
  arg2 = (vint32)jarg2; 
  if (arg1) (arg1)->TotalVerts = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneStats_TotalVerts_get(void * jarg1) {
  int jresult ;
  Vixen::SceneStats *arg1 = (Vixen::SceneStats *) 0 ;
  vint32 result;
  
  arg1 = (Vixen::SceneStats *)jarg1; 
  result = (vint32) ((arg1)->TotalVerts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneStats_CulledVerts_set(void * jarg1, int jarg2) {
  Vixen::SceneStats *arg1 = (Vixen::SceneStats *) 0 ;
  vint32 arg2 ;
  
  arg1 = (Vixen::SceneStats *)jarg1; 
  arg2 = (vint32)jarg2; 
  if (arg1) (arg1)->CulledVerts = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneStats_CulledVerts_get(void * jarg1) {
  int jresult ;
  Vixen::SceneStats *arg1 = (Vixen::SceneStats *) 0 ;
  vint32 result;
  
  arg1 = (Vixen::SceneStats *)jarg1; 
  result = (vint32) ((arg1)->CulledVerts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneStats_RenderStateChanges_set(void * jarg1, int jarg2) {
  Vixen::SceneStats *arg1 = (Vixen::SceneStats *) 0 ;
  vint32 arg2 ;
  
  arg1 = (Vixen::SceneStats *)jarg1; 
  arg2 = (vint32)jarg2; 
  if (arg1) (arg1)->RenderStateChanges = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneStats_RenderStateChanges_get(void * jarg1) {
  int jresult ;
  Vixen::SceneStats *arg1 = (Vixen::SceneStats *) 0 ;
  vint32 result;
  
  arg1 = (Vixen::SceneStats *)jarg1; 
  result = (vint32) ((arg1)->RenderStateChanges);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneStats_PrimsRendered_set(void * jarg1, int jarg2) {
  Vixen::SceneStats *arg1 = (Vixen::SceneStats *) 0 ;
  vint32 arg2 ;
  
  arg1 = (Vixen::SceneStats *)jarg1; 
  arg2 = (vint32)jarg2; 
  if (arg1) (arg1)->PrimsRendered = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneStats_PrimsRendered_get(void * jarg1) {
  int jresult ;
  Vixen::SceneStats *arg1 = (Vixen::SceneStats *) 0 ;
  vint32 result;
  
  arg1 = (Vixen::SceneStats *)jarg1; 
  result = (vint32) ((arg1)->PrimsRendered);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneStats_StartTime_set(void * jarg1, float jarg2) {
  Vixen::SceneStats *arg1 = (Vixen::SceneStats *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::SceneStats *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->StartTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SceneStats_StartTime_get(void * jarg1) {
  float jresult ;
  Vixen::SceneStats *arg1 = (Vixen::SceneStats *) 0 ;
  float result;
  
  arg1 = (Vixen::SceneStats *)jarg1; 
  result = (float) ((arg1)->StartTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneStats_EndTime_set(void * jarg1, float jarg2) {
  Vixen::SceneStats *arg1 = (Vixen::SceneStats *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::SceneStats *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->EndTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SceneStats_EndTime_get(void * jarg1) {
  float jresult ;
  Vixen::SceneStats *arg1 = (Vixen::SceneStats *) 0 ;
  float result;
  
  arg1 = (Vixen::SceneStats *)jarg1; 
  result = (float) ((arg1)->EndTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SceneStats() {
  void * jresult ;
  Vixen::SceneStats *result = 0 ;
  
  result = (Vixen::SceneStats *)new Vixen::SceneStats();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SceneStats(void * jarg1) {
  Vixen::SceneStats *arg1 = (Vixen::SceneStats *) 0 ;
  
  arg1 = (Vixen::SceneStats *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Scene_CLEARDEPTH_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Scene::CLEARDEPTH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Scene_CLEARCOLOR_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Scene::CLEARCOLOR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Scene_CLEARALL_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Scene::CLEARALL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Scene_STATESORT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Scene::STATESORT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Scene_DOUBLEBUFFER_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Scene::DOUBLEBUFFER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Scene_FULLSCREEN_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Scene::FULLSCREEN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Scene_OCCLUSIONCULL_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Scene::OCCLUSIONCULL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Scene_REPAINT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Scene::REPAINT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Scene__SWIG_0(void * jarg1) {
  void * jresult ;
  Vixen::Renderer *arg1 = (Vixen::Renderer *) 0 ;
  Vixen::Scene *result = 0 ;
  
  arg1 = (Vixen::Renderer *)jarg1; 
  result = (Vixen::Scene *)new Vixen::Scene(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Scene__SWIG_1() {
  void * jresult ;
  Vixen::Scene *result = 0 ;
  
  result = (Vixen::Scene *)new Vixen::Scene();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Scene__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::Scene *arg1 = 0 ;
  Vixen::Scene *result = 0 ;
  
  arg1 = (Vixen::Scene *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Scene & type is null", 0);
    return 0;
  } 
  result = (Vixen::Scene *)new Vixen::Scene(*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Scene(void * jarg1) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_Suspend(void * jarg1) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  (arg1)->Suspend();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_Resume(void * jarg1) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  (arg1)->Resume();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_Repaint(void * jarg1) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  (arg1)->Repaint();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scene_IsSuspended(void * jarg1) {
  unsigned int jresult ;
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  bool result;
  
  arg1 = (Vixen::Scene *)jarg1; 
  result = (bool)((Vixen::Scene const *)arg1)->IsSuspended();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_ZoomToModel(void * jarg1, void * jarg2) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Model *arg2 = (Vixen::Model *) 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg2 = (Vixen::Model *)jarg2; 
  (arg1)->ZoomToModel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_ZoomToBounds(void * jarg1, void * jarg2) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Box3 *arg2 = 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Box3 & type is null", 0);
    return ;
  } 
  (arg1)->ZoomToBounds(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_SetPriority(void * jarg1, int jarg2) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetPriority(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_ShowAll(void * jarg1) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  (arg1)->ShowAll();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_EnableOptions(void * jarg1, int jarg2) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->EnableOptions(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_DisableOptions(void * jarg1, int jarg2) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->DisableOptions(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scene_SetColorBuffer(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Bitmap *arg2 = (Vixen::Bitmap *) 0 ;
  bool result;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg2 = (Vixen::Bitmap *)jarg2; 
  result = (bool)(arg1)->SetColorBuffer(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scene_SetDepthBuffer(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Bitmap *arg2 = (Vixen::Bitmap *) 0 ;
  bool result;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg2 = (Vixen::Bitmap *)jarg2; 
  result = (bool)(arg1)->SetDepthBuffer(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_Append(void * jarg1, void * jarg2) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Scene *arg2 = (Vixen::Scene *) 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg2 = (Vixen::Scene *)jarg2; 
  (arg1)->Append(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_InstallShader(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Shader *arg2 = (Vixen::Shader *) 0 ;
  Vixen::Shader *result = 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg2 = (Vixen::Shader *)jarg2; 
  result = (Vixen::Shader *)(arg1)->InstallShader((Vixen::Shader const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_GetDepthBuffer(void * jarg1) {
  void * jresult ;
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Bitmap *result = 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  result = (Vixen::Bitmap *)((Vixen::Scene const *)arg1)->GetDepthBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_GetColorBuffer(void * jarg1) {
  void * jresult ;
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Bitmap *result = 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  result = (Vixen::Bitmap *)((Vixen::Scene const *)arg1)->GetColorBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Scene_GetTime(void * jarg1) {
  float jresult ;
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  float result;
  
  arg1 = (Vixen::Scene *)jarg1; 
  result = (float)((Vixen::Scene const *)arg1)->GetTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scene_GetBound(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Sphere *arg2 = (Vixen::Sphere *) 0 ;
  bool result;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg2 = (Vixen::Sphere *)jarg2; 
  result = (bool)((Vixen::Scene const *)arg1)->GetBound(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_GetPostProcess(void * jarg1) {
  void * jresult ;
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Appearance *result = 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  result = (Vixen::Appearance *)((Vixen::Scene const *)arg1)->GetPostProcess();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_SetPostProcess(void * jarg1, void * jarg2) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Appearance *arg2 = (Vixen::Appearance *) 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg2 = (Vixen::Appearance *)jarg2; 
  (arg1)->SetPostProcess(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_DoFrame(void * jarg1) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  (arg1)->DoFrame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_DoSimulation(void * jarg1) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  (arg1)->DoSimulation();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_Exit(void * jarg1) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  (arg1)->Exit();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_NumTexUnits_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Vixen::Scene::NumTexUnits = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Scene_NumTexUnits_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Scene::NumTexUnits;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_DeviceDepth_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Vixen::Scene::DeviceDepth = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Scene_DeviceDepth_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Scene::DeviceDepth;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_RenderOptions_set(char * jarg1) {
  TCHAR *arg1 = (TCHAR *) 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  {
    if (arg1) {
      Vixen::Scene::RenderOptions = (TCHAR const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)Vixen::Scene::RenderOptions, (const char *)arg1);
    } else {
      Vixen::Scene::RenderOptions = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Scene_RenderOptions_get() {
  char * jresult ;
  TCHAR *result = 0 ;
  
  result = (TCHAR *)Vixen::Scene::RenderOptions;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_OnResize(void * jarg1) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  Vixen_Scene_OnResize(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_Options_set(void * jarg1, int jarg2) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_Scene_Options_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Scene_Options_get(void * jarg1) {
  int jresult ;
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  int result;
  
  arg1 = (Vixen::Scene *)jarg1; 
  result = (int)Vixen_Scene_Options_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_Viewport_set(void * jarg1, void * jarg2) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Box2 *arg2 = 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg2 = (Vixen::Box2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Box2 const & type is null", 0);
    return ;
  } 
  Vixen_Scene_Viewport_set(arg1,(Vixen::Box2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_Viewport_get(void * jarg1) {
  void * jresult ;
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Box2 *result = 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  result = (Vixen::Box2 *) &Vixen_Scene_Viewport_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_AutoAdjust_set(void * jarg1, unsigned int jarg2) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  bool arg2 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Vixen_Scene_AutoAdjust_set(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scene_AutoAdjust_get(void * jarg1) {
  unsigned int jresult ;
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  bool result;
  
  arg1 = (Vixen::Scene *)jarg1; 
  result = (bool)Vixen_Scene_AutoAdjust_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_BackColor_set(void * jarg1, void * jarg2) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Col4 *arg2 = 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg2 = (Vixen::Col4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Col4 const & type is null", 0);
    return ;
  } 
  Vixen_Scene_BackColor_set(arg1,(Vixen::Col4 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_BackColor_get(void * jarg1) {
  void * jresult ;
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Col4 *result = 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  result = (Vixen::Col4 *) &Vixen_Scene_BackColor_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_Camera_set(void * jarg1, void * jarg2) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Camera *arg2 = (Vixen::Camera *) 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg2 = (Vixen::Camera *)jarg2; 
  Vixen_Scene_Camera_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_Camera_get(void * jarg1) {
  void * jresult ;
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Camera *result = 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  result = (Vixen::Camera *)Vixen_Scene_Camera_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_Models_set(void * jarg1, void * jarg2) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Model *arg2 = (Vixen::Model *) 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg2 = (Vixen::Model *)jarg2; 
  Vixen_Scene_Models_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_Models_get(void * jarg1) {
  void * jresult ;
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Model *result = 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  result = (Vixen::Model *)Vixen_Scene_Models_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_Engines_set(void * jarg1, void * jarg2) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Engine *arg2 = (Vixen::Engine *) 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg2 = (Vixen::Engine *)jarg2; 
  Vixen_Scene_Engines_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_Engines_get(void * jarg1) {
  void * jresult ;
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Engine *result = 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  result = (Vixen::Engine *)Vixen_Scene_Engines_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_TimeInc_set(void * jarg1, float jarg2) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Scene_TimeInc_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Scene_TimeInc_get(void * jarg1) {
  float jresult ;
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  float result;
  
  arg1 = (Vixen::Scene *)jarg1; 
  result = (float)Vixen_Scene_TimeInc_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_Ambient_set(void * jarg1, void * jarg2) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Light *arg2 = (Vixen::Light *) 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg2 = (Vixen::Light *)jarg2; 
  Vixen_Scene_Ambient_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_Ambient_get(void * jarg1) {
  void * jresult ;
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Light *result = 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  result = (Vixen::Light *)Vixen_Scene_Ambient_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_Window_set(void * jarg1, long long jarg2) {
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  intptr arg2 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  arg2 = (intptr)jarg2; 
  Vixen_Scene_Window_set(arg1,arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Scene_Window_get(void * jarg1) {
  long long jresult ;
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  intptr result;
  
  arg1 = (Vixen::Scene *)jarg1; 
  result = (intptr)Vixen_Scene_Window_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SCENE_DisplayMe_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SCENE_DisplayChildren_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SCENE_WasCulled_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SCENE_IsTask_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetMainScene() {
  void * jresult ;
  Vixen::Scene *result = 0 ;
  
  result = (Vixen::Scene *)Vixen::GetMainScene();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_World() {
  void * jresult ;
  Vixen::World *result = 0 ;
  
  result = (Vixen::World *)new Vixen::World();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_World(void * jarg1) {
  Vixen::World *arg1 = (Vixen::World *) 0 ;
  
  arg1 = (Vixen::World *)jarg1; 
  arg1->Release();
}


SWIGEXPORT float SWIGSTDCALL CSharp_World_GetTime(void * jarg1) {
  float jresult ;
  Vixen::World *arg1 = (Vixen::World *) 0 ;
  float result;
  
  arg1 = (Vixen::World *)jarg1; 
  result = (float)((Vixen::World const *)arg1)->GetTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World_Get() {
  void * jresult ;
  Vixen::World *result = 0 ;
  
  result = (Vixen::World *)Vixen::World::Get();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_SetMediaDir(void * jarg1, char * jarg2) {
  Vixen::World *arg1 = (Vixen::World *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  
  arg1 = (Vixen::World *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  (arg1)->SetMediaDir((TCHAR const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_World_GetMediaDir(void * jarg1) {
  char * jresult ;
  Vixen::World *arg1 = (Vixen::World *) 0 ;
  TCHAR *result = 0 ;
  
  arg1 = (Vixen::World *)jarg1; 
  result = (TCHAR *)((Vixen::World const *)arg1)->GetMediaDir();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_World_GetMediaPath(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  unsigned int jresult ;
  Vixen::World *arg1 = (Vixen::World *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  TCHAR *arg3 = (TCHAR *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (Vixen::World *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (TCHAR *)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)((Vixen::World const *)arg1)->GetMediaPath((TCHAR const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_World_LoadAsync__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Vixen::World *arg1 = (Vixen::World *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::SharedObj *arg3 = (Vixen::SharedObj *) 0 ;
  bool result;
  
  arg1 = (Vixen::World *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (Vixen::SharedObj *)jarg3; 
  result = (bool)(arg1)->LoadAsync((TCHAR const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_World_LoadAsync__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Vixen::World *arg1 = (Vixen::World *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  bool result;
  
  arg1 = (Vixen::World *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  result = (bool)(arg1)->LoadAsync((TCHAR const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_Unload(void * jarg1, char * jarg2) {
  Vixen::World *arg1 = (Vixen::World *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  
  arg1 = (Vixen::World *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  (arg1)->Unload((TCHAR const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_World_IsRunning(void * jarg1) {
  unsigned int jresult ;
  Vixen::World *arg1 = (Vixen::World *) 0 ;
  bool result;
  
  arg1 = (Vixen::World *)jarg1; 
  result = (bool)((Vixen::World const *)arg1)->IsRunning();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_World_Run(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  Vixen::World *arg1 = (Vixen::World *) 0 ;
  Vixen::Window arg2 ;
  bool result;
  
  arg1 = (Vixen::World *)jarg1; 
  arg2 = (Vixen::Window)jarg2; 
  result = (bool)(arg1)->Run(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_Stop(void * jarg1) {
  Vixen::World *arg1 = (Vixen::World *) 0 ;
  
  arg1 = (Vixen::World *)jarg1; 
  (arg1)->Stop();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_World_Startup() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Vixen::World::Startup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_Shutdown() {
  Vixen::World::Shutdown();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_World_ParseArgs(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Vixen::World *arg1 = (Vixen::World *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  bool result;
  
  arg1 = (Vixen::World *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  result = (bool)(arg1)->ParseArgs((TCHAR const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_World_OnInit(void * jarg1) {
  unsigned int jresult ;
  Vixen::World *arg1 = (Vixen::World *) 0 ;
  bool result;
  
  arg1 = (Vixen::World *)jarg1; 
  result = (bool)(arg1)->OnInit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_OnExit(void * jarg1) {
  Vixen::World *arg1 = (Vixen::World *) 0 ;
  
  arg1 = (Vixen::World *)jarg1; 
  (arg1)->OnExit();
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_StartTime_set(void * jarg1, double jarg2) {
  Vixen::World *arg1 = (Vixen::World *) 0 ;
  double arg2 ;
  
  arg1 = (Vixen::World *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->StartTime = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_World_StartTime_get(void * jarg1) {
  double jresult ;
  Vixen::World *arg1 = (Vixen::World *) 0 ;
  double result;
  
  arg1 = (Vixen::World *)jarg1; 
  result = (double) ((arg1)->StartTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_DoAsyncLoad_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Vixen::World::DoAsyncLoad = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_World_DoAsyncLoad_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Vixen::World::DoAsyncLoad;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_MakeConsole_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Vixen::World::MakeConsole = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_World_MakeConsole_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Vixen::World::MakeConsole;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_FileName_set(void * jarg1, char * jarg2) {
  Vixen::World *arg1 = (Vixen::World *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Vixen::World *)jarg1; 
  arg2 = (char *)jarg2; 
  Vixen_World_FileName_set(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_World_FileName_get(void * jarg1) {
  char * jresult ;
  Vixen::World *arg1 = (Vixen::World *) 0 ;
  char *result = 0 ;
  
  arg1 = (Vixen::World *)jarg1; 
  result = (char *)Vixen_World_FileName_get(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_World3D() {
  void * jresult ;
  Vixen::World3D *result = 0 ;
  
  result = (Vixen::World3D *)new Vixen::World3D();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World3D_Get() {
  void * jresult ;
  Vixen::World3D *result = 0 ;
  
  result = (Vixen::World3D *)Vixen::World3D::Get();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World3D_GetScene__SWIG_0(void * jarg1, long long jarg2) {
  void * jresult ;
  Vixen::World3D *arg1 = (Vixen::World3D *) 0 ;
  Vixen::Window arg2 ;
  Vixen::Scene *result = 0 ;
  
  arg1 = (Vixen::World3D *)jarg1; 
  arg2 = (Vixen::Window)jarg2; 
  result = (Vixen::Scene *)((Vixen::World3D const *)arg1)->GetScene(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World3D_GetScene__SWIG_1(void * jarg1) {
  void * jresult ;
  Vixen::World3D *arg1 = (Vixen::World3D *) 0 ;
  Vixen::Scene *result = 0 ;
  
  arg1 = (Vixen::World3D *)jarg1; 
  result = (Vixen::Scene *)((Vixen::World3D const *)arg1)->GetScene();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_World3D_SetScene__SWIG_0(void * jarg1, void * jarg2, long long jarg3) {
  Vixen::World3D *arg1 = (Vixen::World3D *) 0 ;
  Vixen::Scene *arg2 = (Vixen::Scene *) 0 ;
  Vixen::Window arg3 ;
  
  arg1 = (Vixen::World3D *)jarg1; 
  arg2 = (Vixen::Scene *)jarg2; 
  arg3 = (Vixen::Window)jarg3; 
  (arg1)->SetScene(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_World3D_SetScene__SWIG_1(void * jarg1, void * jarg2) {
  Vixen::World3D *arg1 = (Vixen::World3D *) 0 ;
  Vixen::Scene *arg2 = (Vixen::Scene *) 0 ;
  
  arg1 = (Vixen::World3D *)jarg1; 
  arg2 = (Vixen::Scene *)jarg2; 
  (arg1)->SetScene(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_World3D_WinRect_set(void * jarg1, void * jarg2) {
  Vixen::World3D *arg1 = (Vixen::World3D *) 0 ;
  Vixen::Box2 *arg2 = 0 ;
  
  arg1 = (Vixen::World3D *)jarg1; 
  arg2 = (Vixen::Box2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Box2 const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->WinRect = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World3D_WinRect_get(void * jarg1) {
  void * jresult ;
  Vixen::World3D *arg1 = (Vixen::World3D *) 0 ;
  Vixen::Box2 *result = 0 ;
  
  arg1 = (Vixen::World3D *)jarg1; 
  result = (Vixen::Box2 *) & ((arg1)->WinRect);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_World3D(void * jarg1) {
  Vixen::World3D *arg1 = (Vixen::World3D *) 0 ;
  
  arg1 = (Vixen::World3D *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Navigator() {
  void * jresult ;
  Vixen::Navigator *result = 0 ;
  
  result = (Vixen::Navigator *)new Vixen::Navigator();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Navigator_GetButtons(void * jarg1) {
  int jresult ;
  Vixen::Navigator *arg1 = (Vixen::Navigator *) 0 ;
  int result;
  
  arg1 = (Vixen::Navigator *)jarg1; 
  result = (int)((Vixen::Navigator const *)arg1)->GetButtons();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Navigator_SetButtons(void * jarg1, int jarg2) {
  Vixen::Navigator *arg1 = (Vixen::Navigator *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Navigator *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetButtons(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Navigator_TurnSpeed_set(void * jarg1, float jarg2) {
  Vixen::Navigator *arg1 = (Vixen::Navigator *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Navigator *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Navigator_TurnSpeed_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Navigator_TurnSpeed_get(void * jarg1) {
  float jresult ;
  Vixen::Navigator *arg1 = (Vixen::Navigator *) 0 ;
  float result;
  
  arg1 = (Vixen::Navigator *)jarg1; 
  result = (float)Vixen_Navigator_TurnSpeed_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Navigator(void * jarg1) {
  Vixen::Navigator *arg1 = (Vixen::Navigator *) 0 ;
  
  arg1 = (Vixen::Navigator *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Flyer__SWIG_0(float jarg1) {
  void * jresult ;
  float arg1 ;
  Vixen::Flyer *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (Vixen::Flyer *)new Vixen::Flyer(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Flyer__SWIG_1() {
  void * jresult ;
  Vixen::Flyer *result = 0 ;
  
  result = (Vixen::Flyer *)new Vixen::Flyer();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Flyer_X_TRANS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Flyer::X_TRANS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Flyer_Y_TRANS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Flyer::Y_TRANS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Flyer_Z_TRANS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Flyer::Z_TRANS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Flyer_X_ROT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Flyer::X_ROT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Flyer_Y_ROT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Flyer::Y_ROT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Flyer_Z_ROT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Flyer::Z_ROT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Flyer_ALL_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Flyer::ALL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Flyer_Scale_set(void * jarg1, float jarg2) {
  Vixen::Flyer *arg1 = (Vixen::Flyer *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Flyer *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Flyer_Scale_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Flyer_Scale_get(void * jarg1) {
  float jresult ;
  Vixen::Flyer *arg1 = (Vixen::Flyer *) 0 ;
  float result;
  
  arg1 = (Vixen::Flyer *)jarg1; 
  result = (float)Vixen_Flyer_Scale_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Flyer_DegreesOfFreedom_set(void * jarg1, int jarg2) {
  Vixen::Flyer *arg1 = (Vixen::Flyer *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Flyer *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_Flyer_DegreesOfFreedom_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Flyer_DegreesOfFreedom_get(void * jarg1) {
  int jresult ;
  Vixen::Flyer *arg1 = (Vixen::Flyer *) 0 ;
  int result;
  
  arg1 = (Vixen::Flyer *)jarg1; 
  result = (int)Vixen_Flyer_DegreesOfFreedom_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Flyer(void * jarg1) {
  Vixen::Flyer *arg1 = (Vixen::Flyer *) 0 ;
  
  arg1 = (Vixen::Flyer *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Picker() {
  void * jresult ;
  Vixen::Picker *result = 0 ;
  
  result = (Vixen::Picker *)new Vixen::Picker();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Picker(void * jarg1) {
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  
  arg1 = (Vixen::Picker *)jarg1; 
  arg1->Release();
}


SWIGEXPORT float SWIGSTDCALL CSharp_Picker_GetNearDist(void * jarg1) {
  float jresult ;
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  float result;
  
  arg1 = (Vixen::Picker *)jarg1; 
  result = (float)((Vixen::Picker const *)arg1)->GetNearDist();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Picker_GetSelected(void * jarg1) {
  void * jresult ;
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  Vixen::ObjArray *result = 0 ;
  
  arg1 = (Vixen::Picker *)jarg1; 
  result = (Vixen::ObjArray *)((Vixen::Picker const *)arg1)->GetSelected();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Picker_GetNearest(void * jarg1) {
  void * jresult ;
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  Vixen::Model *result = 0 ;
  
  arg1 = (Vixen::Picker *)jarg1; 
  result = (Vixen::Model *)((Vixen::Picker const *)arg1)->GetNearest();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Picker_GetOptions(void * jarg1) {
  unsigned int jresult ;
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  uint32 result;
  
  arg1 = (Vixen::Picker *)jarg1; 
  result = (uint32)((Vixen::Picker const *)arg1)->GetOptions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Picker_GetButtons(void * jarg1) {
  unsigned int jresult ;
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  uint32 result;
  
  arg1 = (Vixen::Picker *)jarg1; 
  result = (uint32)((Vixen::Picker const *)arg1)->GetButtons();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Picker_GetHilite(void * jarg1) {
  void * jresult ;
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  Vixen::Appearance *result = 0 ;
  
  arg1 = (Vixen::Picker *)jarg1; 
  result = (Vixen::Appearance *)((Vixen::Picker const *)arg1)->GetHilite();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Picker_SetOptions(void * jarg1, int jarg2) {
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Picker *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetOptions(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Picker_SetButtons(void * jarg1, int jarg2) {
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Picker *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetButtons(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Picker_SetHilite(void * jarg1, void * jarg2) {
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  Vixen::Appearance *arg2 = (Vixen::Appearance *) 0 ;
  
  arg1 = (Vixen::Picker *)jarg1; 
  arg2 = (Vixen::Appearance *)jarg2; 
  (arg1)->SetHilite((Vixen::Appearance const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Picker_UnHiliteAll__SWIG_0(void * jarg1, unsigned int jarg2) {
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  bool arg2 ;
  
  arg1 = (Vixen::Picker *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->UnHiliteAll(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Picker_UnHiliteAll__SWIG_1(void * jarg1) {
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  
  arg1 = (Vixen::Picker *)jarg1; 
  (arg1)->UnHiliteAll();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Picker_BOUNDS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Picker::BOUNDS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Picker_MESH_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Picker::MESH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Picker_PICK_MODEL_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Picker::PICK_MODEL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Picker_SELECT_PARENT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Picker::SELECT_PARENT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Picker_HILITE_SELECTED_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Picker::HILITE_SELECTED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Picker_HILITE_PICKED_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Picker::HILITE_PICKED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Picker_NAME_FILTER_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Picker::NAME_FILTER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Picker_MULTI_SELECT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Picker::MULTI_SELECT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Picker_CHECK_PARENT_BOUND_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Picker::CHECK_PARENT_BOUND;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Picker_DoHilite_set(void * jarg1, unsigned int jarg2) {
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  bool arg2 ;
  
  arg1 = (Vixen::Picker *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->DoHilite = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Picker_DoHilite_get(void * jarg1) {
  unsigned int jresult ;
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  bool result;
  
  arg1 = (Vixen::Picker *)jarg1; 
  result = (bool) ((arg1)->DoHilite);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Picker_DoPick_set(void * jarg1, unsigned int jarg2) {
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  bool arg2 ;
  
  arg1 = (Vixen::Picker *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->DoPick = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Picker_DoPick_get(void * jarg1) {
  unsigned int jresult ;
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  bool result;
  
  arg1 = (Vixen::Picker *)jarg1; 
  result = (bool) ((arg1)->DoPick);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Picker_Selected_set(void * jarg1, void * jarg2) {
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  Vixen::ObjArray *arg2 = (Vixen::ObjArray *) 0 ;
  
  arg1 = (Vixen::Picker *)jarg1; 
  arg2 = (Vixen::ObjArray *)jarg2; 
  Vixen_Picker_Selected_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Picker_Selected_get(void * jarg1) {
  void * jresult ;
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  Vixen::ObjArray *result = 0 ;
  
  arg1 = (Vixen::Picker *)jarg1; 
  result = (Vixen::ObjArray *)Vixen_Picker_Selected_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Picker_Nearest_set(void * jarg1, void * jarg2) {
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  Vixen::Model *arg2 = (Vixen::Model *) 0 ;
  
  arg1 = (Vixen::Picker *)jarg1; 
  arg2 = (Vixen::Model *)jarg2; 
  Vixen_Picker_Nearest_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Picker_Nearest_get(void * jarg1) {
  void * jresult ;
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  Vixen::Model *result = 0 ;
  
  arg1 = (Vixen::Picker *)jarg1; 
  result = (Vixen::Model *)Vixen_Picker_Nearest_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Picker_NearDist_set(void * jarg1, float jarg2) {
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Picker *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_Picker_NearDist_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Picker_NearDist_get(void * jarg1) {
  float jresult ;
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  float result;
  
  arg1 = (Vixen::Picker *)jarg1; 
  result = (float)Vixen_Picker_NearDist_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Picker_Buttons_set(void * jarg1, int jarg2) {
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  int32 arg2 ;
  
  arg1 = (Vixen::Picker *)jarg1; 
  arg2 = (int32)jarg2; 
  Vixen_Picker_Buttons_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Picker_Buttons_get(void * jarg1) {
  int jresult ;
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  int32 result;
  
  arg1 = (Vixen::Picker *)jarg1; 
  result = (int32)Vixen_Picker_Buttons_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Picker_Options_set(void * jarg1, int jarg2) {
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  int32 arg2 ;
  
  arg1 = (Vixen::Picker *)jarg1; 
  arg2 = (int32)jarg2; 
  Vixen_Picker_Options_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Picker_Options_get(void * jarg1) {
  int jresult ;
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  int32 result;
  
  arg1 = (Vixen::Picker *)jarg1; 
  result = (int32)Vixen_Picker_Options_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Picker_Hilite_set(void * jarg1, void * jarg2) {
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  Vixen::Appearance *arg2 = (Vixen::Appearance *) 0 ;
  
  arg1 = (Vixen::Picker *)jarg1; 
  arg2 = (Vixen::Appearance *)jarg2; 
  Vixen_Picker_Hilite_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Picker_Hilite_get(void * jarg1) {
  void * jresult ;
  Vixen::Picker *arg1 = (Vixen::Picker *) 0 ;
  Vixen::Appearance *result = 0 ;
  
  arg1 = (Vixen::Picker *)jarg1; 
  result = (Vixen::Appearance *)Vixen_Picker_Hilite_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RayPicker() {
  void * jresult ;
  Vixen::RayPicker *result = 0 ;
  
  result = (Vixen::RayPicker *)new Vixen::RayPicker();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayPicker_SetPickShape(void * jarg1, void * jarg2) {
  Vixen::RayPicker *arg1 = (Vixen::RayPicker *) 0 ;
  Vixen::Model *arg2 = (Vixen::Model *) 0 ;
  
  arg1 = (Vixen::RayPicker *)jarg1; 
  arg2 = (Vixen::Model *)jarg2; 
  (arg1)->SetPickShape((Vixen::Model const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RayPicker_GetPickShape(void * jarg1) {
  void * jresult ;
  Vixen::RayPicker *arg1 = (Vixen::RayPicker *) 0 ;
  Vixen::Model *result = 0 ;
  
  arg1 = (Vixen::RayPicker *)jarg1; 
  result = (Vixen::Model *)((Vixen::RayPicker const *)arg1)->GetPickShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayPicker_SetRay(void * jarg1, void * jarg2) {
  Vixen::RayPicker *arg1 = (Vixen::RayPicker *) 0 ;
  Vixen::Ray *arg2 = 0 ;
  
  arg1 = (Vixen::RayPicker *)jarg1; 
  arg2 = (Vixen::Ray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ray const & type is null", 0);
    return ;
  } 
  (arg1)->SetRay((Vixen::Ray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RayPicker_GetRay(void * jarg1) {
  void * jresult ;
  Vixen::RayPicker *arg1 = (Vixen::RayPicker *) 0 ;
  Vixen::Ray *result = 0 ;
  
  arg1 = (Vixen::RayPicker *)jarg1; 
  result = (Vixen::Ray *) &((Vixen::RayPicker const *)arg1)->GetRay();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayPicker_PickShape_set(void * jarg1, void * jarg2) {
  Vixen::RayPicker *arg1 = (Vixen::RayPicker *) 0 ;
  Vixen::Model *arg2 = (Vixen::Model *) 0 ;
  
  arg1 = (Vixen::RayPicker *)jarg1; 
  arg2 = (Vixen::Model *)jarg2; 
  Vixen_RayPicker_PickShape_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RayPicker_PickShape_get(void * jarg1) {
  void * jresult ;
  Vixen::RayPicker *arg1 = (Vixen::RayPicker *) 0 ;
  Vixen::Model *result = 0 ;
  
  arg1 = (Vixen::RayPicker *)jarg1; 
  result = (Vixen::Model *)Vixen_RayPicker_PickShape_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayPicker_Ray_set(void * jarg1, void * jarg2) {
  Vixen::RayPicker *arg1 = (Vixen::RayPicker *) 0 ;
  Vixen::Ray *arg2 = 0 ;
  
  arg1 = (Vixen::RayPicker *)jarg1; 
  arg2 = (Vixen::Ray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ray const & type is null", 0);
    return ;
  } 
  Vixen_RayPicker_Ray_set(arg1,(Vixen::Ray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RayPicker_Ray_get(void * jarg1) {
  void * jresult ;
  Vixen::RayPicker *arg1 = (Vixen::RayPicker *) 0 ;
  Vixen::Ray *result = 0 ;
  
  arg1 = (Vixen::RayPicker *)jarg1; 
  result = (Vixen::Ray *) &Vixen_RayPicker_Ray_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RayPicker(void * jarg1) {
  Vixen::RayPicker *arg1 = (Vixen::RayPicker *) 0 ;
  
  arg1 = (Vixen::RayPicker *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NamePicker() {
  void * jresult ;
  Vixen::NamePicker *result = 0 ;
  
  result = (Vixen::NamePicker *)new Vixen::NamePicker();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NamePicker_GetNameFilter(void * jarg1) {
  char * jresult ;
  Vixen::NamePicker *arg1 = (Vixen::NamePicker *) 0 ;
  TCHAR *result = 0 ;
  
  arg1 = (Vixen::NamePicker *)jarg1; 
  result = (TCHAR *)((Vixen::NamePicker const *)arg1)->GetNameFilter();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NamePicker_SetNameFilter(void * jarg1, char * jarg2) {
  Vixen::NamePicker *arg1 = (Vixen::NamePicker *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  
  arg1 = (Vixen::NamePicker *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  (arg1)->SetNameFilter((TCHAR const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NamePicker_NameFilter_set(void * jarg1, char * jarg2) {
  Vixen::NamePicker *arg1 = (Vixen::NamePicker *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Vixen::NamePicker *)jarg1; 
  arg2 = (char *)jarg2; 
  Vixen_NamePicker_NameFilter_set(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NamePicker_NameFilter_get(void * jarg1) {
  char * jresult ;
  Vixen::NamePicker *arg1 = (Vixen::NamePicker *) 0 ;
  char *result = 0 ;
  
  arg1 = (Vixen::NamePicker *)jarg1; 
  result = (char *)Vixen_NamePicker_NameFilter_get(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NamePicker(void * jarg1) {
  Vixen::NamePicker *arg1 = (Vixen::NamePicker *) 0 ;
  
  arg1 = (Vixen::NamePicker *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Event__SWIG_0(int jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  Vixen::SharedObj *arg3 = (Vixen::SharedObj *) 0 ;
  Vixen::Event *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vixen::SharedObj *)jarg3; 
  result = (Vixen::Event *)new Vixen::Event(arg1,arg2,(Vixen::SharedObj const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Event__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  Vixen::Event *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (Vixen::Event *)new Vixen::Event(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Event__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  Vixen::Event *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Vixen::Event *)new Vixen::Event(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Event__SWIG_3() {
  void * jresult ;
  Vixen::Event *result = 0 ;
  
  result = (Vixen::Event *)new Vixen::Event();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Event__SWIG_4(void * jarg1) {
  void * jresult ;
  Vixen::Event *arg1 = 0 ;
  Vixen::Event *result = 0 ;
  
  arg1 = (Vixen::Event *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Event const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Event *)new Vixen::Event((Vixen::Event const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_Copy(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Event *arg1 = (Vixen::Event *) 0 ;
  Vixen::Event *arg2 = 0 ;
  Vixen::Event *result = 0 ;
  
  arg1 = (Vixen::Event *)jarg1; 
  arg2 = (Vixen::Event *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Event const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Event *) &(arg1)->operator =((Vixen::Event const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Event_GetDataTypes__SWIG_0(void * jarg1) {
  char * jresult ;
  Vixen::Event *arg1 = (Vixen::Event *) 0 ;
  TCHAR *result = 0 ;
  
  arg1 = (Vixen::Event *)jarg1; 
  result = (TCHAR *)((Vixen::Event const *)arg1)->GetDataTypes();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Event_GetDataTypes__SWIG_1(int jarg1) {
  char * jresult ;
  int arg1 ;
  TCHAR *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (TCHAR *)Vixen::Event::GetDataTypes(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Event_SetDataTypes(int jarg1, char * jarg2) {
  int arg1 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  Vixen::Event::SetDataTypes(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Event_GetName__SWIG_0(int jarg1) {
  char * jresult ;
  int arg1 ;
  TCHAR *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (TCHAR *)Vixen::Event::GetName(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Event_GetName__SWIG_1(void * jarg1) {
  char * jresult ;
  Vixen::Event *arg1 = (Vixen::Event *) 0 ;
  TCHAR *result = 0 ;
  
  arg1 = (Vixen::Event *)jarg1; 
  result = (TCHAR *)((Vixen::Event const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Event_SetName(int jarg1, char * jarg2) {
  int arg1 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  Vixen::Event::SetName(arg1,(char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Event_Log__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Vixen::Event *arg1 = (Vixen::Event *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Vixen::Event *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->Log(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Event_Log__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Vixen::Event *arg1 = (Vixen::Event *) 0 ;
  bool result;
  
  arg1 = (Vixen::Event *)jarg1; 
  result = (bool)(arg1)->Log();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_GetData(void * jarg1) {
  void * jresult ;
  Vixen::Event *arg1 = (Vixen::Event *) 0 ;
  void *result = 0 ;
  
  arg1 = (Vixen::Event *)jarg1; 
  result = (void *)(arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_NewCode() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::NewCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Event_Code_set(void * jarg1, int jarg2) {
  Vixen::Event *arg1 = (Vixen::Event *) 0 ;
  int32 arg2 ;
  
  arg1 = (Vixen::Event *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Code = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_Code_get(void * jarg1) {
  int jresult ;
  Vixen::Event *arg1 = (Vixen::Event *) 0 ;
  int32 result;
  
  arg1 = (Vixen::Event *)jarg1; 
  result = (int32) ((arg1)->Code);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Event_Size_set(void * jarg1, int jarg2) {
  Vixen::Event *arg1 = (Vixen::Event *) 0 ;
  int32 arg2 ;
  
  arg1 = (Vixen::Event *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_Size_get(void * jarg1) {
  int jresult ;
  Vixen::Event *arg1 = (Vixen::Event *) 0 ;
  int32 result;
  
  arg1 = (Vixen::Event *)jarg1; 
  result = (int32) ((arg1)->Size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Event_Time_set(void * jarg1, float jarg2) {
  Vixen::Event *arg1 = (Vixen::Event *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::Event *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Time = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Event_Time_get(void * jarg1) {
  float jresult ;
  Vixen::Event *arg1 = (Vixen::Event *) 0 ;
  float result;
  
  arg1 = (Vixen::Event *)jarg1; 
  result = (float) ((arg1)->Time);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Event_Sender_set(void * jarg1, void * jarg2) {
  Vixen::Event *arg1 = (Vixen::Event *) 0 ;
  Vixen::ObjRef *arg2 = (Vixen::ObjRef *) 0 ;
  
  arg1 = (Vixen::Event *)jarg1; 
  arg2 = (Vixen::ObjRef *)jarg2; 
  if (arg1) (arg1)->Sender = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_Sender_get(void * jarg1) {
  void * jresult ;
  Vixen::Event *arg1 = (Vixen::Event *) 0 ;
  Vixen::ObjRef *result = 0 ;
  
  arg1 = (Vixen::Event *)jarg1; 
  result = (Vixen::ObjRef *)& ((arg1)->Sender);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_MAX_CODE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::MAX_CODE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_MAX_BYTES_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::MAX_BYTES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_NONE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::NONE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_LOAD_TEXT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::LOAD_TEXT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_LOAD_IMAGE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::LOAD_IMAGE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_LOAD_DATA_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::LOAD_DATA;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_LOAD_SCENE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::LOAD_SCENE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_MOUSE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::MOUSE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_KEY_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::KEY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_START_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::START;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_STOP_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::STOP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_RESET_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::RESET;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_PICK_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::PICK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_NOPICK_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::NOPICK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_SELECT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::SELECT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_DESELECT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::DESELECT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_SET_TIME_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::SET_TIME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_NAVIGATE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::NAVIGATE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_NAVINPUT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::NAVINPUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_ATTACH_SCENE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::ATTACH_SCENE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_ENTER_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::ENTER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_LEAVE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::LEAVE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_MIDI_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::MIDI;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_RESIZE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::RESIZE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_EXEC_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::EXEC;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_SCENE_CHANGE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::SCENE_CHANGE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_CONNECT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::CONNECT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_COLLIDE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::COLLIDE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_SAVE_SCREEN_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::SAVE_SCREEN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_ERROR_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::ERROR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_TRI_HIT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::TRI_HIT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_TRACK_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::TRACK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_SCENE_INIT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::SCENE_INIT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_LAST_EVENT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::Event::LAST_EVENT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Event_Name_set(void * jarg1, char * jarg2) {
  Vixen::Event *arg1 = (Vixen::Event *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Vixen::Event *)jarg1; 
  arg2 = (char *)jarg2; 
  Vixen_Event_Name_set(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Event_Name_get(void * jarg1) {
  char * jresult ;
  Vixen::Event *arg1 = (Vixen::Event *) 0 ;
  char *result = 0 ;
  
  arg1 = (Vixen::Event *)jarg1; 
  result = (char *)Vixen_Event_Name_get(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Event(void * jarg1) {
  Vixen::Event *arg1 = (Vixen::Event *) 0 ;
  
  arg1 = (Vixen::Event *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SceneRef__SWIG_0(void * jarg1) {
  void * jresult ;
  Vixen::Core::RefObj *arg1 = (Vixen::Core::RefObj *) 0 ;
  Vixen::Ref< Vixen::Scene > *result = 0 ;
  
  arg1 = (Vixen::Core::RefObj *)jarg1; 
  result = (Vixen::Ref< Vixen::Scene > *)new Vixen::Ref< Vixen::Scene >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SceneRef__SWIG_1() {
  void * jresult ;
  Vixen::Ref< Vixen::Scene > *result = 0 ;
  
  result = (Vixen::Ref< Vixen::Scene > *)new Vixen::Ref< Vixen::Scene >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SceneRef__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::Ref< Vixen::Scene > *arg1 = 0 ;
  Vixen::Ref< Vixen::Scene > *result = 0 ;
  
  arg1 = (Vixen::Ref< Vixen::Scene > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ref< Vixen::Scene > const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Ref< Vixen::Scene > *)new Vixen::Ref< Vixen::Scene >((Vixen::Ref< Vixen::Scene > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SceneRef__SWIG_3(void * jarg1) {
  void * jresult ;
  Vixen::Scene *arg1 = (Vixen::Scene *) 0 ;
  Vixen::Ref< Vixen::Scene > *result = 0 ;
  
  arg1 = (Vixen::Scene *)jarg1; 
  result = (Vixen::Ref< Vixen::Scene > *)new Vixen::Ref< Vixen::Scene >((Vixen::Scene const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneRef___ref__(void * jarg1) {
  void * jresult ;
  Vixen::Ref< Vixen::Scene > *arg1 = (Vixen::Ref< Vixen::Scene > *) 0 ;
  Vixen::Scene *result = 0 ;
  
  arg1 = (Vixen::Ref< Vixen::Scene > *)jarg1; 
  result = (Vixen::Scene *)(arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneRef_Assign__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Ref< Vixen::Scene > *arg1 = (Vixen::Ref< Vixen::Scene > *) 0 ;
  Vixen::Ref< Vixen::Scene > *arg2 = 0 ;
  Vixen::Ref< Vixen::Scene > *result = 0 ;
  
  arg1 = (Vixen::Ref< Vixen::Scene > *)jarg1; 
  arg2 = (Vixen::Ref< Vixen::Scene > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ref< Vixen::Scene > const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Ref< Vixen::Scene > *) &(arg1)->operator =((Vixen::Ref< Vixen::Scene > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneRef_Assign__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Ref< Vixen::Scene > *arg1 = (Vixen::Ref< Vixen::Scene > *) 0 ;
  Vixen::Scene *arg2 = (Vixen::Scene *) 0 ;
  Vixen::Ref< Vixen::Scene > *result = 0 ;
  
  arg1 = (Vixen::Ref< Vixen::Scene > *)jarg1; 
  arg2 = (Vixen::Scene *)jarg2; 
  result = (Vixen::Ref< Vixen::Scene > *) &(arg1)->operator =((Vixen::Scene const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SceneRef_Equal__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Ref< Vixen::Scene > *arg1 = (Vixen::Ref< Vixen::Scene > *) 0 ;
  Vixen::Ref< Vixen::Scene > *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Ref< Vixen::Scene > *)jarg1; 
  arg2 = (Vixen::Ref< Vixen::Scene > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ref< Vixen::Scene > const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Ref< Vixen::Scene > const *)arg1)->operator ==((Vixen::Ref< Vixen::Scene > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SceneRef_NotEqual__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Ref< Vixen::Scene > *arg1 = (Vixen::Ref< Vixen::Scene > *) 0 ;
  Vixen::Ref< Vixen::Scene > *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Ref< Vixen::Scene > *)jarg1; 
  arg2 = (Vixen::Ref< Vixen::Scene > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ref< Vixen::Scene > const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Ref< Vixen::Scene > const *)arg1)->operator !=((Vixen::Ref< Vixen::Scene > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SceneRef_Equal__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Ref< Vixen::Scene > *arg1 = (Vixen::Ref< Vixen::Scene > *) 0 ;
  Vixen::Scene *arg2 = (Vixen::Scene *) 0 ;
  bool result;
  
  arg1 = (Vixen::Ref< Vixen::Scene > *)jarg1; 
  arg2 = (Vixen::Scene *)jarg2; 
  result = (bool)((Vixen::Ref< Vixen::Scene > const *)arg1)->operator ==((Vixen::Scene const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SceneRef_NotEqual__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Ref< Vixen::Scene > *arg1 = (Vixen::Ref< Vixen::Scene > *) 0 ;
  Vixen::Scene *arg2 = (Vixen::Scene *) 0 ;
  bool result;
  
  arg1 = (Vixen::Ref< Vixen::Scene > *)jarg1; 
  arg2 = (Vixen::Scene *)jarg2; 
  result = (bool)((Vixen::Ref< Vixen::Scene > const *)arg1)->operator !=((Vixen::Scene const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneRef_Null_get() {
  void * jresult ;
  Vixen::Ref< Vixen::Scene > *result = 0 ;
  
  result = (Vixen::Ref< Vixen::Scene > *)&Vixen::Ref< Vixen::Scene >::Null;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SceneRef(void * jarg1) {
  Vixen::Ref< Vixen::Scene > *arg1 = (Vixen::Ref< Vixen::Scene > *) 0 ;
  
  arg1 = (Vixen::Ref< Vixen::Scene > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshRef__SWIG_0(void * jarg1) {
  void * jresult ;
  Vixen::Core::RefObj *arg1 = (Vixen::Core::RefObj *) 0 ;
  Vixen::Ref< Vixen::Mesh > *result = 0 ;
  
  arg1 = (Vixen::Core::RefObj *)jarg1; 
  result = (Vixen::Ref< Vixen::Mesh > *)new Vixen::Ref< Vixen::Mesh >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshRef__SWIG_1() {
  void * jresult ;
  Vixen::Ref< Vixen::Mesh > *result = 0 ;
  
  result = (Vixen::Ref< Vixen::Mesh > *)new Vixen::Ref< Vixen::Mesh >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshRef__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::Ref< Vixen::Mesh > *arg1 = 0 ;
  Vixen::Ref< Vixen::Mesh > *result = 0 ;
  
  arg1 = (Vixen::Ref< Vixen::Mesh > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ref< Vixen::Mesh > const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Ref< Vixen::Mesh > *)new Vixen::Ref< Vixen::Mesh >((Vixen::Ref< Vixen::Mesh > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshRef__SWIG_3(void * jarg1) {
  void * jresult ;
  Vixen::Mesh *arg1 = (Vixen::Mesh *) 0 ;
  Vixen::Ref< Vixen::Mesh > *result = 0 ;
  
  arg1 = (Vixen::Mesh *)jarg1; 
  result = (Vixen::Ref< Vixen::Mesh > *)new Vixen::Ref< Vixen::Mesh >((Vixen::Mesh const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshRef___ref__(void * jarg1) {
  void * jresult ;
  Vixen::Ref< Vixen::Mesh > *arg1 = (Vixen::Ref< Vixen::Mesh > *) 0 ;
  Vixen::Mesh *result = 0 ;
  
  arg1 = (Vixen::Ref< Vixen::Mesh > *)jarg1; 
  result = (Vixen::Mesh *)(arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshRef_Assign__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Ref< Vixen::Mesh > *arg1 = (Vixen::Ref< Vixen::Mesh > *) 0 ;
  Vixen::Ref< Vixen::Mesh > *arg2 = 0 ;
  Vixen::Ref< Vixen::Mesh > *result = 0 ;
  
  arg1 = (Vixen::Ref< Vixen::Mesh > *)jarg1; 
  arg2 = (Vixen::Ref< Vixen::Mesh > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ref< Vixen::Mesh > const & type is null", 0);
    return 0;
  } 
  result = (Vixen::Ref< Vixen::Mesh > *) &(arg1)->operator =((Vixen::Ref< Vixen::Mesh > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshRef_Assign__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Vixen::Ref< Vixen::Mesh > *arg1 = (Vixen::Ref< Vixen::Mesh > *) 0 ;
  Vixen::Mesh *arg2 = (Vixen::Mesh *) 0 ;
  Vixen::Ref< Vixen::Mesh > *result = 0 ;
  
  arg1 = (Vixen::Ref< Vixen::Mesh > *)jarg1; 
  arg2 = (Vixen::Mesh *)jarg2; 
  result = (Vixen::Ref< Vixen::Mesh > *) &(arg1)->operator =((Vixen::Mesh const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeshRef_Equal__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Ref< Vixen::Mesh > *arg1 = (Vixen::Ref< Vixen::Mesh > *) 0 ;
  Vixen::Ref< Vixen::Mesh > *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Ref< Vixen::Mesh > *)jarg1; 
  arg2 = (Vixen::Ref< Vixen::Mesh > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ref< Vixen::Mesh > const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Ref< Vixen::Mesh > const *)arg1)->operator ==((Vixen::Ref< Vixen::Mesh > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeshRef_NotEqual__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Ref< Vixen::Mesh > *arg1 = (Vixen::Ref< Vixen::Mesh > *) 0 ;
  Vixen::Ref< Vixen::Mesh > *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::Ref< Vixen::Mesh > *)jarg1; 
  arg2 = (Vixen::Ref< Vixen::Mesh > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Ref< Vixen::Mesh > const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vixen::Ref< Vixen::Mesh > const *)arg1)->operator !=((Vixen::Ref< Vixen::Mesh > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeshRef_Equal__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Ref< Vixen::Mesh > *arg1 = (Vixen::Ref< Vixen::Mesh > *) 0 ;
  Vixen::Mesh *arg2 = (Vixen::Mesh *) 0 ;
  bool result;
  
  arg1 = (Vixen::Ref< Vixen::Mesh > *)jarg1; 
  arg2 = (Vixen::Mesh *)jarg2; 
  result = (bool)((Vixen::Ref< Vixen::Mesh > const *)arg1)->operator ==((Vixen::Mesh const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeshRef_NotEqual__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::Ref< Vixen::Mesh > *arg1 = (Vixen::Ref< Vixen::Mesh > *) 0 ;
  Vixen::Mesh *arg2 = (Vixen::Mesh *) 0 ;
  bool result;
  
  arg1 = (Vixen::Ref< Vixen::Mesh > *)jarg1; 
  arg2 = (Vixen::Mesh *)jarg2; 
  result = (bool)((Vixen::Ref< Vixen::Mesh > const *)arg1)->operator !=((Vixen::Mesh const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshRef_Null_get() {
  void * jresult ;
  Vixen::Ref< Vixen::Mesh > *result = 0 ;
  
  result = (Vixen::Ref< Vixen::Mesh > *)&Vixen::Ref< Vixen::Mesh >::Null;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MeshRef(void * jarg1) {
  Vixen::Ref< Vixen::Mesh > *arg1 = (Vixen::Ref< Vixen::Mesh > *) 0 ;
  
  arg1 = (Vixen::Ref< Vixen::Mesh > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LoadEvent__SWIG_0(int jarg1, void * jarg2) {
  void * jresult ;
  int arg1 ;
  Vixen::SharedObj *arg2 = (Vixen::SharedObj *) 0 ;
  Vixen::LoadEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (Vixen::SharedObj *)jarg2; 
  result = (Vixen::LoadEvent *)new Vixen::LoadEvent(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LoadEvent__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  Vixen::LoadEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Vixen::LoadEvent *)new Vixen::LoadEvent(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LoadEvent__SWIG_2() {
  void * jresult ;
  Vixen::LoadEvent *result = 0 ;
  
  result = (Vixen::LoadEvent *)new Vixen::LoadEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LoadEvent__SWIG_3(int jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  Vixen::SharedObj *arg3 = (Vixen::SharedObj *) 0 ;
  Vixen::LoadEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vixen::SharedObj *)jarg3; 
  result = (Vixen::LoadEvent *)new Vixen::LoadEvent(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LoadEvent__SWIG_4(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  Vixen::LoadEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (Vixen::LoadEvent *)new Vixen::LoadEvent(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LoadEvent__SWIG_5(void * jarg1) {
  void * jresult ;
  Vixen::Event *arg1 = 0 ;
  Vixen::LoadEvent *result = 0 ;
  
  arg1 = (Vixen::Event *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Event const & type is null", 0);
    return 0;
  } 
  result = (Vixen::LoadEvent *)new Vixen::LoadEvent((Vixen::Event const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LoadEvent_FileName_set(void * jarg1, void * jarg2) {
  Vixen::LoadEvent *arg1 = (Vixen::LoadEvent *) 0 ;
  Vixen::Core::String *arg2 = 0 ;
  
  arg1 = (Vixen::LoadEvent *)jarg1; 
  
  if (!jarg2)
  {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Vixen::Core::String arg2_str((const char*) jarg2);
  arg2 = &arg2_str;
  
  if (arg1) (arg1)->FileName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LoadEvent_FileName_get(void * jarg1) {
  void * jresult ;
  Vixen::LoadEvent *arg1 = (Vixen::LoadEvent *) 0 ;
  Vixen::Core::String *result = 0 ;
  
  arg1 = (Vixen::LoadEvent *)jarg1; 
  result = (Vixen::Core::String *) & ((arg1)->FileName);
  if (result) jresult = SWIG_csharp_string_callback((const char*) *result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LoadEvent(void * jarg1) {
  Vixen::LoadEvent *arg1 = (Vixen::LoadEvent *) 0 ;
  
  arg1 = (Vixen::LoadEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LoadSceneEvent__SWIG_0(int jarg1, void * jarg2) {
  void * jresult ;
  int arg1 ;
  Vixen::SharedObj *arg2 = (Vixen::SharedObj *) 0 ;
  Vixen::LoadSceneEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (Vixen::SharedObj *)jarg2; 
  result = (Vixen::LoadSceneEvent *)new Vixen::LoadSceneEvent(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LoadSceneEvent__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  Vixen::LoadSceneEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Vixen::LoadSceneEvent *)new Vixen::LoadSceneEvent(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LoadSceneEvent__SWIG_2() {
  void * jresult ;
  Vixen::LoadSceneEvent *result = 0 ;
  
  result = (Vixen::LoadSceneEvent *)new Vixen::LoadSceneEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LoadSceneEvent__SWIG_3(void * jarg1) {
  void * jresult ;
  Vixen::Event *arg1 = 0 ;
  Vixen::LoadSceneEvent *result = 0 ;
  
  arg1 = (Vixen::Event *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Event const & type is null", 0);
    return 0;
  } 
  result = (Vixen::LoadSceneEvent *)new Vixen::LoadSceneEvent((Vixen::Event const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LoadSceneEvent_Object_set(void * jarg1, void * jarg2) {
  Vixen::LoadSceneEvent *arg1 = (Vixen::LoadSceneEvent *) 0 ;
  Vixen::ObjRef *arg2 = (Vixen::ObjRef *) 0 ;
  
  arg1 = (Vixen::LoadSceneEvent *)jarg1; 
  arg2 = (Vixen::ObjRef *)jarg2; 
  if (arg1) (arg1)->Object = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LoadSceneEvent_Object_get(void * jarg1) {
  void * jresult ;
  Vixen::LoadSceneEvent *arg1 = (Vixen::LoadSceneEvent *) 0 ;
  Vixen::ObjRef *result = 0 ;
  
  arg1 = (Vixen::LoadSceneEvent *)jarg1; 
  result = (Vixen::ObjRef *)& ((arg1)->Object);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LoadSceneEvent(void * jarg1) {
  Vixen::LoadSceneEvent *arg1 = (Vixen::LoadSceneEvent *) 0 ;
  
  arg1 = (Vixen::LoadSceneEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LoadTextEvent__SWIG_0(int jarg1, void * jarg2) {
  void * jresult ;
  int arg1 ;
  Vixen::SharedObj *arg2 = (Vixen::SharedObj *) 0 ;
  Vixen::LoadTextEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (Vixen::SharedObj *)jarg2; 
  result = (Vixen::LoadTextEvent *)new Vixen::LoadTextEvent(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LoadTextEvent__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  Vixen::LoadTextEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Vixen::LoadTextEvent *)new Vixen::LoadTextEvent(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LoadTextEvent__SWIG_2() {
  void * jresult ;
  Vixen::LoadTextEvent *result = 0 ;
  
  result = (Vixen::LoadTextEvent *)new Vixen::LoadTextEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LoadTextEvent__SWIG_3(void * jarg1) {
  void * jresult ;
  Vixen::Event *arg1 = 0 ;
  Vixen::LoadTextEvent *result = 0 ;
  
  arg1 = (Vixen::Event *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Event const & type is null", 0);
    return 0;
  } 
  result = (Vixen::LoadTextEvent *)new Vixen::LoadTextEvent((Vixen::Event const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LoadTextEvent_Text_set(void * jarg1, void * jarg2) {
  Vixen::LoadTextEvent *arg1 = (Vixen::LoadTextEvent *) 0 ;
  Vixen::Core::String *arg2 = 0 ;
  
  arg1 = (Vixen::LoadTextEvent *)jarg1; 
  
  if (!jarg2)
  {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Vixen::Core::String arg2_str((const char*) jarg2);
  arg2 = &arg2_str;
  
  if (arg1) (arg1)->Text = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LoadTextEvent_Text_get(void * jarg1) {
  void * jresult ;
  Vixen::LoadTextEvent *arg1 = (Vixen::LoadTextEvent *) 0 ;
  Vixen::Core::String *result = 0 ;
  
  arg1 = (Vixen::LoadTextEvent *)jarg1; 
  result = (Vixen::Core::String *) & ((arg1)->Text);
  if (result) jresult = SWIG_csharp_string_callback((const char*) *result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LoadTextEvent_SequenceID_set(void * jarg1, int jarg2) {
  Vixen::LoadTextEvent *arg1 = (Vixen::LoadTextEvent *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::LoadTextEvent *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SequenceID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LoadTextEvent_SequenceID_get(void * jarg1) {
  int jresult ;
  Vixen::LoadTextEvent *arg1 = (Vixen::LoadTextEvent *) 0 ;
  int result;
  
  arg1 = (Vixen::LoadTextEvent *)jarg1; 
  result = (int) ((arg1)->SequenceID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LoadTextEvent(void * jarg1) {
  Vixen::LoadTextEvent *arg1 = (Vixen::LoadTextEvent *) 0 ;
  
  arg1 = (Vixen::LoadTextEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LoadDataEvent__SWIG_0(int jarg1, void * jarg2) {
  void * jresult ;
  int arg1 ;
  Vixen::SharedObj *arg2 = (Vixen::SharedObj *) 0 ;
  Vixen::LoadDataEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (Vixen::SharedObj *)jarg2; 
  result = (Vixen::LoadDataEvent *)new Vixen::LoadDataEvent(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LoadDataEvent__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  Vixen::LoadDataEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Vixen::LoadDataEvent *)new Vixen::LoadDataEvent(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LoadDataEvent__SWIG_2() {
  void * jresult ;
  Vixen::LoadDataEvent *result = 0 ;
  
  result = (Vixen::LoadDataEvent *)new Vixen::LoadDataEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LoadDataEvent__SWIG_3(void * jarg1) {
  void * jresult ;
  Vixen::Event *arg1 = 0 ;
  Vixen::LoadDataEvent *result = 0 ;
  
  arg1 = (Vixen::Event *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Event const & type is null", 0);
    return 0;
  } 
  result = (Vixen::LoadDataEvent *)new Vixen::LoadDataEvent((Vixen::Event const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LoadDataEvent_Length_set(void * jarg1, long long jarg2) {
  Vixen::LoadDataEvent *arg1 = (Vixen::LoadDataEvent *) 0 ;
  intptr arg2 ;
  
  arg1 = (Vixen::LoadDataEvent *)jarg1; 
  arg2 = (intptr)jarg2; 
  if (arg1) (arg1)->Length = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_LoadDataEvent_Length_get(void * jarg1) {
  long long jresult ;
  Vixen::LoadDataEvent *arg1 = (Vixen::LoadDataEvent *) 0 ;
  intptr result;
  
  arg1 = (Vixen::LoadDataEvent *)jarg1; 
  result = (intptr) ((arg1)->Length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LoadDataEvent(void * jarg1) {
  Vixen::LoadDataEvent *arg1 = (Vixen::LoadDataEvent *) 0 ;
  
  arg1 = (Vixen::LoadDataEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MouseEvent__SWIG_0() {
  void * jresult ;
  Vixen::MouseEvent *result = 0 ;
  
  result = (Vixen::MouseEvent *)new Vixen::MouseEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MouseEvent__SWIG_1(void * jarg1) {
  void * jresult ;
  Vixen::Event *arg1 = 0 ;
  Vixen::MouseEvent *result = 0 ;
  
  arg1 = (Vixen::Event *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Event const & type is null", 0);
    return 0;
  } 
  result = (Vixen::MouseEvent *)new Vixen::MouseEvent((Vixen::Event const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MouseEvent_LEFT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::MouseEvent::LEFT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MouseEvent_RIGHT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::MouseEvent::RIGHT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MouseEvent_MIDDLE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::MouseEvent::MIDDLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MouseEvent_SHIFT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::MouseEvent::SHIFT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MouseEvent_CONTROL_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::MouseEvent::CONTROL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MouseEvent_DOUBLE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::MouseEvent::DOUBLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MouseEvent_MousePos_set(void * jarg1, void * jarg2) {
  Vixen::MouseEvent *arg1 = (Vixen::MouseEvent *) 0 ;
  Vixen::Vec2 *arg2 = 0 ;
  
  arg1 = (Vixen::MouseEvent *)jarg1; 
  arg2 = (Vixen::Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec2 const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->MousePos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MouseEvent_MousePos_get(void * jarg1) {
  void * jresult ;
  Vixen::MouseEvent *arg1 = (Vixen::MouseEvent *) 0 ;
  Vixen::Vec2 *result = 0 ;
  
  arg1 = (Vixen::MouseEvent *)jarg1; 
  result = (Vixen::Vec2 *) & ((arg1)->MousePos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MouseEvent_MouseFlags_set(void * jarg1, int jarg2) {
  Vixen::MouseEvent *arg1 = (Vixen::MouseEvent *) 0 ;
  int32 arg2 ;
  
  arg1 = (Vixen::MouseEvent *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->MouseFlags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MouseEvent_MouseFlags_get(void * jarg1) {
  int jresult ;
  Vixen::MouseEvent *arg1 = (Vixen::MouseEvent *) 0 ;
  int32 result;
  
  arg1 = (Vixen::MouseEvent *)jarg1; 
  result = (int32) ((arg1)->MouseFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MouseEvent(void * jarg1) {
  Vixen::MouseEvent *arg1 = (Vixen::MouseEvent *) 0 ;
  
  arg1 = (Vixen::MouseEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NavInputEvent__SWIG_0() {
  void * jresult ;
  Vixen::NavInputEvent *result = 0 ;
  
  result = (Vixen::NavInputEvent *)new Vixen::NavInputEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NavInputEvent__SWIG_1(void * jarg1) {
  void * jresult ;
  Vixen::Event *arg1 = 0 ;
  Vixen::NavInputEvent *result = 0 ;
  
  arg1 = (Vixen::Event *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Event const & type is null", 0);
    return 0;
  } 
  result = (Vixen::NavInputEvent *)new Vixen::NavInputEvent((Vixen::Event const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavInputEvent_Pos_set(void * jarg1, void * jarg2) {
  Vixen::NavInputEvent *arg1 = (Vixen::NavInputEvent *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::NavInputEvent *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->Pos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NavInputEvent_Pos_get(void * jarg1) {
  void * jresult ;
  Vixen::NavInputEvent *arg1 = (Vixen::NavInputEvent *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::NavInputEvent *)jarg1; 
  result = (Vixen::Vec3 *) & ((arg1)->Pos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavInputEvent_Buttons_set(void * jarg1, int jarg2) {
  Vixen::NavInputEvent *arg1 = (Vixen::NavInputEvent *) 0 ;
  int32 arg2 ;
  
  arg1 = (Vixen::NavInputEvent *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Buttons = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NavInputEvent_Buttons_get(void * jarg1) {
  int jresult ;
  Vixen::NavInputEvent *arg1 = (Vixen::NavInputEvent *) 0 ;
  int32 result;
  
  arg1 = (Vixen::NavInputEvent *)jarg1; 
  result = (int32) ((arg1)->Buttons);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavInputEvent_DeviceID_set(void * jarg1, int jarg2) {
  Vixen::NavInputEvent *arg1 = (Vixen::NavInputEvent *) 0 ;
  int32 arg2 ;
  
  arg1 = (Vixen::NavInputEvent *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->DeviceID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NavInputEvent_DeviceID_get(void * jarg1) {
  int jresult ;
  Vixen::NavInputEvent *arg1 = (Vixen::NavInputEvent *) 0 ;
  int32 result;
  
  arg1 = (Vixen::NavInputEvent *)jarg1; 
  result = (int32) ((arg1)->DeviceID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NavInputEvent(void * jarg1) {
  Vixen::NavInputEvent *arg1 = (Vixen::NavInputEvent *) 0 ;
  
  arg1 = (Vixen::NavInputEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_KeyEvent__SWIG_0() {
  void * jresult ;
  Vixen::KeyEvent *result = 0 ;
  
  result = (Vixen::KeyEvent *)new Vixen::KeyEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_KeyEvent__SWIG_1(void * jarg1) {
  void * jresult ;
  Vixen::Event *arg1 = 0 ;
  Vixen::KeyEvent *result = 0 ;
  
  arg1 = (Vixen::Event *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Event const & type is null", 0);
    return 0;
  } 
  result = (Vixen::KeyEvent *)new Vixen::KeyEvent((Vixen::Event const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KeyEvent_KeyCode_set(void * jarg1, int jarg2) {
  Vixen::KeyEvent *arg1 = (Vixen::KeyEvent *) 0 ;
  int32 arg2 ;
  
  arg1 = (Vixen::KeyEvent *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->KeyCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_KeyCode_get(void * jarg1) {
  int jresult ;
  Vixen::KeyEvent *arg1 = (Vixen::KeyEvent *) 0 ;
  int32 result;
  
  arg1 = (Vixen::KeyEvent *)jarg1; 
  result = (int32) ((arg1)->KeyCode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KeyEvent_KeyFlags_set(void * jarg1, int jarg2) {
  Vixen::KeyEvent *arg1 = (Vixen::KeyEvent *) 0 ;
  int32 arg2 ;
  
  arg1 = (Vixen::KeyEvent *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->KeyFlags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_KeyFlags_get(void * jarg1) {
  int jresult ;
  Vixen::KeyEvent *arg1 = (Vixen::KeyEvent *) 0 ;
  int32 result;
  
  arg1 = (Vixen::KeyEvent *)jarg1; 
  result = (int32) ((arg1)->KeyFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_ESCAPE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_ESCAPE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_END_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_END;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_HOME_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_HOME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_LEFT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_LEFT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_UP_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_UP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_RIGHT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_RIGHT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_DOWN_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_DOWN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_INSERT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_INSERT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_DELETE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_DELETE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_PAGEUP_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_PAGEUP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_PAGEDOWN_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_PAGEDOWN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_F1_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_F1;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_F2_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_F2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_F3_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_F3;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_F4_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_F4;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_F5_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_F5;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_F6_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_F6;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_F7_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_F7;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_F8_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_F8;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_F9_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_F9;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_F10_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_F10;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_F11_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_F11;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_F12_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_F12;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_ADD_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_ADD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_SUBTRACT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_SUBTRACT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_K_CONTROL_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::K_CONTROL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_ALT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::ALT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_UP_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::UP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_REPEAT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::REPEAT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeyEvent_MASK_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KeyEvent::MASK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_KeyEvent(void * jarg1) {
  Vixen::KeyEvent *arg1 = (Vixen::KeyEvent *) 0 ;
  
  arg1 = (Vixen::KeyEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NavigateEvent__SWIG_0() {
  void * jresult ;
  Vixen::NavigateEvent *result = 0 ;
  
  result = (Vixen::NavigateEvent *)new Vixen::NavigateEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NavigateEvent__SWIG_1(void * jarg1) {
  void * jresult ;
  Vixen::NavigateEvent *arg1 = 0 ;
  Vixen::NavigateEvent *result = 0 ;
  
  arg1 = (Vixen::NavigateEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::NavigateEvent const & type is null", 0);
    return 0;
  } 
  result = (Vixen::NavigateEvent *)new Vixen::NavigateEvent((Vixen::NavigateEvent const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigateEvent_Flags_set(void * jarg1, int jarg2) {
  Vixen::NavigateEvent *arg1 = (Vixen::NavigateEvent *) 0 ;
  int32 arg2 ;
  
  arg1 = (Vixen::NavigateEvent *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NavigateEvent_Flags_get(void * jarg1) {
  int jresult ;
  Vixen::NavigateEvent *arg1 = (Vixen::NavigateEvent *) 0 ;
  int32 result;
  
  arg1 = (Vixen::NavigateEvent *)jarg1; 
  result = (int32) ((arg1)->Flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigateEvent_Pos_set(void * jarg1, void * jarg2) {
  Vixen::NavigateEvent *arg1 = (Vixen::NavigateEvent *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::NavigateEvent *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->Pos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NavigateEvent_Pos_get(void * jarg1) {
  void * jresult ;
  Vixen::NavigateEvent *arg1 = (Vixen::NavigateEvent *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::NavigateEvent *)jarg1; 
  result = (Vixen::Vec3 *) & ((arg1)->Pos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigateEvent_Rot_set(void * jarg1, void * jarg2) {
  Vixen::NavigateEvent *arg1 = (Vixen::NavigateEvent *) 0 ;
  Vixen::Quat *arg2 = 0 ;
  
  arg1 = (Vixen::NavigateEvent *)jarg1; 
  arg2 = (Vixen::Quat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->Rot = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NavigateEvent_Rot_get(void * jarg1) {
  void * jresult ;
  Vixen::NavigateEvent *arg1 = (Vixen::NavigateEvent *) 0 ;
  Vixen::Quat *result = 0 ;
  
  arg1 = (Vixen::NavigateEvent *)jarg1; 
  result = (Vixen::Quat *) & ((arg1)->Rot);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigateEvent_Look_set(void * jarg1, void * jarg2) {
  Vixen::NavigateEvent *arg1 = (Vixen::NavigateEvent *) 0 ;
  Vixen::Quat *arg2 = 0 ;
  
  arg1 = (Vixen::NavigateEvent *)jarg1; 
  arg2 = (Vixen::Quat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->Look = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NavigateEvent_Look_get(void * jarg1) {
  void * jresult ;
  Vixen::NavigateEvent *arg1 = (Vixen::NavigateEvent *) 0 ;
  Vixen::Quat *result = 0 ;
  
  arg1 = (Vixen::NavigateEvent *)jarg1; 
  result = (Vixen::Quat *) & ((arg1)->Look);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NavigateEvent_CENTER_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::NavigateEvent::CENTER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NavigateEvent_POSITION_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::NavigateEvent::POSITION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NavigateEvent_ROTATION_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::NavigateEvent::ROTATION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NavigateEvent_LOOK_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::NavigateEvent::LOOK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NavigateEvent_SCALE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::NavigateEvent::SCALE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NavigateEvent_LOCAL_POS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::NavigateEvent::LOCAL_POS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NavigateEvent_ABSOLUTE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::NavigateEvent::ABSOLUTE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NavigateEvent_XROTATION_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::NavigateEvent::XROTATION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NavigateEvent_YROTATION_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::NavigateEvent::YROTATION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NavigateEvent_ZROTATION_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::NavigateEvent::ZROTATION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NavigateEvent_EVENT_PENDING_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::NavigateEvent::EVENT_PENDING;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NavigateEvent(void * jarg1) {
  Vixen::NavigateEvent *arg1 = (Vixen::NavigateEvent *) 0 ;
  
  arg1 = (Vixen::NavigateEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SceneEvent__SWIG_0(int jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  int arg1 ;
  Vixen::Scene *arg2 = (Vixen::Scene *) 0 ;
  Vixen::SharedObj *arg3 = (Vixen::SharedObj *) 0 ;
  Vixen::SceneEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (Vixen::Scene *)jarg2; 
  arg3 = (Vixen::SharedObj *)jarg3; 
  result = (Vixen::SceneEvent *)new Vixen::SceneEvent(arg1,(Vixen::Scene const *)arg2,(Vixen::SharedObj const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SceneEvent__SWIG_1(int jarg1, void * jarg2) {
  void * jresult ;
  int arg1 ;
  Vixen::Scene *arg2 = (Vixen::Scene *) 0 ;
  Vixen::SceneEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (Vixen::Scene *)jarg2; 
  result = (Vixen::SceneEvent *)new Vixen::SceneEvent(arg1,(Vixen::Scene const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SceneEvent__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  Vixen::SceneEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Vixen::SceneEvent *)new Vixen::SceneEvent(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SceneEvent__SWIG_3() {
  void * jresult ;
  Vixen::SceneEvent *result = 0 ;
  
  result = (Vixen::SceneEvent *)new Vixen::SceneEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SceneEvent__SWIG_4(void * jarg1) {
  void * jresult ;
  Vixen::Event *arg1 = 0 ;
  Vixen::SceneEvent *result = 0 ;
  
  arg1 = (Vixen::Event *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Event const & type is null", 0);
    return 0;
  } 
  result = (Vixen::SceneEvent *)new Vixen::SceneEvent((Vixen::Event const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SceneEvent(void * jarg1) {
  Vixen::SceneEvent *arg1 = (Vixen::SceneEvent *) 0 ;
  
  arg1 = (Vixen::SceneEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneEvent_Target_set(void * jarg1, void * jarg2) {
  Vixen::SceneEvent *arg1 = (Vixen::SceneEvent *) 0 ;
  Vixen::SceneRef *arg2 = (Vixen::SceneRef *) 0 ;
  
  arg1 = (Vixen::SceneEvent *)jarg1; 
  arg2 = (Vixen::SceneRef *)jarg2; 
  if (arg1) (arg1)->Target = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneEvent_Target_get(void * jarg1) {
  void * jresult ;
  Vixen::SceneEvent *arg1 = (Vixen::SceneEvent *) 0 ;
  Vixen::SceneRef *result = 0 ;
  
  arg1 = (Vixen::SceneEvent *)jarg1; 
  result = (Vixen::SceneRef *)& ((arg1)->Target);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneEvent_WindowHandle_set(void * jarg1, long long jarg2) {
  Vixen::SceneEvent *arg1 = (Vixen::SceneEvent *) 0 ;
  intptr arg2 ;
  
  arg1 = (Vixen::SceneEvent *)jarg1; 
  arg2 = (intptr)jarg2; 
  if (arg1) (arg1)->WindowHandle = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_SceneEvent_WindowHandle_get(void * jarg1) {
  long long jresult ;
  Vixen::SceneEvent *arg1 = (Vixen::SceneEvent *) 0 ;
  intptr result;
  
  arg1 = (Vixen::SceneEvent *)jarg1; 
  result = (intptr) ((arg1)->WindowHandle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ErrorEvent__SWIG_0(void * jarg1) {
  void * jresult ;
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  Vixen::ErrorEvent *result = 0 ;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  result = (Vixen::ErrorEvent *)new Vixen::ErrorEvent((Vixen::SharedObj const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ErrorEvent__SWIG_1() {
  void * jresult ;
  Vixen::ErrorEvent *result = 0 ;
  
  result = (Vixen::ErrorEvent *)new Vixen::ErrorEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ErrorEvent__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::Event *arg1 = 0 ;
  Vixen::ErrorEvent *result = 0 ;
  
  arg1 = (Vixen::Event *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Event const & type is null", 0);
    return 0;
  } 
  result = (Vixen::ErrorEvent *)new Vixen::ErrorEvent((Vixen::Event const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ErrorEvent_ErrCode_set(void * jarg1, int jarg2) {
  Vixen::ErrorEvent *arg1 = (Vixen::ErrorEvent *) 0 ;
  int32 arg2 ;
  
  arg1 = (Vixen::ErrorEvent *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ErrCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ErrorEvent_ErrCode_get(void * jarg1) {
  int jresult ;
  Vixen::ErrorEvent *arg1 = (Vixen::ErrorEvent *) 0 ;
  int32 result;
  
  arg1 = (Vixen::ErrorEvent *)jarg1; 
  result = (int32) ((arg1)->ErrCode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ErrorEvent_ErrLevel_set(void * jarg1, int jarg2) {
  Vixen::ErrorEvent *arg1 = (Vixen::ErrorEvent *) 0 ;
  int32 arg2 ;
  
  arg1 = (Vixen::ErrorEvent *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ErrLevel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ErrorEvent_ErrLevel_get(void * jarg1) {
  int jresult ;
  Vixen::ErrorEvent *arg1 = (Vixen::ErrorEvent *) 0 ;
  int32 result;
  
  arg1 = (Vixen::ErrorEvent *)jarg1; 
  result = (int32) ((arg1)->ErrLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ErrorEvent_ErrString_set(void * jarg1, void * jarg2) {
  Vixen::ErrorEvent *arg1 = (Vixen::ErrorEvent *) 0 ;
  Vixen::Core::String *arg2 = 0 ;
  
  arg1 = (Vixen::ErrorEvent *)jarg1; 
  
  if (!jarg2)
  {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Vixen::Core::String arg2_str((const char*) jarg2);
  arg2 = &arg2_str;
  
  if (arg1) (arg1)->ErrString = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ErrorEvent_ErrString_get(void * jarg1) {
  void * jresult ;
  Vixen::ErrorEvent *arg1 = (Vixen::ErrorEvent *) 0 ;
  Vixen::Core::String *result = 0 ;
  
  arg1 = (Vixen::ErrorEvent *)jarg1; 
  result = (Vixen::Core::String *) & ((arg1)->ErrString);
  if (result) jresult = SWIG_csharp_string_callback((const char*) *result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ErrorEvent(void * jarg1) {
  Vixen::ErrorEvent *arg1 = (Vixen::ErrorEvent *) 0 ;
  
  arg1 = (Vixen::ErrorEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FrameEvent__SWIG_0(void * jarg1) {
  void * jresult ;
  Vixen::SharedObj *arg1 = (Vixen::SharedObj *) 0 ;
  Vixen::FrameEvent *result = 0 ;
  
  arg1 = (Vixen::SharedObj *)jarg1; 
  result = (Vixen::FrameEvent *)new Vixen::FrameEvent((Vixen::SharedObj const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FrameEvent__SWIG_1() {
  void * jresult ;
  Vixen::FrameEvent *result = 0 ;
  
  result = (Vixen::FrameEvent *)new Vixen::FrameEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FrameEvent__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::Event *arg1 = 0 ;
  Vixen::FrameEvent *result = 0 ;
  
  arg1 = (Vixen::Event *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Event const & type is null", 0);
    return 0;
  } 
  result = (Vixen::FrameEvent *)new Vixen::FrameEvent((Vixen::Event const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FrameEvent_Frame_set(void * jarg1, int jarg2) {
  Vixen::FrameEvent *arg1 = (Vixen::FrameEvent *) 0 ;
  int32 arg2 ;
  
  arg1 = (Vixen::FrameEvent *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Frame = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FrameEvent_Frame_get(void * jarg1) {
  int jresult ;
  Vixen::FrameEvent *arg1 = (Vixen::FrameEvent *) 0 ;
  int32 result;
  
  arg1 = (Vixen::FrameEvent *)jarg1; 
  result = (int32) ((arg1)->Frame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FrameEvent(void * jarg1) {
  Vixen::FrameEvent *arg1 = (Vixen::FrameEvent *) 0 ;
  
  arg1 = (Vixen::FrameEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TriggerEvent__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  Vixen::TriggerEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Vixen::TriggerEvent *)new Vixen::TriggerEvent(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TriggerEvent__SWIG_1() {
  void * jresult ;
  Vixen::TriggerEvent *result = 0 ;
  
  result = (Vixen::TriggerEvent *)new Vixen::TriggerEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TriggerEvent__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::TriggerEvent *arg1 = 0 ;
  Vixen::TriggerEvent *result = 0 ;
  
  arg1 = (Vixen::TriggerEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::TriggerEvent const & type is null", 0);
    return 0;
  } 
  result = (Vixen::TriggerEvent *)new Vixen::TriggerEvent((Vixen::TriggerEvent const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TriggerEvent_Target_set(void * jarg1, void * jarg2) {
  Vixen::TriggerEvent *arg1 = (Vixen::TriggerEvent *) 0 ;
  Vixen::ObjRef *arg2 = (Vixen::ObjRef *) 0 ;
  
  arg1 = (Vixen::TriggerEvent *)jarg1; 
  arg2 = (Vixen::ObjRef *)jarg2; 
  if (arg1) (arg1)->Target = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TriggerEvent_Target_get(void * jarg1) {
  void * jresult ;
  Vixen::TriggerEvent *arg1 = (Vixen::TriggerEvent *) 0 ;
  Vixen::ObjRef *result = 0 ;
  
  arg1 = (Vixen::TriggerEvent *)jarg1; 
  result = (Vixen::ObjRef *)& ((arg1)->Target);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TriggerEvent_Collider_set(void * jarg1, void * jarg2) {
  Vixen::TriggerEvent *arg1 = (Vixen::TriggerEvent *) 0 ;
  Vixen::ObjRef *arg2 = (Vixen::ObjRef *) 0 ;
  
  arg1 = (Vixen::TriggerEvent *)jarg1; 
  arg2 = (Vixen::ObjRef *)jarg2; 
  if (arg1) (arg1)->Collider = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TriggerEvent_Collider_get(void * jarg1) {
  void * jresult ;
  Vixen::TriggerEvent *arg1 = (Vixen::TriggerEvent *) 0 ;
  Vixen::ObjRef *result = 0 ;
  
  arg1 = (Vixen::TriggerEvent *)jarg1; 
  result = (Vixen::ObjRef *)& ((arg1)->Collider);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TriggerEvent_CollidePos_set(void * jarg1, void * jarg2) {
  Vixen::TriggerEvent *arg1 = (Vixen::TriggerEvent *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::TriggerEvent *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->CollidePos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TriggerEvent_CollidePos_get(void * jarg1) {
  void * jresult ;
  Vixen::TriggerEvent *arg1 = (Vixen::TriggerEvent *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::TriggerEvent *)jarg1; 
  result = (Vixen::Vec3 *) & ((arg1)->CollidePos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TriggerEvent(void * jarg1) {
  Vixen::TriggerEvent *arg1 = (Vixen::TriggerEvent *) 0 ;
  
  arg1 = (Vixen::TriggerEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConnectEvent__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  Vixen::ConnectEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Vixen::ConnectEvent *)new Vixen::ConnectEvent(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConnectEvent__SWIG_1() {
  void * jresult ;
  Vixen::ConnectEvent *result = 0 ;
  
  result = (Vixen::ConnectEvent *)new Vixen::ConnectEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConnectEvent__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::ConnectEvent *arg1 = 0 ;
  Vixen::ConnectEvent *result = 0 ;
  
  arg1 = (Vixen::ConnectEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::ConnectEvent const & type is null", 0);
    return 0;
  } 
  result = (Vixen::ConnectEvent *)new Vixen::ConnectEvent((Vixen::ConnectEvent const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConnectEvent_ConnectID_set(void * jarg1, int jarg2) {
  Vixen::ConnectEvent *arg1 = (Vixen::ConnectEvent *) 0 ;
  int32 arg2 ;
  
  arg1 = (Vixen::ConnectEvent *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ConnectID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ConnectEvent_ConnectID_get(void * jarg1) {
  int jresult ;
  Vixen::ConnectEvent *arg1 = (Vixen::ConnectEvent *) 0 ;
  int32 result;
  
  arg1 = (Vixen::ConnectEvent *)jarg1; 
  result = (int32) ((arg1)->ConnectID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ConnectEvent(void * jarg1) {
  Vixen::ConnectEvent *arg1 = (Vixen::ConnectEvent *) 0 ;
  
  arg1 = (Vixen::ConnectEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TriHitEvent__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  Vixen::TriHitEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Vixen::TriHitEvent *)new Vixen::TriHitEvent(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TriHitEvent__SWIG_1() {
  void * jresult ;
  Vixen::TriHitEvent *result = 0 ;
  
  result = (Vixen::TriHitEvent *)new Vixen::TriHitEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TriHitEvent__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::TriHitEvent *arg1 = 0 ;
  Vixen::TriHitEvent *result = 0 ;
  
  arg1 = (Vixen::TriHitEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::TriHitEvent const & type is null", 0);
    return 0;
  } 
  result = (Vixen::TriHitEvent *)new Vixen::TriHitEvent((Vixen::TriHitEvent const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TriHitEvent_Target_set(void * jarg1, void * jarg2) {
  Vixen::TriHitEvent *arg1 = (Vixen::TriHitEvent *) 0 ;
  Vixen::MeshRef *arg2 = (Vixen::MeshRef *) 0 ;
  
  arg1 = (Vixen::TriHitEvent *)jarg1; 
  arg2 = (Vixen::MeshRef *)jarg2; 
  if (arg1) (arg1)->Target = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TriHitEvent_Target_get(void * jarg1) {
  void * jresult ;
  Vixen::TriHitEvent *arg1 = (Vixen::TriHitEvent *) 0 ;
  Vixen::MeshRef *result = 0 ;
  
  arg1 = (Vixen::TriHitEvent *)jarg1; 
  result = (Vixen::MeshRef *)& ((arg1)->Target);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TriHitEvent_Intersect_set(void * jarg1, void * jarg2) {
  Vixen::TriHitEvent *arg1 = (Vixen::TriHitEvent *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::TriHitEvent *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->Intersect = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TriHitEvent_Intersect_get(void * jarg1) {
  void * jresult ;
  Vixen::TriHitEvent *arg1 = (Vixen::TriHitEvent *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::TriHitEvent *)jarg1; 
  result = (Vixen::Vec3 *) & ((arg1)->Intersect);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TriHitEvent_Distance_set(void * jarg1, float jarg2) {
  Vixen::TriHitEvent *arg1 = (Vixen::TriHitEvent *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::TriHitEvent *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Distance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_TriHitEvent_Distance_get(void * jarg1) {
  float jresult ;
  Vixen::TriHitEvent *arg1 = (Vixen::TriHitEvent *) 0 ;
  float result;
  
  arg1 = (Vixen::TriHitEvent *)jarg1; 
  result = (float) ((arg1)->Distance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TriHitEvent_PrimIndex_set(void * jarg1, long long jarg2) {
  Vixen::TriHitEvent *arg1 = (Vixen::TriHitEvent *) 0 ;
  int64 arg2 ;
  
  arg1 = (Vixen::TriHitEvent *)jarg1; 
  arg2 = (int64)jarg2; 
  if (arg1) (arg1)->PrimIndex = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_TriHitEvent_PrimIndex_get(void * jarg1) {
  long long jresult ;
  Vixen::TriHitEvent *arg1 = (Vixen::TriHitEvent *) 0 ;
  int64 result;
  
  arg1 = (Vixen::TriHitEvent *)jarg1; 
  result = (int64) ((arg1)->PrimIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TriHitEvent_TriIndex_set(void * jarg1, long long jarg2) {
  Vixen::TriHitEvent *arg1 = (Vixen::TriHitEvent *) 0 ;
  int64 arg2 ;
  
  arg1 = (Vixen::TriHitEvent *)jarg1; 
  arg2 = (int64)jarg2; 
  if (arg1) (arg1)->TriIndex = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_TriHitEvent_TriIndex_get(void * jarg1) {
  long long jresult ;
  Vixen::TriHitEvent *arg1 = (Vixen::TriHitEvent *) 0 ;
  int64 result;
  
  arg1 = (Vixen::TriHitEvent *)jarg1; 
  result = (int64) ((arg1)->TriIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TriHitEvent(void * jarg1) {
  Vixen::TriHitEvent *arg1 = (Vixen::TriHitEvent *) 0 ;
  
  arg1 = (Vixen::TriHitEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PickEvent__SWIG_0(int jarg1, void * jarg2) {
  void * jresult ;
  int arg1 ;
  Vixen::SharedObj *arg2 = (Vixen::SharedObj *) 0 ;
  Vixen::PickEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (Vixen::SharedObj *)jarg2; 
  result = (Vixen::PickEvent *)new Vixen::PickEvent(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PickEvent__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  Vixen::PickEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Vixen::PickEvent *)new Vixen::PickEvent(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PickEvent__SWIG_2() {
  void * jresult ;
  Vixen::PickEvent *result = 0 ;
  
  result = (Vixen::PickEvent *)new Vixen::PickEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PickEvent__SWIG_3(void * jarg1) {
  void * jresult ;
  Vixen::Event *arg1 = 0 ;
  Vixen::PickEvent *result = 0 ;
  
  arg1 = (Vixen::Event *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Event const & type is null", 0);
    return 0;
  } 
  result = (Vixen::PickEvent *)new Vixen::PickEvent((Vixen::Event const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PickEvent_Target_set(void * jarg1, void * jarg2) {
  Vixen::PickEvent *arg1 = (Vixen::PickEvent *) 0 ;
  Vixen::ObjRef *arg2 = (Vixen::ObjRef *) 0 ;
  
  arg1 = (Vixen::PickEvent *)jarg1; 
  arg2 = (Vixen::ObjRef *)jarg2; 
  if (arg1) (arg1)->Target = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PickEvent_Target_get(void * jarg1) {
  void * jresult ;
  Vixen::PickEvent *arg1 = (Vixen::PickEvent *) 0 ;
  Vixen::ObjRef *result = 0 ;
  
  arg1 = (Vixen::PickEvent *)jarg1; 
  result = (Vixen::ObjRef *)& ((arg1)->Target);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PickEvent(void * jarg1) {
  Vixen::PickEvent *arg1 = (Vixen::PickEvent *) 0 ;
  
  arg1 = (Vixen::PickEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackEvent__SWIG_0(int jarg1, void * jarg2) {
  void * jresult ;
  int arg1 ;
  Vixen::SharedObj *arg2 = (Vixen::SharedObj *) 0 ;
  Vixen::TrackEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (Vixen::SharedObj *)jarg2; 
  result = (Vixen::TrackEvent *)new Vixen::TrackEvent(arg1,(Vixen::SharedObj const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackEvent__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  Vixen::TrackEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Vixen::TrackEvent *)new Vixen::TrackEvent(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackEvent__SWIG_2() {
  void * jresult ;
  Vixen::TrackEvent *result = 0 ;
  
  result = (Vixen::TrackEvent *)new Vixen::TrackEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackEvent__SWIG_3(int jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  Vixen::SharedObj *arg3 = (Vixen::SharedObj *) 0 ;
  Vixen::TrackEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vixen::SharedObj *)jarg3; 
  result = (Vixen::TrackEvent *)new Vixen::TrackEvent(arg1,arg2,(Vixen::SharedObj const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackEvent__SWIG_4(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  Vixen::TrackEvent *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (Vixen::TrackEvent *)new Vixen::TrackEvent(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackEvent__SWIG_5(void * jarg1) {
  void * jresult ;
  Vixen::Event *arg1 = 0 ;
  Vixen::TrackEvent *result = 0 ;
  
  arg1 = (Vixen::Event *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Event const & type is null", 0);
    return 0;
  } 
  result = (Vixen::TrackEvent *)new Vixen::TrackEvent((Vixen::Event const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TrackEvent_UNKNOWN_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::TrackEvent::UNKNOWN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TrackEvent_NEW_USER_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::TrackEvent::NEW_USER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TrackEvent_LOST_USER_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::TrackEvent::LOST_USER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TrackEvent_START_BODY_TRACK_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::TrackEvent::START_BODY_TRACK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TrackEvent_STOP_BODY_TRACK_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::TrackEvent::STOP_BODY_TRACK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TrackEvent_PAUSE_BODY_TRACK_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::TrackEvent::PAUSE_BODY_TRACK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TrackEvent_USER_MOVE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::TrackEvent::USER_MOVE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TrackEvent_INIT_DONE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::TrackEvent::INIT_DONE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TrackEvent_USER_TURN_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::TrackEvent::USER_TURN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TrackEvent_Type_set(void * jarg1, int jarg2) {
  Vixen::TrackEvent *arg1 = (Vixen::TrackEvent *) 0 ;
  int32 arg2 ;
  
  arg1 = (Vixen::TrackEvent *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TrackEvent_Type_get(void * jarg1) {
  int jresult ;
  Vixen::TrackEvent *arg1 = (Vixen::TrackEvent *) 0 ;
  int32 result;
  
  arg1 = (Vixen::TrackEvent *)jarg1; 
  result = (int32) ((arg1)->Type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TrackEvent_UserID_set(void * jarg1, int jarg2) {
  Vixen::TrackEvent *arg1 = (Vixen::TrackEvent *) 0 ;
  int32 arg2 ;
  
  arg1 = (Vixen::TrackEvent *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->UserID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TrackEvent_UserID_get(void * jarg1) {
  int jresult ;
  Vixen::TrackEvent *arg1 = (Vixen::TrackEvent *) 0 ;
  int32 result;
  
  arg1 = (Vixen::TrackEvent *)jarg1; 
  result = (int32) ((arg1)->UserID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TrackEvent_PartIndex_set(void * jarg1, int jarg2) {
  Vixen::TrackEvent *arg1 = (Vixen::TrackEvent *) 0 ;
  int32 arg2 ;
  
  arg1 = (Vixen::TrackEvent *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->PartIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TrackEvent_PartIndex_get(void * jarg1) {
  int jresult ;
  Vixen::TrackEvent *arg1 = (Vixen::TrackEvent *) 0 ;
  int32 result;
  
  arg1 = (Vixen::TrackEvent *)jarg1; 
  result = (int32) ((arg1)->PartIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TrackEvent_Position_set(void * jarg1, void * jarg2) {
  Vixen::TrackEvent *arg1 = (Vixen::TrackEvent *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::TrackEvent *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->Position = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackEvent_Position_get(void * jarg1) {
  void * jresult ;
  Vixen::TrackEvent *arg1 = (Vixen::TrackEvent *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::TrackEvent *)jarg1; 
  result = (Vixen::Vec3 *) & ((arg1)->Position);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TrackEvent_Rotation_set(void * jarg1, void * jarg2) {
  Vixen::TrackEvent *arg1 = (Vixen::TrackEvent *) 0 ;
  Vixen::Quat *arg2 = 0 ;
  
  arg1 = (Vixen::TrackEvent *)jarg1; 
  arg2 = (Vixen::Quat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->Rotation = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackEvent_Rotation_get(void * jarg1) {
  void * jresult ;
  Vixen::TrackEvent *arg1 = (Vixen::TrackEvent *) 0 ;
  Vixen::Quat *result = 0 ;
  
  arg1 = (Vixen::TrackEvent *)jarg1; 
  result = (Vixen::Quat *) & ((arg1)->Rotation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TrackEvent_PartName_set(void * jarg1, void * jarg2) {
  Vixen::TrackEvent *arg1 = (Vixen::TrackEvent *) 0 ;
  Vixen::Core::String *arg2 = 0 ;
  
  arg1 = (Vixen::TrackEvent *)jarg1; 
  
  if (!jarg2)
  {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Vixen::Core::String arg2_str((const char*) jarg2);
  arg2 = &arg2_str;
  
  if (arg1) (arg1)->PartName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackEvent_PartName_get(void * jarg1) {
  void * jresult ;
  Vixen::TrackEvent *arg1 = (Vixen::TrackEvent *) 0 ;
  Vixen::Core::String *result = 0 ;
  
  arg1 = (Vixen::TrackEvent *)jarg1; 
  result = (Vixen::Core::String *) & ((arg1)->PartName);
  if (result) jresult = SWIG_csharp_string_callback((const char*) *result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TrackEvent(void * jarg1) {
  Vixen::TrackEvent *arg1 = (Vixen::TrackEvent *) 0 ;
  
  arg1 = (Vixen::TrackEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BodyTracker() {
  void * jresult ;
  Vixen::BodyTracker *result = 0 ;
  
  result = (Vixen::BodyTracker *)new Vixen::BodyTracker();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BodyTracker(void * jarg1) {
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  arg1->Release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BodyTracker_Configure(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  bool result;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  result = (bool)(arg1)->Configure((TCHAR const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BodyTracker_GetViewVolume(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  Vixen::Box3 *arg2 = 0 ;
  bool result;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  arg2 = (Vixen::Box3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Box3 & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetViewVolume(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BodyTracker_GetPose(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  int arg2 ;
  Vixen::Pose *result = 0 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Vixen::Pose *)((Vixen::BodyTracker const *)arg1)->GetPose(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BodyTracker_GetUserPosition(void * jarg1, int jarg2) {
  void * jresult ;
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  int arg2 ;
  Vixen::Vec3 result;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((Vixen::BodyTracker const *)arg1)->GetUserPosition(arg2);
  jresult = new Vixen::Vec3((const Vixen::Vec3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BodyTracker_OnNewUser(void * jarg1, int jarg2) {
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->OnNewUser(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BodyTracker_OnStartJointTrack(void * jarg1, int jarg2) {
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->OnStartJointTrack(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BodyTracker_OnPauseJointTrack(void * jarg1, int jarg2) {
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->OnPauseJointTrack(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BodyTracker_OnStopJointTrack(void * jarg1, int jarg2) {
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->OnStopJointTrack(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BodyTracker_OnUserMove(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5) {
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  int arg2 ;
  int arg3 ;
  Vixen::Vec3 *arg4 = 0 ;
  Vixen::Quat *arg5 = 0 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Vixen::Vec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  arg5 = (Vixen::Quat *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Quat const & type is null", 0);
    return ;
  } 
  (arg1)->OnUserMove(arg2,arg3,(Vixen::Vec3 const &)*arg4,(Vixen::Quat const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BodyTracker_OnInitDone(void * jarg1) {
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  (arg1)->OnInitDone();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BodyTracker_OnUserTurn(void * jarg1, int jarg2, void * jarg3) {
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  int arg2 ;
  Vixen::Vec3 *arg3 = 0 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vixen::Vec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  (arg1)->OnUserTurn(arg2,(Vixen::Vec3 const &)*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BodyTracker_TRACK_SKELETON_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::BodyTracker::TRACK_SKELETON;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BodyTracker_TRACK_TORSO_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::BodyTracker::TRACK_TORSO;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BodyTracker_TRACK_HANDS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::BodyTracker::TRACK_HANDS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BodyTracker_TRACK_FRONT_ONLY_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::BodyTracker::TRACK_FRONT_ONLY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BodyTracker_MAX_USERS_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::BodyTracker::MAX_USERS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BodyTracker_UserPosition_set(void * jarg1, void * jarg2) {
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  Vixen_BodyTracker_UserPosition_set(arg1,(Vixen::Vec3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BodyTracker_UserPosition_get(void * jarg1) {
  void * jresult ;
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  result = (Vixen::Vec3 *) &Vixen_BodyTracker_UserPosition_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BodyTracker_ImageSize_set(void * jarg1, void * jarg2) {
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  Vixen::Vec2 *arg2 = 0 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  arg2 = (Vixen::Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec2 const & type is null", 0);
    return ;
  } 
  Vixen_BodyTracker_ImageSize_set(arg1,(Vixen::Vec2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BodyTracker_ImageSize_get(void * jarg1) {
  void * jresult ;
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  Vixen::Vec2 *result = 0 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  result = (Vixen::Vec2 *) &Vixen_BodyTracker_ImageSize_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BodyTracker_Skeleton_set(void * jarg1, void * jarg2) {
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  Vixen::Skeleton *arg2 = (Vixen::Skeleton *) 0 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  arg2 = (Vixen::Skeleton *)jarg2; 
  Vixen_BodyTracker_Skeleton_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BodyTracker_Skeleton_get(void * jarg1) {
  void * jresult ;
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  Vixen::Skeleton *result = 0 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  result = (Vixen::Skeleton *)Vixen_BodyTracker_Skeleton_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BodyTracker_PoseMapper_set(void * jarg1, void * jarg2) {
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  Vixen::PoseMapper *arg2 = (Vixen::PoseMapper *) 0 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  arg2 = (Vixen::PoseMapper *)jarg2; 
  Vixen_BodyTracker_PoseMapper_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BodyTracker_PoseMapper_get(void * jarg1) {
  void * jresult ;
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  Vixen::PoseMapper *result = 0 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  result = (Vixen::PoseMapper *)Vixen_BodyTracker_PoseMapper_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BodyTracker_FOV_set(void * jarg1, float jarg2) {
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_BodyTracker_FOV_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BodyTracker_FOV_get(void * jarg1) {
  float jresult ;
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  float result;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  result = (float)Vixen_BodyTracker_FOV_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BodyTracker_UserID_set(void * jarg1, int jarg2) {
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_BodyTracker_UserID_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BodyTracker_UserID_get(void * jarg1) {
  int jresult ;
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  int result;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  result = (int)Vixen_BodyTracker_UserID_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BodyTracker_Options_set(void * jarg1, int jarg2) {
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_BodyTracker_Options_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BodyTracker_Options_get(void * jarg1) {
  int jresult ;
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  int result;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  result = (int)Vixen_BodyTracker_Options_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BodyTracker_ColorTexture_set(void * jarg1, void * jarg2) {
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  Vixen::Texture *arg2 = (Vixen::Texture *) 0 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  arg2 = (Vixen::Texture *)jarg2; 
  Vixen_BodyTracker_ColorTexture_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BodyTracker_ColorTexture_get(void * jarg1) {
  void * jresult ;
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  Vixen::Texture *result = 0 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  result = (Vixen::Texture *)Vixen_BodyTracker_ColorTexture_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BodyTracker_DepthTexture_set(void * jarg1, void * jarg2) {
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  Vixen::Texture *arg2 = (Vixen::Texture *) 0 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  arg2 = (Vixen::Texture *)jarg2; 
  Vixen_BodyTracker_DepthTexture_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BodyTracker_DepthTexture_get(void * jarg1) {
  void * jresult ;
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  Vixen::Texture *result = 0 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  result = (Vixen::Texture *)Vixen_BodyTracker_DepthTexture_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BodyTracker_WaistOffset_set(void * jarg1, void * jarg2) {
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  Vixen::Vec3 *arg2 = 0 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  arg2 = (Vixen::Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec3 const & type is null", 0);
    return ;
  } 
  Vixen_BodyTracker_WaistOffset_set(arg1,(Vixen::Vec3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BodyTracker_WaistOffset_get(void * jarg1) {
  void * jresult ;
  Vixen::BodyTracker *arg1 = (Vixen::BodyTracker *) 0 ;
  Vixen::Vec3 *result = 0 ;
  
  arg1 = (Vixen::BodyTracker *)jarg1; 
  result = (Vixen::Vec3 *) &Vixen_BodyTracker_WaistOffset_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_KinectTracker__SWIG_0(char * jarg1) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  Vixen::KinectTracker *result = 0 ;
  
  arg1 = (TCHAR *)jarg1; 
  result = (Vixen::KinectTracker *)new Vixen::KinectTracker((TCHAR const *)arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_KinectTracker__SWIG_1() {
  void * jresult ;
  Vixen::KinectTracker *result = 0 ;
  
  result = (Vixen::KinectTracker *)new Vixen::KinectTracker();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_KinectTracker__SWIG_2(void * jarg1) {
  void * jresult ;
  Vixen::KinectTracker *arg1 = 0 ;
  Vixen::KinectTracker *result = 0 ;
  
  arg1 = (Vixen::KinectTracker *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::KinectTracker const & type is null", 0);
    return 0;
  } 
  result = (Vixen::KinectTracker *)new Vixen::KinectTracker((Vixen::KinectTracker const &)*arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_KinectTracker(void * jarg1) {
  Vixen::KinectTracker *arg1 = (Vixen::KinectTracker *) 0 ;
  
  arg1 = (Vixen::KinectTracker *)jarg1; 
  arg1->Release();
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_HEAD_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::HEAD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_NECK_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::NECK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_TORSO_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::TORSO;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_WAIST_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::WAIST;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_RIGHT_COLLAR_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::RIGHT_COLLAR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_RIGHT_SHOULDER_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::RIGHT_SHOULDER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_RIGHT_ELBOW_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::RIGHT_ELBOW;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_RIGHT_WRIST_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::RIGHT_WRIST;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_RIGHT_HAND_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::RIGHT_HAND;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_RIGHT_FINGER_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::RIGHT_FINGER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_LEFT_COLLAR_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::LEFT_COLLAR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_LEFT_SHOULDER_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::LEFT_SHOULDER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_LEFT_ELBOW_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::LEFT_ELBOW;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_LEFT_WRIST_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::LEFT_WRIST;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_LEFT_HAND_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::LEFT_HAND;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_LEFT_FINGER_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::LEFT_FINGER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_RIGHT_HIP_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::RIGHT_HIP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_RIGHT_KNEE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::RIGHT_KNEE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_RIGHT_ANKLE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::RIGHT_ANKLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_RIGHT_FOOT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::RIGHT_FOOT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_LEFT_HIP_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::LEFT_HIP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_LEFT_KNEE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::LEFT_KNEE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_LEFT_ANKLE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::LEFT_ANKLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_LEFT_FOOT_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::LEFT_FOOT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinectTracker_NUM_BONES_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::KinectTracker::NUM_BONES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedWorld() {
  void * jresult ;
  Vixen::SharedWorld *result = 0 ;
  
  result = (Vixen::SharedWorld *)new Vixen::SharedWorld();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharedWorld_Get() {
  void * jresult ;
  Vixen::SharedWorld *result = 0 ;
  
  result = (Vixen::SharedWorld *)Vixen::SharedWorld::Get();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SharedWorld_GetMediaDir(void * jarg1) {
  char * jresult ;
  Vixen::SharedWorld *arg1 = (Vixen::SharedWorld *) 0 ;
  TCHAR *result = 0 ;
  
  arg1 = (Vixen::SharedWorld *)jarg1; 
  result = (TCHAR *)(arg1)->GetMediaDir();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedWorld_StopEvents(void * jarg1) {
  Vixen::SharedWorld *arg1 = (Vixen::SharedWorld *) 0 ;
  
  arg1 = (Vixen::SharedWorld *)jarg1; 
  (arg1)->StopEvents();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharedWorld_NextEvent(void * jarg1) {
  void * jresult ;
  Vixen::SharedWorld *arg1 = (Vixen::SharedWorld *) 0 ;
  Vixen::Event *result = 0 ;
  
  arg1 = (Vixen::SharedWorld *)jarg1; 
  result = (Vixen::Event *)(arg1)->NextEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedWorld_Observe__SWIG_0(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  Vixen::SharedWorld *arg1 = (Vixen::SharedWorld *) 0 ;
  int arg2 ;
  Vixen::SharedObj *arg3 = (Vixen::SharedObj *) 0 ;
  Vixen::SharedObj *arg4 = (Vixen::SharedObj *) 0 ;
  
  arg1 = (Vixen::SharedWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vixen::SharedObj *)jarg3; 
  arg4 = (Vixen::SharedObj *)jarg4; 
  (arg1)->Observe(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedWorld_Observe__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  Vixen::SharedWorld *arg1 = (Vixen::SharedWorld *) 0 ;
  int arg2 ;
  Vixen::SharedObj *arg3 = (Vixen::SharedObj *) 0 ;
  
  arg1 = (Vixen::SharedWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vixen::SharedObj *)jarg3; 
  (arg1)->Observe(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedWorld_Observe__SWIG_2(void * jarg1, int jarg2) {
  Vixen::SharedWorld *arg1 = (Vixen::SharedWorld *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::SharedWorld *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Observe(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedWorld_OnMouse(void * jarg1, int jarg2, int jarg3, int jarg4, float jarg5) {
  Vixen::SharedWorld *arg1 = (Vixen::SharedWorld *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  float arg5 ;
  
  arg1 = (Vixen::SharedWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->OnMouse(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedWorld_SuspendScene(void * jarg1) {
  Vixen::SharedWorld *arg1 = (Vixen::SharedWorld *) 0 ;
  
  arg1 = (Vixen::SharedWorld *)jarg1; 
  (arg1)->SuspendScene();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedWorld_ResumeScene(void * jarg1) {
  Vixen::SharedWorld *arg1 = (Vixen::SharedWorld *) 0 ;
  
  arg1 = (Vixen::SharedWorld *)jarg1; 
  (arg1)->ResumeScene();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharedWorld_SaveAsVix(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  Vixen::SharedWorld *arg1 = (Vixen::SharedWorld *) 0 ;
  Vixen::SharedObj *arg2 = (Vixen::SharedObj *) 0 ;
  TCHAR *arg3 = (TCHAR *) 0 ;
  bool result;
  
  arg1 = (Vixen::SharedWorld *)jarg1; 
  arg2 = (Vixen::SharedObj *)jarg2; 
  arg3 = (TCHAR *)jarg3; 
  result = (bool)(arg1)->SaveAsVix(arg2,(TCHAR const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedWorld_LogError(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  Vixen::SharedWorld::LogError((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedWorld_Trace(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  Vixen::SharedWorld::Trace((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedWorld_SetDebugLevel(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Vixen::SharedWorld::SetDebugLevel(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SharedWorld(void * jarg1) {
  Vixen::SharedWorld *arg1 = (Vixen::SharedWorld *) 0 ;
  
  arg1 = (Vixen::SharedWorld *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Viewer3D() {
  void * jresult ;
  Vixen::Viewer< Vixen::SharedWorld > *result = 0 ;
  
  result = (Vixen::Viewer< Vixen::SharedWorld > *)new Vixen::Viewer< Vixen::SharedWorld >();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewer3D_GetScriptor(void * jarg1) {
  void * jresult ;
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  Vixen::Scriptor *result = 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  result = (Vixen::Scriptor *)((Vixen::Viewer< Vixen::SharedWorld > const *)arg1)->GetScriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewer3D_GetNavigator(void * jarg1) {
  void * jresult ;
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  Vixen::Engine *result = 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  result = (Vixen::Engine *)((Vixen::Viewer< Vixen::SharedWorld > const *)arg1)->GetNavigator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewer3D_GetStatLog(void * jarg1) {
  void * jresult ;
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  Vixen::Engine *result = 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  result = (Vixen::Engine *)((Vixen::Viewer< Vixen::SharedWorld > const *)arg1)->GetStatLog();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewer3D_SetEngines(void * jarg1, void * jarg2) {
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  Vixen::Engine *arg2 = (Vixen::Engine *) 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  arg2 = (Vixen::Engine *)jarg2; 
  (arg1)->SetEngines(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewer3D_GetEngines(void * jarg1) {
  void * jresult ;
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  Vixen::Engine *result = 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  result = (Vixen::Engine *)((Vixen::Viewer< Vixen::SharedWorld > const *)arg1)->GetEngines();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewer3D_AddEngine(void * jarg1, void * jarg2) {
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  Vixen::Engine *arg2 = (Vixen::Engine *) 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  arg2 = (Vixen::Engine *)jarg2; 
  (arg1)->AddEngine(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewer3D_SetCamera(void * jarg1, void * jarg2) {
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  Vixen::Camera *arg2 = (Vixen::Camera *) 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  arg2 = (Vixen::Camera *)jarg2; 
  (arg1)->SetCamera(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewer3D_SetNavigator(void * jarg1, void * jarg2) {
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  Vixen::Engine *arg2 = (Vixen::Engine *) 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  arg2 = (Vixen::Engine *)jarg2; 
  (arg1)->SetNavigator(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewer3D_SetStatLog(void * jarg1, void * jarg2) {
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  Vixen::Engine *arg2 = (Vixen::Engine *) 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  arg2 = (Vixen::Engine *)jarg2; 
  (arg1)->SetStatLog(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewer3D_SetModels(void * jarg1, void * jarg2) {
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  Vixen::Model *arg2 = (Vixen::Model *) 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  arg2 = (Vixen::Model *)jarg2; 
  (arg1)->SetModels(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewer3D_GetModels(void * jarg1) {
  void * jresult ;
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  Vixen::Model *result = 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  result = (Vixen::Model *)((Vixen::Viewer< Vixen::SharedWorld > const *)arg1)->GetModels();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewer3D_GetUserModels(void * jarg1) {
  void * jresult ;
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  Vixen::Model *result = 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  result = (Vixen::Model *)((Vixen::Viewer< Vixen::SharedWorld > const *)arg1)->GetUserModels();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewer3D_GetUserEngines(void * jarg1) {
  void * jresult ;
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  Vixen::Engine *result = 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  result = (Vixen::Engine *)((Vixen::Viewer< Vixen::SharedWorld > const *)arg1)->GetUserEngines();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewer3D_AddModel(void * jarg1, void * jarg2) {
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  Vixen::Model *arg2 = (Vixen::Model *) 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  arg2 = (Vixen::Model *)jarg2; 
  (arg1)->AddModel(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Viewer3D_GetScriptFile(void * jarg1) {
  char * jresult ;
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  TCHAR *result = 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  result = (TCHAR *)((Vixen::Viewer< Vixen::SharedWorld > const *)arg1)->GetScriptFile();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewer3D_SetScriptFile(void * jarg1, char * jarg2) {
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  (arg1)->SetScriptFile((TCHAR const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewer3D_SetScriptor(void * jarg1, void * jarg2) {
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  Vixen::Scriptor *arg2 = (Vixen::Scriptor *) 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  arg2 = (Vixen::Scriptor *)jarg2; 
  (arg1)->SetScriptor(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewer3D_Find__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::Scene *arg3 = (Vixen::Scene *) 0 ;
  Vixen::SharedObj *result = 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (Vixen::Scene *)jarg3; 
  result = (Vixen::SharedObj *)((Vixen::Viewer< Vixen::SharedWorld > const *)arg1)->Find((TCHAR const *)arg2,(Vixen::Scene const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewer3D_Find__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::SharedObj *result = 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  result = (Vixen::SharedObj *)((Vixen::Viewer< Vixen::SharedWorld > const *)arg1)->Find((TCHAR const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewer3D_FindAll__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::Scene *arg3 = (Vixen::Scene *) 0 ;
  Vixen::ObjArray *result = 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  arg3 = (Vixen::Scene *)jarg3; 
  result = (Vixen::ObjArray *)((Vixen::Viewer< Vixen::SharedWorld > const *)arg1)->FindAll((TCHAR const *)arg2,(Vixen::Scene const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewer3D_FindAll__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::ObjArray *result = 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  result = (Vixen::ObjArray *)((Vixen::Viewer< Vixen::SharedWorld > const *)arg1)->FindAll((TCHAR const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewer3D_Apply(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  Vixen::Scene *arg2 = (Vixen::Scene *) 0 ;
  int32 arg3 ;
  int32 arg4 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  arg2 = (Vixen::Scene *)jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = (int32)jarg4; 
  (arg1)->Apply(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewer3D_AttachScene(void * jarg1, void * jarg2) {
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  Vixen::Scene *arg2 = (Vixen::Scene *) 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  arg2 = (Vixen::Scene *)jarg2; 
  (arg1)->AttachScene(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewer3D_InitStats(void * jarg1) {
  unsigned int jresult ;
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  bool result;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  result = (bool)(arg1)->InitStats();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewer3D_MakeScene__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  TCHAR *arg2 = (TCHAR *) 0 ;
  Vixen::Scene *result = 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  arg2 = (TCHAR *)jarg2; 
  result = (Vixen::Scene *)(arg1)->MakeScene((TCHAR const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewer3D_MakeScene__SWIG_1(void * jarg1) {
  void * jresult ;
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  Vixen::Scene *result = 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  result = (Vixen::Scene *)(arg1)->MakeScene();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Viewer3D(void * jarg1) {
  Vixen::Viewer< Vixen::SharedWorld > *arg1 = (Vixen::Viewer< Vixen::SharedWorld > *) 0 ;
  
  arg1 = (Vixen::Viewer< Vixen::SharedWorld > *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Physics__SWIG_0(void * jarg1) {
  void * jresult ;
  hkpWorld *arg1 = (hkpWorld *) 0 ;
  Vixen::Physics *result = 0 ;
  
  arg1 = (hkpWorld *)jarg1; 
  result = (Vixen::Physics *)new Vixen::Physics(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Physics__SWIG_1() {
  void * jresult ;
  Vixen::Physics *result = 0 ;
  
  result = (Vixen::Physics *)new Vixen::Physics();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Physics(void * jarg1) {
  Vixen::Physics *arg1 = (Vixen::Physics *) 0 ;
  
  arg1 = (Vixen::Physics *)jarg1; 
  arg1->Release();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics_GetNumThreads(void * jarg1) {
  int jresult ;
  Vixen::Physics *arg1 = (Vixen::Physics *) 0 ;
  int result;
  
  arg1 = (Vixen::Physics *)jarg1; 
  result = (int)((Vixen::Physics const *)arg1)->GetNumThreads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics_SetNumThreads(void * jarg1, int jarg2) {
  Vixen::Physics *arg1 = (Vixen::Physics *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::Physics *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNumThreads(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics_GetTimeStep(void * jarg1) {
  float jresult ;
  Vixen::Physics *arg1 = (Vixen::Physics *) 0 ;
  float result;
  
  arg1 = (Vixen::Physics *)jarg1; 
  result = (float)((Vixen::Physics const *)arg1)->GetTimeStep();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics_Clear(void * jarg1) {
  Vixen::Physics *arg1 = (Vixen::Physics *) 0 ;
  
  arg1 = (Vixen::Physics *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Physics_Startup() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Vixen::Physics::Startup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics_Shutdown__SWIG_0(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Vixen::Physics::Shutdown(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics_Shutdown__SWIG_1() {
  Vixen::Physics::Shutdown();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics_Get() {
  void * jresult ;
  Vixen::Physics *result = 0 ;
  
  result = (Vixen::Physics *)Vixen::Physics::Get();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Physics_IsRunning() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Vixen::Physics::IsRunning();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics_FileName_set(void * jarg1, char * jarg2) {
  Vixen::Physics *arg1 = (Vixen::Physics *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Vixen::Physics *)jarg1; 
  arg2 = (char *)jarg2; 
  Vixen_Physics_FileName_set(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Physics_FileName_get(void * jarg1) {
  char * jresult ;
  Vixen::Physics *arg1 = (Vixen::Physics *) 0 ;
  char *result = 0 ;
  
  arg1 = (Vixen::Physics *)jarg1; 
  result = (char *)Vixen_Physics_FileName_get(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RagDoll__SWIG_0(void * jarg1) {
  void * jresult ;
  hkaSkeleton *arg1 = (hkaSkeleton *) 0 ;
  Vixen::RagDoll *result = 0 ;
  
  arg1 = (hkaSkeleton *)jarg1; 
  result = (Vixen::RagDoll *)new Vixen::RagDoll((hkaSkeleton const *)arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RagDoll__SWIG_1() {
  void * jresult ;
  Vixen::RagDoll *result = 0 ;
  
  result = (Vixen::RagDoll *)new Vixen::RagDoll();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RagDoll(void * jarg1) {
  Vixen::RagDoll *arg1 = (Vixen::RagDoll *) 0 ;
  
  arg1 = (Vixen::RagDoll *)jarg1; 
  arg1->Release();
}


SWIGEXPORT int SWIGSTDCALL CSharp_RagDoll_DYNAMIC_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::RagDoll::DYNAMIC;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RagDoll_POWERED_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::RagDoll::POWERED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RagDoll_DRIVEN_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::RagDoll::DRIVEN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RagDoll_DrivePhysics(void * jarg1) {
  Vixen::RagDoll *arg1 = (Vixen::RagDoll *) 0 ;
  
  arg1 = (Vixen::RagDoll *)jarg1; 
  (arg1)->DrivePhysics();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RagDoll_OnBoneChanged(void * jarg1) {
  Vixen::RagDoll *arg1 = (Vixen::RagDoll *) 0 ;
  
  arg1 = (Vixen::RagDoll *)jarg1; 
  (arg1)->OnBoneChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RagDoll_UpdatePose(void * jarg1) {
  Vixen::RagDoll *arg1 = (Vixen::RagDoll *) 0 ;
  
  arg1 = (Vixen::RagDoll *)jarg1; 
  (arg1)->UpdatePose();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RagDoll_Init__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  Vixen::RagDoll *arg1 = (Vixen::RagDoll *) 0 ;
  int arg2 ;
  int32 *arg3 = (int32 *) 0 ;
  bool result;
  
  arg1 = (Vixen::RagDoll *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int32 *)jarg3; 
  result = (bool)(arg1)->Init(arg2,(int32 const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RagDoll_Init__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Vixen::RagDoll *arg1 = (Vixen::RagDoll *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Vixen::RagDoll *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->Init(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RagDoll_Init__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  Vixen::RagDoll *arg1 = (Vixen::RagDoll *) 0 ;
  bool result;
  
  arg1 = (Vixen::RagDoll *)jarg1; 
  result = (bool)(arg1)->Init();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SkeletonMapper__SWIG_0(void * jarg1) {
  void * jresult ;
  hkaSkeletonMapper *arg1 = (hkaSkeletonMapper *) 0 ;
  Vixen::SkeletonMapper *result = 0 ;
  
  arg1 = (hkaSkeletonMapper *)jarg1; 
  result = (Vixen::SkeletonMapper *)new Vixen::SkeletonMapper((hkaSkeletonMapper const *)arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SkeletonMapper__SWIG_1() {
  void * jresult ;
  Vixen::SkeletonMapper *result = 0 ;
  
  result = (Vixen::SkeletonMapper *)new Vixen::SkeletonMapper();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SkeletonMapper(void * jarg1) {
  Vixen::SkeletonMapper *arg1 = (Vixen::SkeletonMapper *) 0 ;
  
  arg1 = (Vixen::SkeletonMapper *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SkeletonMapper_Source_set(void * jarg1, void * jarg2) {
  Vixen::SkeletonMapper *arg1 = (Vixen::SkeletonMapper *) 0 ;
  Vixen::RagDoll *arg2 = (Vixen::RagDoll *) 0 ;
  
  arg1 = (Vixen::SkeletonMapper *)jarg1; 
  arg2 = (Vixen::RagDoll *)jarg2; 
  Vixen_SkeletonMapper_Source_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SkeletonMapper_Source_get(void * jarg1) {
  void * jresult ;
  Vixen::SkeletonMapper *arg1 = (Vixen::SkeletonMapper *) 0 ;
  Vixen::RagDoll *result = 0 ;
  
  arg1 = (Vixen::SkeletonMapper *)jarg1; 
  result = (Vixen::RagDoll *)Vixen_SkeletonMapper_Source_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClothSim__SWIG_0(void * jarg1) {
  void * jresult ;
  hclWorld *arg1 = (hclWorld *) 0 ;
  Vixen::ClothSim *result = 0 ;
  
  arg1 = (hclWorld *)jarg1; 
  result = (Vixen::ClothSim *)new Vixen::ClothSim(arg1);
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClothSim__SWIG_1() {
  void * jresult ;
  Vixen::ClothSim *result = 0 ;
  
  result = (Vixen::ClothSim *)new Vixen::ClothSim();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ClothSim(void * jarg1) {
  Vixen::ClothSim *arg1 = (Vixen::ClothSim *) 0 ;
  
  arg1 = (Vixen::ClothSim *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClothSim_Get() {
  void * jresult ;
  Vixen::ClothSim *result = 0 ;
  
  result = (Vixen::ClothSim *)Vixen::ClothSim::Get();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClothSim_Shutdown() {
  Vixen::ClothSim::Shutdown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClothSim_GroundPlane_set(void * jarg1, void * jarg2) {
  Vixen::ClothSim *arg1 = (Vixen::ClothSim *) 0 ;
  Vixen::Vec4 *arg2 = 0 ;
  
  arg1 = (Vixen::ClothSim *)jarg1; 
  arg2 = (Vixen::Vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec4 const & type is null", 0);
    return ;
  } 
  Vixen_ClothSim_GroundPlane_set(arg1,(Vixen::Vec4 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClothSim_GroundPlane_get(void * jarg1) {
  void * jresult ;
  Vixen::ClothSim *arg1 = (Vixen::ClothSim *) 0 ;
  Vixen::Vec4 *result = 0 ;
  
  arg1 = (Vixen::ClothSim *)jarg1; 
  result = (Vixen::Vec4 *) &Vixen_ClothSim_GroundPlane_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClothSkin() {
  void * jresult ;
  Vixen::ClothSkin *result = 0 ;
  
  result = (Vixen::ClothSkin *)new Vixen::ClothSkin();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ClothSkin(void * jarg1) {
  Vixen::ClothSkin *arg1 = (Vixen::ClothSkin *) 0 ;
  
  arg1 = (Vixen::ClothSkin *)jarg1; 
  arg1->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SoundPlayer() {
  void * jresult ;
  Vixen::SoundPlayer *result = 0 ;
  
  result = (Vixen::SoundPlayer *)new Vixen::SoundPlayer();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SoundPlayer(void * jarg1) {
  Vixen::SoundPlayer *arg1 = (Vixen::SoundPlayer *) 0 ;
  
  arg1 = (Vixen::SoundPlayer *)jarg1; 
  arg1->Release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SoundPlayer_LoadFile(void * jarg1) {
  unsigned int jresult ;
  Vixen::SoundPlayer *arg1 = (Vixen::SoundPlayer *) 0 ;
  bool result;
  
  arg1 = (Vixen::SoundPlayer *)jarg1; 
  result = (bool)(arg1)->LoadFile();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundPlayer_Volume_set(void * jarg1, float jarg2) {
  Vixen::SoundPlayer *arg1 = (Vixen::SoundPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (Vixen::SoundPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  Vixen_SoundPlayer_Volume_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoundPlayer_Volume_get(void * jarg1) {
  float jresult ;
  Vixen::SoundPlayer *arg1 = (Vixen::SoundPlayer *) 0 ;
  float result;
  
  arg1 = (Vixen::SoundPlayer *)jarg1; 
  result = (float)Vixen_SoundPlayer_Volume_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundPlayer_FileName_set(void * jarg1, char * jarg2) {
  Vixen::SoundPlayer *arg1 = (Vixen::SoundPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Vixen::SoundPlayer *)jarg1; 
  arg2 = (char *)jarg2; 
  Vixen_SoundPlayer_FileName_set(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SoundPlayer_FileName_get(void * jarg1) {
  char * jresult ;
  Vixen::SoundPlayer *arg1 = (Vixen::SoundPlayer *) 0 ;
  char *result = 0 ;
  
  arg1 = (Vixen::SoundPlayer *)jarg1; 
  result = (char *)Vixen_SoundPlayer_FileName_get(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MediaBase() {
  void * jresult ;
  Vixen::MediaBase *result = 0 ;
  
  result = (Vixen::MediaBase *)new Vixen::MediaBase();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MediaBase(void * jarg1) {
  Vixen::MediaBase *arg1 = (Vixen::MediaBase *) 0 ;
  
  arg1 = (Vixen::MediaBase *)jarg1; 
  arg1->Release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaBase_ComputeTexSize(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  int *arg1 = 0 ;
  int *arg2 = 0 ;
  bool result;
  
  arg1 = (int *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return 0;
  } 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return 0;
  } 
  result = (bool)Vixen::MediaBase::ComputeTexSize(*arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaBase_InitImage__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (Vixen::Texture *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)Vixen::MediaBase::InitImage(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaBase_InitImage__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Vixen::Texture *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)Vixen::MediaBase::InitImage(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaBase_CopyImage(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  Vixen::Texture *arg1 = (Vixen::Texture *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (Vixen::Texture *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)Vixen::MediaBase::CopyImage(arg1,(char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MediaBase_LIVE_get() {
  int jresult ;
  int result;
  
  result = (int)Vixen::MediaBase::LIVE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaBase_Options_set(void * jarg1, int jarg2) {
  Vixen::MediaBase *arg1 = (Vixen::MediaBase *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::MediaBase *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_MediaBase_Options_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MediaBase_Options_get(void * jarg1) {
  int jresult ;
  Vixen::MediaBase *arg1 = (Vixen::MediaBase *) 0 ;
  int result;
  
  arg1 = (Vixen::MediaBase *)jarg1; 
  result = (int)Vixen_MediaBase_Options_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaBase_FPS_set(void * jarg1, int jarg2) {
  Vixen::MediaBase *arg1 = (Vixen::MediaBase *) 0 ;
  int arg2 ;
  
  arg1 = (Vixen::MediaBase *)jarg1; 
  arg2 = (int)jarg2; 
  Vixen_MediaBase_FPS_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MediaBase_FPS_get(void * jarg1) {
  int jresult ;
  Vixen::MediaBase *arg1 = (Vixen::MediaBase *) 0 ;
  int result;
  
  arg1 = (Vixen::MediaBase *)jarg1; 
  result = (int)Vixen_MediaBase_FPS_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaBase_FileName_set(void * jarg1, char * jarg2) {
  Vixen::MediaBase *arg1 = (Vixen::MediaBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Vixen::MediaBase *)jarg1; 
  arg2 = (char *)jarg2; 
  Vixen_MediaBase_FileName_set(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MediaBase_FileName_get(void * jarg1) {
  char * jresult ;
  Vixen::MediaBase *arg1 = (Vixen::MediaBase *) 0 ;
  char *result = 0 ;
  
  arg1 = (Vixen::MediaBase *)jarg1; 
  result = (char *)Vixen_MediaBase_FileName_get(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaBase_CaptureSource_set(void * jarg1, char * jarg2) {
  Vixen::MediaBase *arg1 = (Vixen::MediaBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Vixen::MediaBase *)jarg1; 
  arg2 = (char *)jarg2; 
  Vixen_MediaBase_CaptureSource_set(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MediaBase_CaptureSource_get(void * jarg1) {
  char * jresult ;
  Vixen::MediaBase *arg1 = (Vixen::MediaBase *) 0 ;
  char *result = 0 ;
  
  arg1 = (Vixen::MediaBase *)jarg1; 
  result = (char *)Vixen_MediaBase_CaptureSource_get(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaBase_TexSize_set(void * jarg1, void * jarg2) {
  Vixen::MediaBase *arg1 = (Vixen::MediaBase *) 0 ;
  Vixen::Vec2 *arg2 = 0 ;
  
  arg1 = (Vixen::MediaBase *)jarg1; 
  arg2 = (Vixen::Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec2 const & type is null", 0);
    return ;
  } 
  Vixen_MediaBase_TexSize_set(arg1,(Vixen::Vec2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MediaBase_TexSize_get(void * jarg1) {
  void * jresult ;
  Vixen::MediaBase *arg1 = (Vixen::MediaBase *) 0 ;
  Vixen::Vec2 *result = 0 ;
  
  arg1 = (Vixen::MediaBase *)jarg1; 
  result = (Vixen::Vec2 *) &Vixen_MediaBase_TexSize_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaBase_VideoSize_set(void * jarg1, void * jarg2) {
  Vixen::MediaBase *arg1 = (Vixen::MediaBase *) 0 ;
  Vixen::Vec2 *arg2 = 0 ;
  
  arg1 = (Vixen::MediaBase *)jarg1; 
  arg2 = (Vixen::Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vixen::Vec2 const & type is null", 0);
    return ;
  } 
  Vixen_MediaBase_VideoSize_set(arg1,(Vixen::Vec2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MediaBase_VideoSize_get(void * jarg1) {
  void * jresult ;
  Vixen::MediaBase *arg1 = (Vixen::MediaBase *) 0 ;
  Vixen::Vec2 *result = 0 ;
  
  arg1 = (Vixen::MediaBase *)jarg1; 
  result = (Vixen::Vec2 *) &Vixen_MediaBase_VideoSize_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MediaSource() {
  void * jresult ;
  Vixen::MediaSource *result = 0 ;
  
  result = (Vixen::MediaSource *)new Vixen::MediaSource();
  jresult = (void *)result; 
  result->AddRef(); result->MakeLock();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MediaSource(void * jarg1) {
  Vixen::MediaSource *arg1 = (Vixen::MediaSource *) 0 ;
  
  arg1 = (Vixen::MediaSource *)jarg1; 
  arg1->Release();
}


SWIGEXPORT Vixen::Core::BaseObj * SWIGSTDCALL CSharp_RefObj_SWIGUpcast(Vixen::Core::RefObj *jarg1) {
    return (Vixen::Core::BaseObj *)jarg1;
}

SWIGEXPORT Vixen::Core::RefObj * SWIGSTDCALL CSharp_LockObj_SWIGUpcast(Vixen::Core::LockObj *jarg1) {
    return (Vixen::Core::RefObj *)jarg1;
}

SWIGEXPORT Vixen::Core::LockObj * SWIGSTDCALL CSharp_SharedObj_SWIGUpcast(Vixen::SharedObj *jarg1) {
    return (Vixen::Core::LockObj *)jarg1;
}

SWIGEXPORT Vixen::Core::RefPtr * SWIGSTDCALL CSharp_ObjRef_SWIGUpcast(Vixen::Ref< Vixen::SharedObj > *jarg1) {
    return (Vixen::Core::RefPtr *)jarg1;
}

SWIGEXPORT Vixen::SharedObj * SWIGSTDCALL CSharp_CoreObjArray_SWIGUpcast(Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *jarg1) {
    return (Vixen::SharedObj *)jarg1;
}

SWIGEXPORT Vixen::SharedObj * SWIGSTDCALL CSharp_CoreFloatArray_SWIGUpcast(Vixen::Core::BaseArray< float,Vixen::SharedObj > *jarg1) {
    return (Vixen::SharedObj *)jarg1;
}

SWIGEXPORT Vixen::SharedObj * SWIGSTDCALL CSharp_CoreIntArray_SWIGUpcast(Vixen::Core::BaseArray< int32,Vixen::SharedObj > *jarg1) {
    return (Vixen::SharedObj *)jarg1;
}

SWIGEXPORT Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > * SWIGSTDCALL CSharp_SharedObjArray_SWIGUpcast(Vixen::Array< Vixen::ObjRef > *jarg1) {
    return (Vixen::Core::BaseArray< Vixen::ObjRef,Vixen::SharedObj > *)jarg1;
}

SWIGEXPORT Vixen::Array< Vixen::ObjRef > * SWIGSTDCALL CSharp_ObjArray_SWIGUpcast(Vixen::ObjArray *jarg1) {
    return (Vixen::Array< Vixen::ObjRef > *)jarg1;
}

SWIGEXPORT Vixen::Core::BaseArray< int32,Vixen::SharedObj > * SWIGSTDCALL CSharp_SharedIntArray_SWIGUpcast(Vixen::Array< int32 > *jarg1) {
    return (Vixen::Core::BaseArray< int32,Vixen::SharedObj > *)jarg1;
}

SWIGEXPORT Vixen::Core::BaseArray< float,Vixen::SharedObj > * SWIGSTDCALL CSharp_SharedFloatArray_SWIGUpcast(Vixen::Array< float > *jarg1) {
    return (Vixen::Core::BaseArray< float,Vixen::SharedObj > *)jarg1;
}

SWIGEXPORT Vixen::Array< int32 > * SWIGSTDCALL CSharp_IntArray_SWIGUpcast(Vixen::IntArray *jarg1) {
    return (Vixen::Array< int32 > *)jarg1;
}

SWIGEXPORT Vixen::Array< float > * SWIGSTDCALL CSharp_FloatArray_SWIGUpcast(Vixen::FloatArray *jarg1) {
    return (Vixen::Array< float > *)jarg1;
}

SWIGEXPORT Vixen::Core::RefPtr * SWIGSTDCALL CSharp_IntArrayRef_SWIGUpcast(Vixen::Ref< Vixen::IntArray > *jarg1) {
    return (Vixen::Core::RefPtr *)jarg1;
}

SWIGEXPORT Vixen::Vec4 * SWIGSTDCALL CSharp_Quat_SWIGUpcast(Vixen::Quat *jarg1) {
    return (Vixen::Vec4 *)jarg1;
}

SWIGEXPORT Vixen::SharedObj * SWIGSTDCALL CSharp_Matrix_SWIGUpcast(Vixen::Matrix *jarg1) {
    return (Vixen::SharedObj *)jarg1;
}

SWIGEXPORT Vixen::SharedObj * SWIGSTDCALL CSharp_CoreTree_SWIGUpcast(Vixen::Core::Tree< Vixen::SharedObj > *jarg1) {
    return (Vixen::SharedObj *)jarg1;
}

SWIGEXPORT Vixen::Core::Tree< Vixen::SharedObj > * SWIGSTDCALL CSharp_SharedTree_SWIGUpcast(Vixen::Core::RefTree< Vixen::SharedObj > *jarg1) {
    return (Vixen::Core::Tree< Vixen::SharedObj > *)jarg1;
}

SWIGEXPORT Vixen::Core::RefTree< Vixen::SharedObj > * SWIGSTDCALL CSharp_Group_SWIGUpcast(Vixen::Group *jarg1) {
    return (Vixen::Core::RefTree< Vixen::SharedObj > *)jarg1;
}

SWIGEXPORT Vixen::Group * SWIGSTDCALL CSharp_Model_SWIGUpcast(Vixen::Model *jarg1) {
    return (Vixen::Group *)jarg1;
}

SWIGEXPORT Vixen::Model * SWIGSTDCALL CSharp_Camera_SWIGUpcast(Vixen::Camera *jarg1) {
    return (Vixen::Model *)jarg1;
}

SWIGEXPORT Vixen::Model * SWIGSTDCALL CSharp_ExtModel_SWIGUpcast(Vixen::ExtModel *jarg1) {
    return (Vixen::Model *)jarg1;
}

SWIGEXPORT Vixen::SharedObj * SWIGSTDCALL CSharp_Bitmap_SWIGUpcast(Vixen::Bitmap *jarg1) {
    return (Vixen::SharedObj *)jarg1;
}

SWIGEXPORT Vixen::SharedObj * SWIGSTDCALL CSharp_Texture_SWIGUpcast(Vixen::Texture *jarg1) {
    return (Vixen::SharedObj *)jarg1;
}

SWIGEXPORT Vixen::SharedObj * SWIGSTDCALL CSharp_DeviceBuffer_SWIGUpcast(Vixen::DeviceBuffer *jarg1) {
    return (Vixen::SharedObj *)jarg1;
}

SWIGEXPORT Vixen::DeviceBuffer * SWIGSTDCALL CSharp_Material_SWIGUpcast(Vixen::Material *jarg1) {
    return (Vixen::DeviceBuffer *)jarg1;
}

SWIGEXPORT Vixen::Material * SWIGSTDCALL CSharp_PhongMaterial_SWIGUpcast(Vixen::PhongMaterial *jarg1) {
    return (Vixen::Material *)jarg1;
}

SWIGEXPORT Vixen::SharedObj * SWIGSTDCALL CSharp_Sampler_SWIGUpcast(Vixen::Sampler *jarg1) {
    return (Vixen::SharedObj *)jarg1;
}

SWIGEXPORT Vixen::SharedObj * SWIGSTDCALL CSharp_Shader_SWIGUpcast(Vixen::Shader *jarg1) {
    return (Vixen::SharedObj *)jarg1;
}

SWIGEXPORT Vixen::ObjArray * SWIGSTDCALL CSharp_Appearance_SWIGUpcast(Vixen::Appearance *jarg1) {
    return (Vixen::ObjArray *)jarg1;
}

SWIGEXPORT Vixen::SharedObj * SWIGSTDCALL CSharp_VertexPool_SWIGUpcast(Vixen::VertexPool *jarg1) {
    return (Vixen::SharedObj *)jarg1;
}

SWIGEXPORT Vixen::VertexPool * SWIGSTDCALL CSharp_VertexArray_SWIGUpcast(Vixen::VertexArray *jarg1) {
    return (Vixen::VertexPool *)jarg1;
}

SWIGEXPORT Vixen::SharedObj * SWIGSTDCALL CSharp_Geometry_SWIGUpcast(Vixen::Geometry *jarg1) {
    return (Vixen::SharedObj *)jarg1;
}

SWIGEXPORT Vixen::Geometry * SWIGSTDCALL CSharp_Mesh_SWIGUpcast(Vixen::Mesh *jarg1) {
    return (Vixen::Geometry *)jarg1;
}

SWIGEXPORT Vixen::Mesh * SWIGSTDCALL CSharp_TriMesh_SWIGUpcast(Vixen::TriMesh *jarg1) {
    return (Vixen::Mesh *)jarg1;
}

SWIGEXPORT Vixen::Model * SWIGSTDCALL CSharp_Shape_SWIGUpcast(Vixen::Shape *jarg1) {
    return (Vixen::Model *)jarg1;
}

SWIGEXPORT Vixen::Model * SWIGSTDCALL CSharp_Light_SWIGUpcast(Vixen::Light *jarg1) {
    return (Vixen::Model *)jarg1;
}

SWIGEXPORT Vixen::Light * SWIGSTDCALL CSharp_DirectLight_SWIGUpcast(Vixen::DirectLight *jarg1) {
    return (Vixen::Light *)jarg1;
}

SWIGEXPORT Vixen::Light * SWIGSTDCALL CSharp_AmbientLight_SWIGUpcast(Vixen::AmbientLight *jarg1) {
    return (Vixen::Light *)jarg1;
}

SWIGEXPORT Vixen::Light * SWIGSTDCALL CSharp_SpotLight_SWIGUpcast(Vixen::SpotLight *jarg1) {
    return (Vixen::Light *)jarg1;
}

SWIGEXPORT Vixen::Group * SWIGSTDCALL CSharp_Engine_SWIGUpcast(Vixen::Engine *jarg1) {
    return (Vixen::Group *)jarg1;
}

SWIGEXPORT Vixen::Engine * SWIGSTDCALL CSharp_MouseEngine_SWIGUpcast(Vixen::MouseEngine *jarg1) {
    return (Vixen::Engine *)jarg1;
}

SWIGEXPORT Vixen::Engine * SWIGSTDCALL CSharp_Trigger_SWIGUpcast(Vixen::Trigger *jarg1) {
    return (Vixen::Engine *)jarg1;
}

SWIGEXPORT Vixen::Engine * SWIGSTDCALL CSharp_Evaluator_SWIGUpcast(Vixen::Evaluator *jarg1) {
    return (Vixen::Engine *)jarg1;
}

SWIGEXPORT Vixen::Evaluator * SWIGSTDCALL CSharp_Vec3Blender_SWIGUpcast(Vixen::Vec3Blender *jarg1) {
    return (Vixen::Evaluator *)jarg1;
}

SWIGEXPORT Vixen::Evaluator * SWIGSTDCALL CSharp_Interpolator_SWIGUpcast(Vixen::Interpolator *jarg1) {
    return (Vixen::Evaluator *)jarg1;
}

SWIGEXPORT Vixen::Interpolator * SWIGSTDCALL CSharp_KeyFramer_SWIGUpcast(Vixen::KeyFramer *jarg1) {
    return (Vixen::Interpolator *)jarg1;
}

SWIGEXPORT Vixen::KeyFramer * SWIGSTDCALL CSharp_KeyColor_SWIGUpcast(Vixen::Key< Vixen::Col4 > *jarg1) {
    return (Vixen::KeyFramer *)jarg1;
}

SWIGEXPORT Vixen::KeyFramer * SWIGSTDCALL CSharp_FloatInterp_SWIGUpcast(Vixen::Key< float > *jarg1) {
    return (Vixen::KeyFramer *)jarg1;
}

SWIGEXPORT Vixen::Key< Vixen::Col4 > * SWIGSTDCALL CSharp_ColorInterp_SWIGUpcast(Vixen::ColorInterp *jarg1) {
    return (Vixen::Key< Vixen::Col4 > *)jarg1;
}

SWIGEXPORT Vixen::Key< float > * SWIGSTDCALL CSharp_TimeInterp_SWIGUpcast(Vixen::TimeInterp *jarg1) {
    return (Vixen::Key< float > *)jarg1;
}

SWIGEXPORT Vixen::Engine * SWIGSTDCALL CSharp_Transformer_SWIGUpcast(Vixen::Transformer *jarg1) {
    return (Vixen::Engine *)jarg1;
}

SWIGEXPORT Vixen::Engine * SWIGSTDCALL CSharp_Deformer_SWIGUpcast(Vixen::Deformer *jarg1) {
    return (Vixen::Engine *)jarg1;
}

SWIGEXPORT Vixen::Deformer * SWIGSTDCALL CSharp_Morph_SWIGUpcast(Vixen::Morph *jarg1) {
    return (Vixen::Deformer *)jarg1;
}

SWIGEXPORT Vixen::SharedObj * SWIGSTDCALL CSharp_Pose_SWIGUpcast(Vixen::Pose *jarg1) {
    return (Vixen::SharedObj *)jarg1;
}

SWIGEXPORT Vixen::Engine * SWIGSTDCALL CSharp_Skeleton_SWIGUpcast(Vixen::Skeleton *jarg1) {
    return (Vixen::Engine *)jarg1;
}

SWIGEXPORT Vixen::Deformer * SWIGSTDCALL CSharp_Skin_SWIGUpcast(Vixen::Skin *jarg1) {
    return (Vixen::Deformer *)jarg1;
}

SWIGEXPORT Vixen::Engine * SWIGSTDCALL CSharp_PoseMapper_SWIGUpcast(Vixen::PoseMapper *jarg1) {
    return (Vixen::Engine *)jarg1;
}

SWIGEXPORT Vixen::Engine * SWIGSTDCALL CSharp_Animator_SWIGUpcast(Vixen::Animator *jarg1) {
    return (Vixen::Engine *)jarg1;
}

SWIGEXPORT Vixen::Animator * SWIGSTDCALL CSharp_BoneAnimator_SWIGUpcast(Vixen::BoneAnimator *jarg1) {
    return (Vixen::Animator *)jarg1;
}

SWIGEXPORT Vixen::Engine * SWIGSTDCALL CSharp_Sequencer_SWIGUpcast(Vixen::Sequencer *jarg1) {
    return (Vixen::Engine *)jarg1;
}

SWIGEXPORT Vixen::Sequencer * SWIGSTDCALL CSharp_Scriptor_SWIGUpcast(Vixen::Scriptor *jarg1) {
    return (Vixen::Sequencer *)jarg1;
}

SWIGEXPORT Vixen::Deformer * SWIGSTDCALL CSharp_MeshAnimator_SWIGUpcast(Vixen::MeshAnimator *jarg1) {
    return (Vixen::Deformer *)jarg1;
}

SWIGEXPORT Vixen::SharedObj * SWIGSTDCALL CSharp_Scene_SWIGUpcast(Vixen::Scene *jarg1) {
    return (Vixen::SharedObj *)jarg1;
}

SWIGEXPORT Vixen::SharedObj * SWIGSTDCALL CSharp_World_SWIGUpcast(Vixen::World *jarg1) {
    return (Vixen::SharedObj *)jarg1;
}

SWIGEXPORT Vixen::World * SWIGSTDCALL CSharp_World3D_SWIGUpcast(Vixen::World3D *jarg1) {
    return (Vixen::World *)jarg1;
}

SWIGEXPORT Vixen::MouseEngine * SWIGSTDCALL CSharp_Navigator_SWIGUpcast(Vixen::Navigator *jarg1) {
    return (Vixen::MouseEngine *)jarg1;
}

SWIGEXPORT Vixen::Navigator * SWIGSTDCALL CSharp_Flyer_SWIGUpcast(Vixen::Flyer *jarg1) {
    return (Vixen::Navigator *)jarg1;
}

SWIGEXPORT Vixen::MouseEngine * SWIGSTDCALL CSharp_Picker_SWIGUpcast(Vixen::Picker *jarg1) {
    return (Vixen::MouseEngine *)jarg1;
}

SWIGEXPORT Vixen::Picker * SWIGSTDCALL CSharp_RayPicker_SWIGUpcast(Vixen::RayPicker *jarg1) {
    return (Vixen::Picker *)jarg1;
}

SWIGEXPORT Vixen::RayPicker * SWIGSTDCALL CSharp_NamePicker_SWIGUpcast(Vixen::NamePicker *jarg1) {
    return (Vixen::RayPicker *)jarg1;
}

SWIGEXPORT Vixen::Core::BaseObj * SWIGSTDCALL CSharp_Event_SWIGUpcast(Vixen::Event *jarg1) {
    return (Vixen::Core::BaseObj *)jarg1;
}

SWIGEXPORT Vixen::Core::RefPtr * SWIGSTDCALL CSharp_SceneRef_SWIGUpcast(Vixen::Ref< Vixen::Scene > *jarg1) {
    return (Vixen::Core::RefPtr *)jarg1;
}

SWIGEXPORT Vixen::Core::RefPtr * SWIGSTDCALL CSharp_MeshRef_SWIGUpcast(Vixen::Ref< Vixen::Mesh > *jarg1) {
    return (Vixen::Core::RefPtr *)jarg1;
}

SWIGEXPORT Vixen::Event * SWIGSTDCALL CSharp_LoadEvent_SWIGUpcast(Vixen::LoadEvent *jarg1) {
    return (Vixen::Event *)jarg1;
}

SWIGEXPORT Vixen::LoadEvent * SWIGSTDCALL CSharp_LoadSceneEvent_SWIGUpcast(Vixen::LoadSceneEvent *jarg1) {
    return (Vixen::LoadEvent *)jarg1;
}

SWIGEXPORT Vixen::LoadEvent * SWIGSTDCALL CSharp_LoadTextEvent_SWIGUpcast(Vixen::LoadTextEvent *jarg1) {
    return (Vixen::LoadEvent *)jarg1;
}

SWIGEXPORT Vixen::LoadEvent * SWIGSTDCALL CSharp_LoadDataEvent_SWIGUpcast(Vixen::LoadDataEvent *jarg1) {
    return (Vixen::LoadEvent *)jarg1;
}

SWIGEXPORT Vixen::Event * SWIGSTDCALL CSharp_MouseEvent_SWIGUpcast(Vixen::MouseEvent *jarg1) {
    return (Vixen::Event *)jarg1;
}

SWIGEXPORT Vixen::Event * SWIGSTDCALL CSharp_NavInputEvent_SWIGUpcast(Vixen::NavInputEvent *jarg1) {
    return (Vixen::Event *)jarg1;
}

SWIGEXPORT Vixen::Event * SWIGSTDCALL CSharp_KeyEvent_SWIGUpcast(Vixen::KeyEvent *jarg1) {
    return (Vixen::Event *)jarg1;
}

SWIGEXPORT Vixen::Event * SWIGSTDCALL CSharp_NavigateEvent_SWIGUpcast(Vixen::NavigateEvent *jarg1) {
    return (Vixen::Event *)jarg1;
}

SWIGEXPORT Vixen::Event * SWIGSTDCALL CSharp_SceneEvent_SWIGUpcast(Vixen::SceneEvent *jarg1) {
    return (Vixen::Event *)jarg1;
}

SWIGEXPORT Vixen::Event * SWIGSTDCALL CSharp_ErrorEvent_SWIGUpcast(Vixen::ErrorEvent *jarg1) {
    return (Vixen::Event *)jarg1;
}

SWIGEXPORT Vixen::Event * SWIGSTDCALL CSharp_FrameEvent_SWIGUpcast(Vixen::FrameEvent *jarg1) {
    return (Vixen::Event *)jarg1;
}

SWIGEXPORT Vixen::Event * SWIGSTDCALL CSharp_TriggerEvent_SWIGUpcast(Vixen::TriggerEvent *jarg1) {
    return (Vixen::Event *)jarg1;
}

SWIGEXPORT Vixen::Event * SWIGSTDCALL CSharp_ConnectEvent_SWIGUpcast(Vixen::ConnectEvent *jarg1) {
    return (Vixen::Event *)jarg1;
}

SWIGEXPORT Vixen::Event * SWIGSTDCALL CSharp_TriHitEvent_SWIGUpcast(Vixen::TriHitEvent *jarg1) {
    return (Vixen::Event *)jarg1;
}

SWIGEXPORT Vixen::Event * SWIGSTDCALL CSharp_PickEvent_SWIGUpcast(Vixen::PickEvent *jarg1) {
    return (Vixen::Event *)jarg1;
}

SWIGEXPORT Vixen::Event * SWIGSTDCALL CSharp_TrackEvent_SWIGUpcast(Vixen::TrackEvent *jarg1) {
    return (Vixen::Event *)jarg1;
}

SWIGEXPORT Vixen::Engine * SWIGSTDCALL CSharp_BodyTracker_SWIGUpcast(Vixen::BodyTracker *jarg1) {
    return (Vixen::Engine *)jarg1;
}

SWIGEXPORT Vixen::BodyTracker * SWIGSTDCALL CSharp_KinectTracker_SWIGUpcast(Vixen::KinectTracker *jarg1) {
    return (Vixen::BodyTracker *)jarg1;
}

SWIGEXPORT Vixen::World3D * SWIGSTDCALL CSharp_SharedWorld_SWIGUpcast(Vixen::SharedWorld *jarg1) {
    return (Vixen::World3D *)jarg1;
}

SWIGEXPORT Vixen::SharedWorld * SWIGSTDCALL CSharp_Viewer3D_SWIGUpcast(Vixen::Viewer< Vixen::SharedWorld > *jarg1) {
    return (Vixen::SharedWorld *)jarg1;
}

SWIGEXPORT Vixen::Engine * SWIGSTDCALL CSharp_Physics_SWIGUpcast(Vixen::Physics *jarg1) {
    return (Vixen::Engine *)jarg1;
}

SWIGEXPORT Vixen::Skeleton * SWIGSTDCALL CSharp_RagDoll_SWIGUpcast(Vixen::RagDoll *jarg1) {
    return (Vixen::Skeleton *)jarg1;
}

SWIGEXPORT Vixen::PoseMapper * SWIGSTDCALL CSharp_SkeletonMapper_SWIGUpcast(Vixen::SkeletonMapper *jarg1) {
    return (Vixen::PoseMapper *)jarg1;
}

SWIGEXPORT Vixen::Engine * SWIGSTDCALL CSharp_ClothSim_SWIGUpcast(Vixen::ClothSim *jarg1) {
    return (Vixen::Engine *)jarg1;
}

SWIGEXPORT Vixen::Skin * SWIGSTDCALL CSharp_ClothSkin_SWIGUpcast(Vixen::ClothSkin *jarg1) {
    return (Vixen::Skin *)jarg1;
}

SWIGEXPORT Vixen::Engine * SWIGSTDCALL CSharp_SoundPlayer_SWIGUpcast(Vixen::SoundPlayer *jarg1) {
    return (Vixen::Engine *)jarg1;
}

SWIGEXPORT Vixen::Engine * SWIGSTDCALL CSharp_MediaBase_SWIGUpcast(Vixen::MediaBase *jarg1) {
    return (Vixen::Engine *)jarg1;
}

SWIGEXPORT Vixen::MediaBase * SWIGSTDCALL CSharp_MediaSource_SWIGUpcast(Vixen::MediaSource *jarg1) {
    return (Vixen::MediaBase *)jarg1;
}

#ifdef __cplusplus
}
#endif

static bool initialize_vixen()
{
  return World::Startup();
}

extern bool Vixen_Initialized = initialize_vixen();


