/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package Vixen;

public class SharedObj extends LockObj {
  private long swigCPtr;

  public SharedObj(long cPtr, boolean cMemoryOwn) {
    super(VixenLibJNI.SharedObj_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(SharedObj obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        VixenLibJNI.delete_SharedObj(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


public bool SameAs(SharedObj obj)
{
	if (obj.swigCPtr.Handle == swigCPtr.Handle)
		return true;
	return false;
}

public SharedObj ConvertTo(SerialID classid)
{
	if ((swigCPtr.Handle != null) &&
		IsClass((uint) classid))
		return SharedObj.MakeObject(swigCPtr.Handle, false);
	return null;
}

static public SharedObj MakeObject(jlong cptr, bool memown)
{
	SharedObj obj = new SharedObj(cptr, false);
	if (cptr == 0)
		return null;
	SerialID classid = (SerialID) obj.ClassID;
	obj.AddRef();
	switch (classid)
	{
		case SerialID.VX_IntArray:		return new IntArray(cptr, memown);
		case SerialID.VX_FloatArray:	return new FloatArray(cptr, memown);
		case SerialID.VX_ObjArray:		return new ObjArray(cptr, memown);
		case SerialID.VX_Matrix:		return new Matrix(cptr, memown);
		case SerialID.VX_PhongMaterial:	return new PhongMaterial(cptr, memown);
		case SerialID.VX_Material:		return new Material(cptr, memown);
		case SerialID.VX_Image:			return new Texture(cptr, memown);
		case SerialID.VX_Appearance:	return new Appearance(cptr, memown);
		case SerialID.VX_Engine:		return new Engine(cptr, memown);
		case SerialID.VX_Scene:			return new Scene(cptr, memown);
		case SerialID.VX_Sampler:		return new Sampler(cptr, memown);
		case SerialID.VX_VtxArray:		return new VertexArray(cptr, memown);
		case SerialID.VX_Mesh:			return new Mesh(cptr, memown);
		case SerialID.VX_TriMesh:		return new TriMesh(cptr, memown);
		case SerialID.VX_Model:			return new Model(cptr, memown);
		case SerialID.VX_ExtModel:		return new ExtModel(cptr, memown);
		case SerialID.VX_Shape:			return new Shape(cptr, memown);
		case SerialID.VX_Light:			return new Light(cptr, memown);
		case SerialID.VX_Camera:		return new Camera(cptr, memown);
		case SerialID.VX_DirectLight:	return new DirectLight(cptr, memown);
		case SerialID.VX_SpotLight:		return new SpotLight(cptr, memown);
		case SerialID.VX_World3D:		return new SharedWorld(cptr, memown);
		case SerialID.VX_Transformer:	return new Transformer(cptr, memown);
		case SerialID.VX_KeyFramer:		return new KeyFramer(cptr, memown);
		case SerialID.VX_Interpolator:	return new Interpolator(cptr, memown);
		case SerialID.VX_Trigger:		return new Trigger(cptr, memown);
		case SerialID.VX_Flyer:			return new Flyer(cptr, memown);
		case SerialID.VX_Navigator:		return new Navigator(cptr, memown);
		case SerialID.VX_Skeleton:		return new Skeleton(cptr, memown);
		case SerialID.VX_Skin:			return new Skin(cptr, memown);
		case SerialID.VX_Deformer:		return new Deformer(cptr, memown);
		case SerialID.VX_RayPicker:		return new RayPicker(cptr, memown);
		case SerialID.VX_PoseMapper:	return new PoseMapper(cptr, memown);
		case SerialID.VX_Animator:		return new Animator(cptr, memown);
		case SerialID.VX_BoneAnimator:	return new BoneAnimator(cptr, memown);
		case SerialID.VX_Scriptor:		return new Scriptor(cptr, memown);
		case SerialID.VX_Sequencer:		return new Sequencer(cptr, memown);
		case SerialID.VX_MeshAnimator:	return new MeshAnimator(cptr, memown);
		case SerialID.VX_Pose:			return new Pose(cptr, memown);
		case SerialID.VX_Morph:			return new Morph(cptr, memown);
#ifndef VIXEN_LITE
		case SerialID.VX_BodyTracker:	return new BodyTracker(cptr, memown);
		case SerialID.VX_KinectTracker:	return new KinectTracker(cptr, memown);
		case SerialID.VX_Physics:		return new Physics(cptr, memown);
		case SerialID.VX_RigidBody:		return new Transformer(cptr, memown);
		case SerialID.VX_ClothSim:		return new ClothSim(cptr, memown);
		case SerialID.VX_ClothSkin:		return new ClothSkin(cptr, memown);
		case SerialID.VX_SkeletonMapper:	return new PoseMapper(cptr, memown);
		case SerialID.VX_SoundPlayer:	return new SoundPlayer(cptr, memown);
		case SerialID.VX_MediaSource:	return new MediaSource(cptr, memown);
#endif
		default:
		{
			if (obj.IsClass((uint) SerialID.VX_Model))
				return new Model(cptr, memown);
			else if (obj.IsClass((uint) SerialID.VX_Engine))
				return new Engine(cptr, memown);
		}
		obj.Release();
		return null;
	}
}

  public SharedObj() {
    this(VixenLibJNI.new_SharedObj__SWIG_0(), true);
  }

  public SharedObj(SharedObj arg0) {
    this(VixenLibJNI.new_SharedObj__SWIG_1(SharedObj.getCPtr(arg0), arg0), true);
  }

  public boolean Copy(SharedObj arg0) {
    return VixenLibJNI.SharedObj_Copy(swigCPtr, this, SharedObj.getCPtr(arg0), arg0);
  }

  public SharedObj Clone() 
	{
		jlong ptr = VixenLibJNI.SharedObj_Clone(swigCPtr, this);
		return (SharedObj)  SharedObj.MakeObject(ptr, true);
	}


  public long GetID() {
    return VixenLibJNI.SharedObj_GetID(swigCPtr, this);
  }

  public void SetID(long id) {
    VixenLibJNI.SharedObj_SetID(swigCPtr, this, id);
  }

  public static int FindClass(String name) {
    return VixenLibJNI.SharedObj_FindClass(name);
  }

  public static SharedObj Create(long id) 
	{
		jlong ptr = VixenLibJNI.SharedObj_Create__SWIG_0(id);
		return (SharedObj)  SharedObj.MakeObject(ptr, true);
	}


  public static SharedObj Create() 
	{
		jlong ptr = VixenLibJNI.SharedObj_Create__SWIG_1();
		return (SharedObj)  SharedObj.MakeObject(ptr, true);
	}


  public boolean HasChanged() {
    return VixenLibJNI.SharedObj_HasChanged(swigCPtr, this);
  }

  public void SetChanged(boolean arg0) {
    VixenLibJNI.SharedObj_SetChanged(swigCPtr, this, arg0);
  }

  public boolean IsActive() {
    return VixenLibJNI.SharedObj_IsActive(swigCPtr, this);
  }

  public void SetActive(boolean arg0) {
    VixenLibJNI.SharedObj_SetActive(swigCPtr, this, arg0);
  }

  public boolean IsSet(long flags) {
    return VixenLibJNI.SharedObj_IsSet(swigCPtr, this, flags);
  }

  public int IsGlobal() {
    return VixenLibJNI.SharedObj_IsGlobal(swigCPtr, this);
  }

  public int IsShared() {
    return VixenLibJNI.SharedObj_IsShared__SWIG_0(swigCPtr, this);
  }

  public static int IsShared(long arg0) {
    return VixenLibJNI.SharedObj_IsShared__SWIG_1(arg0);
  }

  public long GetFlags() {
    return VixenLibJNI.SharedObj_GetFlags(swigCPtr, this);
  }

  public void SetFlags(long flags) {
    VixenLibJNI.SharedObj_SetFlags(swigCPtr, this, flags);
  }

  public void ClearFlags(long flags) {
    VixenLibJNI.SharedObj_ClearFlags(swigCPtr, this, flags);
  }

  public String GetName(int key) {
    return VixenLibJNI.SharedObj_GetName__SWIG_0(swigCPtr, this, key);
  }

  public String GetName() {
    return VixenLibJNI.SharedObj_GetName__SWIG_1(swigCPtr, this);
  }

  public boolean SetName(String arg0, int key) {
    return VixenLibJNI.SharedObj_SetName__SWIG_0(swigCPtr, this, arg0, key);
  }

  public boolean SetName(String arg0) {
    return VixenLibJNI.SharedObj_SetName__SWIG_1(swigCPtr, this, arg0);
  }

  public void Dump() {
    VixenLibJNI.SharedObj_Dump__SWIG_0(swigCPtr, this);
  }

  public void Dump(String options) {
    VixenLibJNI.SharedObj_Dump__SWIG_1(swigCPtr, this, options);
  }

  public final static int NOFREE = VixenLibJNI.SharedObj_NOFREE_get();
  public final static int SAVED = VixenLibJNI.SharedObj_SAVED_get();
  public final static int GLOBAL = VixenLibJNI.SharedObj_GLOBAL_get();
  public final static int SHARED = VixenLibJNI.SharedObj_SHARED_get();
  public final static int DOEVENTS = VixenLibJNI.SharedObj_DOEVENTS_get();
  public final static int CHANGED = VixenLibJNI.SharedObj_CHANGED_get();
  public final static int INACTIVE = VixenLibJNI.SharedObj_INACTIVE_get();
  public final static int OBJ_LASTUSED = VixenLibJNI.SharedObj_OBJ_LASTUSED_get();

}
