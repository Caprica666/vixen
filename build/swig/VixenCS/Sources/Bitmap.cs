/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class Bitmap : SharedObj {
  private HandleRef swigCPtr;

  internal Bitmap(IntPtr cPtr, bool cMemoryOwn) : base(VixenLibPINVOKE.Bitmap_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Bitmap obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Bitmap() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_Bitmap(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Bitmap() : this(VixenLibPINVOKE.new_Bitmap(), true) {
  }

  public void Kill() {
    VixenLibPINVOKE.Bitmap_Kill(swigCPtr);
  }

  public static bool WriteRGB(string filename, SWIGTYPE_p_void pixels, int width, int height, int depth) {
    bool ret = VixenLibPINVOKE.Bitmap_WriteRGB(filename, SWIGTYPE_p_void.getCPtr(pixels), width, height, depth);
    return ret;
  }

  public int Type {
    set {
      VixenLibPINVOKE.Bitmap_Type_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.Bitmap_Type_get(swigCPtr);
      return ret;
    } 
  }

  public int Depth {
    set {
      VixenLibPINVOKE.Bitmap_Depth_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.Bitmap_Depth_get(swigCPtr);
      return ret;
    } 
  }

  public int Format {
    set {
      VixenLibPINVOKE.Bitmap_Format_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.Bitmap_Format_get(swigCPtr);
      return ret;
    } 
  }

  public int Width {
    set {
      VixenLibPINVOKE.Bitmap_Width_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.Bitmap_Width_get(swigCPtr);
      return ret;
    } 
  }

  public int Height {
    set {
      VixenLibPINVOKE.Bitmap_Height_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.Bitmap_Height_get(swigCPtr);
      return ret;
    } 
  }

  public int ByteSize {
    set {
      VixenLibPINVOKE.Bitmap_ByteSize_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.Bitmap_ByteSize_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_void Data {
    set {
      VixenLibPINVOKE.Bitmap_Data_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      IntPtr cPtr = VixenLibPINVOKE.Bitmap_Data_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public static readonly int ISLOADING = VixenLibPINVOKE.Bitmap_ISLOADING_get();
  public static readonly int NOTEXTURE = VixenLibPINVOKE.Bitmap_NOTEXTURE_get();
  public static readonly int DIB = VixenLibPINVOKE.Bitmap_DIB_get();
  public static readonly int GLBITMAP = VixenLibPINVOKE.Bitmap_GLBITMAP_get();
  public static readonly int DXBITMAP = VixenLibPINVOKE.Bitmap_DXBITMAP_get();
  public static readonly int DDS = VixenLibPINVOKE.Bitmap_DDS_get();
  public static readonly int FONT = VixenLibPINVOKE.Bitmap_FONT_get();
  public static readonly int TEXHANDLE = VixenLibPINVOKE.Bitmap_TEXHANDLE_get();

  public static readonly int HASALPHA = VixenLibPINVOKE.Bitmap_HASALPHA_get();
  public static readonly int NOFREE_DATA = VixenLibPINVOKE.Bitmap_NOFREE_DATA_get();
  public static readonly int HASCOLOR = VixenLibPINVOKE.Bitmap_HASCOLOR_get();
  public static readonly int HASCOLORKEY = VixenLibPINVOKE.Bitmap_HASCOLORKEY_get();

}

}
