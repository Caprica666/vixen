/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class Light : Model {
  private HandleRef swigCPtr;

  internal Light(IntPtr cPtr, bool cMemoryOwn) : base(VixenLibPINVOKE.Light_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Light obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Light() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_Light(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Light(string layout_desc, string shadername) : this(VixenLibPINVOKE.new_Light__SWIG_0(layout_desc, shadername), true) {
  }

  public Light(string layout_desc) : this(VixenLibPINVOKE.new_Light__SWIG_1(layout_desc), true) {
  }

  public Light() : this(VixenLibPINVOKE.new_Light__SWIG_2(), true) {
  }

  public void SetDecay(int arg0) {
    VixenLibPINVOKE.Light_SetDecay(swigCPtr, arg0);
  }

  public int GetDecay() {
    int ret = VixenLibPINVOKE.Light_GetDecay(swigCPtr);
    return ret;
  }

  public void Attach(Scene arg0) {
    VixenLibPINVOKE.Light_Attach(swigCPtr, Scene.getCPtr(arg0));
  }

  public DeviceBuffer GetDataBuffer() {
    IntPtr cPtr = VixenLibPINVOKE.Light_GetDataBuffer__SWIG_0(swigCPtr);
    DeviceBuffer ret = (cPtr == IntPtr.Zero) ? null : new DeviceBuffer(cPtr, false);
    return ret;
  }

  public virtual new Vec3 GetCenter(int arg0) {
    Vec3 ret = new Vec3(VixenLibPINVOKE.Light_GetCenter__SWIG_0(swigCPtr, arg0), true);
    return ret;
  }

  public override bool GetCenter(Vec3 arg0, int arg1) {
    bool ret = VixenLibPINVOKE.Light_GetCenter__SWIG_1(swigCPtr, Vec3.getCPtr(arg0), arg1);
    return ret;
  }

  public override bool GetCenter(Vec3 arg0) {
    bool ret = VixenLibPINVOKE.Light_GetCenter__SWIG_2(swigCPtr, Vec3.getCPtr(arg0));
    return ret;
  }

  public Col4 Color {
    set {
      VixenLibPINVOKE.Light_Color_set(swigCPtr, Col4.getCPtr(value));
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      Col4 ret = new Col4(VixenLibPINVOKE.Light_Color_get(swigCPtr), false);
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float Radius {
    set {
      VixenLibPINVOKE.Light_Radius_set(swigCPtr, value);
    } 
    get {
      float ret = VixenLibPINVOKE.Light_Radius_get(swigCPtr);
      return ret;
    } 
  }

  public static readonly int NONE = VixenLibPINVOKE.Light_NONE_get();
  public static readonly int INVERSE = VixenLibPINVOKE.Light_INVERSE_get();
  public static readonly int INVERSE_SQUARE = VixenLibPINVOKE.Light_INVERSE_SQUARE_get();

}

}
