/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class BodyTracker : Engine {
  private HandleRef swigCPtr;

  internal BodyTracker(IntPtr cPtr, bool cMemoryOwn) : base(VixenLibPINVOKE.BodyTracker_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BodyTracker obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~BodyTracker() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_BodyTracker(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public BodyTracker() : this(VixenLibPINVOKE.new_BodyTracker(), true) {
  }

  public virtual bool Configure(string configfile) {
    bool ret = VixenLibPINVOKE.BodyTracker_Configure(swigCPtr, configfile);
    return ret;
  }

  public virtual bool GetViewVolume(Box3 vvol) {
    bool ret = VixenLibPINVOKE.BodyTracker_GetViewVolume(swigCPtr, Box3.getCPtr(vvol));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Pose GetPose(int userid) 
	{
		IntPtr cPtr = VixenLibPINVOKE.BodyTracker_GetPose(swigCPtr, userid);
		return (Pose)  SharedObj.MakeObject(cPtr, true);
	}


  public Vec3 GetUserPosition(int userid) {
    Vec3 ret = new Vec3(VixenLibPINVOKE.BodyTracker_GetUserPosition(swigCPtr, userid), true);
    return ret;
  }

  public virtual void OnNewUser(int userid) {
    VixenLibPINVOKE.BodyTracker_OnNewUser(swigCPtr, userid);
  }

  public virtual void OnStartJointTrack(int userid) {
    VixenLibPINVOKE.BodyTracker_OnStartJointTrack(swigCPtr, userid);
  }

  public virtual void OnPauseJointTrack(int userid) {
    VixenLibPINVOKE.BodyTracker_OnPauseJointTrack(swigCPtr, userid);
  }

  public virtual void OnStopJointTrack(int userid) {
    VixenLibPINVOKE.BodyTracker_OnStopJointTrack(swigCPtr, userid);
  }

  public virtual void OnUserMove(int userid, int partindex, Vec3 pos, Quat dir) {
    VixenLibPINVOKE.BodyTracker_OnUserMove(swigCPtr, userid, partindex, Vec3.getCPtr(pos), Quat.getCPtr(dir));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnInitDone() {
    VixenLibPINVOKE.BodyTracker_OnInitDone(swigCPtr);
  }

  public virtual void OnUserTurn(int userid, Vec3 torsoz) {
    VixenLibPINVOKE.BodyTracker_OnUserTurn(swigCPtr, userid, Vec3.getCPtr(torsoz));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Vec3 UserPosition {
    set {
      VixenLibPINVOKE.BodyTracker_UserPosition_set(swigCPtr, Vec3.getCPtr(value));
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      Vec3 ret = new Vec3(VixenLibPINVOKE.BodyTracker_UserPosition_get(swigCPtr), false);
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Vec2 ImageSize {
    set {
      VixenLibPINVOKE.BodyTracker_ImageSize_set(swigCPtr, Vec2.getCPtr(value));
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      Vec2 ret = new Vec2(VixenLibPINVOKE.BodyTracker_ImageSize_get(swigCPtr), false);
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Skeleton Skeleton {
    set {
      VixenLibPINVOKE.BodyTracker_Skeleton_set(swigCPtr, Skeleton.getCPtr(value));
    } 
	get
	{
		IntPtr cPtr = VixenLibPINVOKE.BodyTracker_Skeleton_get(swigCPtr);
		return (Skeleton) SharedObj.MakeObject(cPtr, false);
	}

  }

  public PoseMapper PoseMapper {
    set {
      VixenLibPINVOKE.BodyTracker_PoseMapper_set(swigCPtr, PoseMapper.getCPtr(value));
    } 
    get {
      IntPtr cPtr = VixenLibPINVOKE.BodyTracker_PoseMapper_get(swigCPtr);
      PoseMapper ret = (cPtr == IntPtr.Zero) ? null : new PoseMapper(cPtr, false);
      return ret;
    } 
  }

  public float FOV {
    set {
      VixenLibPINVOKE.BodyTracker_FOV_set(swigCPtr, value);
    } 
    get {
      float ret = VixenLibPINVOKE.BodyTracker_FOV_get(swigCPtr);
      return ret;
    } 
  }

  public int UserID {
    set {
      VixenLibPINVOKE.BodyTracker_UserID_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.BodyTracker_UserID_get(swigCPtr);
      return ret;
    } 
  }

  public int Options {
    set {
      VixenLibPINVOKE.BodyTracker_Options_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.BodyTracker_Options_get(swigCPtr);
      return ret;
    } 
  }

  public Texture ColorTexture {
    set {
      VixenLibPINVOKE.BodyTracker_ColorTexture_set(swigCPtr, Texture.getCPtr(value));
    } 
	get
	{
		IntPtr cPtr = VixenLibPINVOKE.BodyTracker_ColorTexture_get(swigCPtr);
		return (Texture) SharedObj.MakeObject(cPtr, false);
	}

  }

  public Texture DepthTexture {
    set {
      VixenLibPINVOKE.BodyTracker_DepthTexture_set(swigCPtr, Texture.getCPtr(value));
    } 
	get
	{
		IntPtr cPtr = VixenLibPINVOKE.BodyTracker_DepthTexture_get(swigCPtr);
		return (Texture) SharedObj.MakeObject(cPtr, false);
	}

  }

  public Vec3 WaistOffset {
    set {
      VixenLibPINVOKE.BodyTracker_WaistOffset_set(swigCPtr, Vec3.getCPtr(value));
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      Vec3 ret = new Vec3(VixenLibPINVOKE.BodyTracker_WaistOffset_get(swigCPtr), false);
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static readonly int TRACK_SKELETON = VixenLibPINVOKE.BodyTracker_TRACK_SKELETON_get();
  public static readonly int TRACK_TORSO = VixenLibPINVOKE.BodyTracker_TRACK_TORSO_get();
  public static readonly int TRACK_HANDS = VixenLibPINVOKE.BodyTracker_TRACK_HANDS_get();
  public static readonly int TRACK_FRONT_ONLY = VixenLibPINVOKE.BodyTracker_TRACK_FRONT_ONLY_get();
  public static readonly int MAX_USERS = VixenLibPINVOKE.BodyTracker_MAX_USERS_get();

}

}
