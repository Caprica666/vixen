/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class Deformer : Engine {
  private HandleRef swigCPtr;

  internal Deformer(IntPtr cPtr, bool cMemoryOwn) : base(VixenLibPINVOKE.Deformer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Deformer obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Deformer() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_Deformer(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Deformer() : this(VixenLibPINVOKE.new_Deformer(), true) {
  }

  public void SetRestNormals(FloatArray arg0) {
    VixenLibPINVOKE.Deformer_SetRestNormals(swigCPtr, FloatArray.getCPtr(arg0));
  }

  public void SetVertexMap(IntArray arg0) {
    VixenLibPINVOKE.Deformer_SetVertexMap(swigCPtr, IntArray.getCPtr(arg0));
  }

  public bool MakeVertexMap(VertexArray arg0) {
    bool ret = VixenLibPINVOKE.Deformer_MakeVertexMap(swigCPtr, VertexArray.getCPtr(arg0));
    return ret;
  }

  public IntArray GetVertexMap() 
	{
		IntPtr cPtr = VixenLibPINVOKE.Deformer_GetVertexMap(swigCPtr);
		return (IntArray)  SharedObj.MakeObject(cPtr, true);
	}


  public FloatArray GetRestNormals() 
	{
		IntPtr cPtr = VixenLibPINVOKE.Deformer_GetRestNormals(swigCPtr);
		return (FloatArray)  SharedObj.MakeObject(cPtr, true);
	}


  public FloatArray GetActiveLocs() 
	{
		IntPtr cPtr = VixenLibPINVOKE.Deformer_GetActiveLocs(swigCPtr);
		return (FloatArray)  SharedObj.MakeObject(cPtr, true);
	}


  public FloatArray GetActiveNormals() 
	{
		IntPtr cPtr = VixenLibPINVOKE.Deformer_GetActiveNormals(swigCPtr);
		return (FloatArray)  SharedObj.MakeObject(cPtr, true);
	}


  public bool GetBound(Box3 arg0) {
    bool ret = VixenLibPINVOKE.Deformer_GetBound(swigCPtr, Box3.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool UpdateVertices(FloatArray srclocs, VertexArray dstverts, IntArray vmap, FloatArray srcnmls) {
    bool ret = VixenLibPINVOKE.Deformer_UpdateVertices(FloatArray.getCPtr(srclocs), VertexArray.getCPtr(dstverts), IntArray.getCPtr(vmap), FloatArray.getCPtr(srcnmls));
    return ret;
  }

  public VertexArray RestLocs {
    set {
      VixenLibPINVOKE.Deformer_RestLocs_set(swigCPtr, VertexArray.getCPtr(value));
    } 
	get
	{
		IntPtr cPtr = VixenLibPINVOKE.Deformer_RestLocs_get(swigCPtr);
		return (VertexArray) SharedObj.MakeObject(cPtr, false);
	}

  }

}

}
