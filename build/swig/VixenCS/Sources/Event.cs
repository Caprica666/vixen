/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class Event : BaseObj {
  private HandleRef swigCPtr;

  internal Event(IntPtr cPtr, bool cMemoryOwn) : base(VixenLibPINVOKE.Event_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Event obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Event() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_Event(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Event(int code, int size, SharedObj sender) : this(VixenLibPINVOKE.new_Event__SWIG_0(code, size, SharedObj.getCPtr(sender)), true) {
  }

  public Event(int code, int size) : this(VixenLibPINVOKE.new_Event__SWIG_1(code, size), true) {
  }

  public Event(int code) : this(VixenLibPINVOKE.new_Event__SWIG_2(code), true) {
  }

  public Event() : this(VixenLibPINVOKE.new_Event__SWIG_3(), true) {
  }

  public Event(Event src) : this(VixenLibPINVOKE.new_Event__SWIG_4(Event.getCPtr(src)), true) {
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Event Copy(Event src) {
    Event ret = new Event(VixenLibPINVOKE.Event_Copy(swigCPtr, Event.getCPtr(src)), false);
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetDataTypes() {
    string ret = VixenLibPINVOKE.Event_GetDataTypes__SWIG_0(swigCPtr);
    return ret;
  }

  public static string GetDataTypes(int code) {
    string ret = VixenLibPINVOKE.Event_GetDataTypes__SWIG_1(code);
    return ret;
  }

  public static void SetDataTypes(int code, string typestr) {
    VixenLibPINVOKE.Event_SetDataTypes(code, typestr);
  }

  public static string GetName(int code) {
    string ret = VixenLibPINVOKE.Event_GetName__SWIG_0(code);
    return ret;
  }

  public string GetName() {
    string ret = VixenLibPINVOKE.Event_GetName__SWIG_1(swigCPtr);
    return ret;
  }

  public static void SetName(int code, string name) {
    VixenLibPINVOKE.Event_SetName(code, name);
  }

  public bool Log(int logtype) {
    bool ret = VixenLibPINVOKE.Event_Log__SWIG_0(swigCPtr, logtype);
    return ret;
  }

  public bool Log() {
    bool ret = VixenLibPINVOKE.Event_Log__SWIG_1(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_void GetData() {
    IntPtr cPtr = VixenLibPINVOKE.Event_GetData(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static int NewCode() {
    int ret = VixenLibPINVOKE.Event_NewCode();
    return ret;
  }

  public int Code {
    set {
      VixenLibPINVOKE.Event_Code_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.Event_Code_get(swigCPtr);
      return ret;
    } 
  }

  public int Size {
    set {
      VixenLibPINVOKE.Event_Size_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.Event_Size_get(swigCPtr);
      return ret;
    } 
  }

  public float Time {
    set {
      VixenLibPINVOKE.Event_Time_set(swigCPtr, value);
    } 
    get {
      float ret = VixenLibPINVOKE.Event_Time_get(swigCPtr);
      return ret;
    } 
  }

  public SharedObj Sender {
		set
		{
			ObjRef oref = new ObjRef(value);
			VixenLibPINVOKE.Event_Sender_set(swigCPtr, ObjRef.getCPtr(oref));
		}
	
		get
		{
			IntPtr iref = VixenLibPINVOKE.Event_Sender_get(swigCPtr);
			if (iref == IntPtr.Zero)
				return null;
			ObjRef oref = new ObjRef(iref, false);
			return oref.__ref__();
		}
	
  }

  public string Name {
    set {
      VixenLibPINVOKE.Event_Name_set(swigCPtr, value);
    } 
    get {
      string ret = VixenLibPINVOKE.Event_Name_get(swigCPtr);
      return ret;
    } 
  }

  public static readonly int MAX_CODE = VixenLibPINVOKE.Event_MAX_CODE_get();
  public static readonly int MAX_BYTES = VixenLibPINVOKE.Event_MAX_BYTES_get();
  public static readonly int NONE = VixenLibPINVOKE.Event_NONE_get();
  public static readonly int LOAD_TEXT = VixenLibPINVOKE.Event_LOAD_TEXT_get();
  public static readonly int LOAD_IMAGE = VixenLibPINVOKE.Event_LOAD_IMAGE_get();
  public static readonly int LOAD_DATA = VixenLibPINVOKE.Event_LOAD_DATA_get();
  public static readonly int LOAD_SCENE = VixenLibPINVOKE.Event_LOAD_SCENE_get();
  public static readonly int MOUSE = VixenLibPINVOKE.Event_MOUSE_get();
  public static readonly int KEY = VixenLibPINVOKE.Event_KEY_get();
  public static readonly int START = VixenLibPINVOKE.Event_START_get();
  public static readonly int STOP = VixenLibPINVOKE.Event_STOP_get();
  public static readonly int RESET = VixenLibPINVOKE.Event_RESET_get();
  public static readonly int PICK = VixenLibPINVOKE.Event_PICK_get();
  public static readonly int NOPICK = VixenLibPINVOKE.Event_NOPICK_get();
  public static readonly int SELECT = VixenLibPINVOKE.Event_SELECT_get();
  public static readonly int DESELECT = VixenLibPINVOKE.Event_DESELECT_get();
  public static readonly int SET_TIME = VixenLibPINVOKE.Event_SET_TIME_get();
  public static readonly int NAVIGATE = VixenLibPINVOKE.Event_NAVIGATE_get();
  public static readonly int NAVINPUT = VixenLibPINVOKE.Event_NAVINPUT_get();
  public static readonly int ATTACH_SCENE = VixenLibPINVOKE.Event_ATTACH_SCENE_get();
  public static readonly int ENTER = VixenLibPINVOKE.Event_ENTER_get();
  public static readonly int LEAVE = VixenLibPINVOKE.Event_LEAVE_get();
  public static readonly int MIDI = VixenLibPINVOKE.Event_MIDI_get();
  public static readonly int RESIZE = VixenLibPINVOKE.Event_RESIZE_get();
  public static readonly int EXEC = VixenLibPINVOKE.Event_EXEC_get();
  public static readonly int SCENE_CHANGE = VixenLibPINVOKE.Event_SCENE_CHANGE_get();
  public static readonly int CONNECT = VixenLibPINVOKE.Event_CONNECT_get();
  public static readonly int COLLIDE = VixenLibPINVOKE.Event_COLLIDE_get();
  public static readonly int SAVE_SCREEN = VixenLibPINVOKE.Event_SAVE_SCREEN_get();
  public static readonly int ERROR = VixenLibPINVOKE.Event_ERROR_get();
  public static readonly int TRI_HIT = VixenLibPINVOKE.Event_TRI_HIT_get();
  public static readonly int TRACK = VixenLibPINVOKE.Event_TRACK_get();
  public static readonly int SCENE_INIT = VixenLibPINVOKE.Event_SCENE_INIT_get();
  public static readonly int LAST_EVENT = VixenLibPINVOKE.Event_LAST_EVENT_get();

}

}
