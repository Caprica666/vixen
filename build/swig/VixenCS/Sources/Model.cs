/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class Model : Group {
  private HandleRef swigCPtr;

  internal Model(IntPtr cPtr, bool cMemoryOwn) : base(VixenLibPINVOKE.Model_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Model obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Model() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_Model(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public new Model Parent() 
	{
		IntPtr cPtr = VixenLibPINVOKE.Model_Parent(swigCPtr);
		return (Model)  SharedObj.MakeObject(cPtr, true);
	}


  public new Model First() 
	{
		IntPtr cPtr = VixenLibPINVOKE.Model_First(swigCPtr);
		return (Model)  SharedObj.MakeObject(cPtr, true);
	}


  public new Model Last() 
	{
		IntPtr cPtr = VixenLibPINVOKE.Model_Last(swigCPtr);
		return (Model)  SharedObj.MakeObject(cPtr, true);
	}


  public new Model Next() 
	{
		IntPtr cPtr = VixenLibPINVOKE.Model_Next(swigCPtr);
		return (Model)  SharedObj.MakeObject(cPtr, true);
	}


  public new Model GetAt(int i) 
	{
		IntPtr cPtr = VixenLibPINVOKE.Model_GetAt(swigCPtr, i);
		return (Model)  SharedObj.MakeObject(cPtr, true);
	}


  public Model(Model arg0) : this(VixenLibPINVOKE.new_Model__SWIG_0(Model.getCPtr(arg0)), true) {
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Model() : this(VixenLibPINVOKE.new_Model__SWIG_1(), true) {
  }

  public Vec3 GetCenter(int transformtype) {
    Vec3 ret = new Vec3(VixenLibPINVOKE.Model_GetCenter__SWIG_0(swigCPtr, transformtype), true);
    return ret;
  }

  public virtual bool GetCenter(Vec3 OUTPUT, int transformtype) {
    bool ret = VixenLibPINVOKE.Model_GetCenter__SWIG_1(swigCPtr, Vec3.getCPtr(OUTPUT), transformtype);
    return ret;
  }

  public virtual bool GetCenter(Vec3 OUTPUT) {
    bool ret = VixenLibPINVOKE.Model_GetCenter__SWIG_2(swigCPtr, Vec3.getCPtr(OUTPUT));
    return ret;
  }

  public virtual Vec3 GetDirection() {
    Vec3 ret = new Vec3(VixenLibPINVOKE.Model_GetDirection(swigCPtr), true);
    return ret;
  }

  public bool GetBound(Sphere OUTPUT, int transformtype) {
    bool ret = VixenLibPINVOKE.Model_GetBound__SWIG_0(swigCPtr, Sphere.getCPtr(OUTPUT), transformtype);
    return ret;
  }

  public bool GetBound(Sphere OUTPUT) {
    bool ret = VixenLibPINVOKE.Model_GetBound__SWIG_1(swigCPtr, Sphere.getCPtr(OUTPUT));
    return ret;
  }

  public bool GetBound(Box3 OUTPUT, int transformtype) {
    bool ret = VixenLibPINVOKE.Model_GetBound__SWIG_2(swigCPtr, Box3.getCPtr(OUTPUT), transformtype);
    return ret;
  }

  public bool GetBound(Box3 OUTPUT) {
    bool ret = VixenLibPINVOKE.Model_GetBound__SWIG_3(swigCPtr, Box3.getCPtr(OUTPUT));
    return ret;
  }

  public virtual void SetBound(Box3 INPUT) {
    VixenLibPINVOKE.Model_SetBound__SWIG_0(swigCPtr, Box3.getCPtr(INPUT));
  }

  public virtual void SetBound(Sphere INPUT) {
    VixenLibPINVOKE.Model_SetBound__SWIG_1(swigCPtr, Sphere.getCPtr(INPUT));
  }

  public virtual bool CalcSphere(Sphere arg0) {
    bool ret = VixenLibPINVOKE.Model_CalcSphere(swigCPtr, Sphere.getCPtr(arg0));
    return ret;
  }

  public virtual bool CalcBound(Box3 arg0) {
    bool ret = VixenLibPINVOKE.Model_CalcBound(swigCPtr, Box3.getCPtr(arg0));
    return ret;
  }

  public void Reset() {
    VixenLibPINVOKE.Model_Reset(swigCPtr);
  }

  public void Turn(Vec3 axis, float angle) {
    VixenLibPINVOKE.Model_Turn__SWIG_0(swigCPtr, Vec3.getCPtr(axis), angle);
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Turn(Quat INPUT) {
    VixenLibPINVOKE.Model_Turn__SWIG_1(swigCPtr, Quat.getCPtr(INPUT));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Rotate(Vec3 axis, float angle) {
    VixenLibPINVOKE.Model_Rotate__SWIG_0(swigCPtr, Vec3.getCPtr(axis), angle);
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Rotate(Quat INPUT) {
    VixenLibPINVOKE.Model_Rotate__SWIG_1(swigCPtr, Quat.getCPtr(INPUT));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void LookAt(Vec3 INPUT, float twist) {
    VixenLibPINVOKE.Model_LookAt(swigCPtr, Vec3.getCPtr(INPUT), twist);
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Move(Vec3 arg0) {
    VixenLibPINVOKE.Model_Move__SWIG_0(swigCPtr, Vec3.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Move(float x, float y, float z) {
    VixenLibPINVOKE.Model_Move__SWIG_1(swigCPtr, x, y, z);
  }

  public void Translate(Vec3 INPUT) {
    VixenLibPINVOKE.Model_Translate__SWIG_0(swigCPtr, Vec3.getCPtr(INPUT));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Translate(float x, float y, float z) {
    VixenLibPINVOKE.Model_Translate__SWIG_1(swigCPtr, x, y, z);
  }

  public void Scale(Vec3 arg0) {
    VixenLibPINVOKE.Model_Scale__SWIG_0(swigCPtr, Vec3.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Scale(float x, float y, float z) {
    VixenLibPINVOKE.Model_Scale__SWIG_1(swigCPtr, x, y, z);
  }

  public void Size(Vec3 INPUT) {
    VixenLibPINVOKE.Model_Size__SWIG_0(swigCPtr, Vec3.getCPtr(INPUT));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Size(float x, float y, float z) {
    VixenLibPINVOKE.Model_Size__SWIG_1(swigCPtr, x, y, z);
  }

  public void TotalTransform(Matrix output) {
    VixenLibPINVOKE.Model_TotalTransform__SWIG_0(swigCPtr, Matrix.getCPtr(output));
  }

  public void TotalTransform(Matrix output, Model parent) {
    VixenLibPINVOKE.Model_TotalTransform__SWIG_1(swigCPtr, Matrix.getCPtr(output), Model.getCPtr(parent));
  }

  public long GetNumVtx() {
    long ret = VixenLibPINVOKE.Model_GetNumVtx(swigCPtr);
    return ret;
  }

  public static bool DoCulling {
    set {
      VixenLibPINVOKE.Model_DoCulling_set(value);
    } 
    get {
      bool ret = VixenLibPINVOKE.Model_DoCulling_get();
      return ret;
    } 
  }

  public static Vec3 XAXIS {
    get {
      Vec3 ret = new Vec3(VixenLibPINVOKE.Model_XAXIS_get(), false);
      return ret;
    } 
  }

  public static Vec3 YAXIS {
    get {
      Vec3 ret = new Vec3(VixenLibPINVOKE.Model_YAXIS_get(), false);
      return ret;
    } 
  }

  public static Vec3 ZAXIS {
    get {
      Vec3 ret = new Vec3(VixenLibPINVOKE.Model_ZAXIS_get(), false);
      return ret;
    } 
  }

  public virtual void Render(Scene arg0) {
    VixenLibPINVOKE.Model_Render(swigCPtr, Scene.getCPtr(arg0));
  }

  public int Hints {
    set {
      VixenLibPINVOKE.Model_Hints_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.Model_Hints_get(swigCPtr);
      return ret;
    } 
  }

  public Vec3 Translation {
    set {
      VixenLibPINVOKE.Model_Translation_set(swigCPtr, Vec3.getCPtr(value));
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      Vec3 ret = new Vec3(VixenLibPINVOKE.Model_Translation_get(swigCPtr), false);
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Quat Rotation {
    set {
      VixenLibPINVOKE.Model_Rotation_set(swigCPtr, Quat.getCPtr(value));
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      Quat ret = new Quat(VixenLibPINVOKE.Model_Rotation_get(swigCPtr), false);
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Vec3 Center {
    get {
      Vec3 ret = new Vec3(VixenLibPINVOKE.Model_Center_get(swigCPtr), false);
      return ret;
    } 
  }

  public bool Culling {
    set {
      VixenLibPINVOKE.Model_Culling_set(swigCPtr, value);
    } 
    get {
      bool ret = VixenLibPINVOKE.Model_Culling_get(swigCPtr);
      return ret;
    } 
  }

  public Matrix Transform {
    set {
      VixenLibPINVOKE.Model_Transform_set(swigCPtr, Matrix.getCPtr(value));
    } 
    get {
      IntPtr cPtr = VixenLibPINVOKE.Model_Transform_get(swigCPtr);
      Matrix ret = (cPtr == IntPtr.Zero) ? null : new Matrix(cPtr, false);
      return ret;
    } 
  }

  public static readonly int WORLD = VixenLibPINVOKE.Model_WORLD_get();
  public static readonly int LOCAL = VixenLibPINVOKE.Model_LOCAL_get();
  public static readonly int NONE = VixenLibPINVOKE.Model_NONE_get();

  public static readonly int STATIC = VixenLibPINVOKE.Model_STATIC_get();
  public static readonly int MORPH = VixenLibPINVOKE.Model_MORPH_get();

  public static readonly int DISPLAY_NONE = VixenLibPINVOKE.Model_DISPLAY_NONE_get();
  public static readonly int DISPLAY_ME = VixenLibPINVOKE.Model_DISPLAY_ME_get();
  public static readonly int DISPLAY_ALL = VixenLibPINVOKE.Model_DISPLAY_ALL_get();

}

}
