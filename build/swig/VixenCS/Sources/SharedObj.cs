/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class SharedObj : LockObj {
  private HandleRef swigCPtr;

  internal SharedObj(IntPtr cPtr, bool cMemoryOwn) : base(VixenLibPINVOKE.SharedObj_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(SharedObj obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~SharedObj() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_SharedObj(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }


public bool SameAs(SharedObj obj)
{
	if (obj.swigCPtr.Handle == swigCPtr.Handle)
		return true;
	return false;
}

public SharedObj ConvertTo(SerialID classid)
{
	if ((swigCPtr.Handle != null) &&
		IsClass((uint) classid))
		return SharedObj.MakeObject(swigCPtr.Handle, false);
	return null;
}

static public SharedObj MakeObject( IntPtr cptr, bool memown)
{
	SharedObj obj = new SharedObj(cptr, false);
	if (cptr == IntPtr.Zero)
		return null;
	SerialID classid = (SerialID) obj.ClassID;
	obj.AddRef();
	switch (classid)
	{
		case SerialID.VX_IntArray:		return new IntArray(cptr, memown);
		case SerialID.VX_FloatArray:	return new FloatArray(cptr, memown);
		case SerialID.VX_ObjArray:		return new ObjArray(cptr, memown);
		case SerialID.VX_Matrix:		return new Matrix(cptr, memown);
		case SerialID.VX_PhongMaterial:	return new PhongMaterial(cptr, memown);
		case SerialID.VX_Material:		return new Material(cptr, memown);
		case SerialID.VX_Image:			return new Texture(cptr, memown);
		case SerialID.VX_Appearance:	return new Appearance(cptr, memown);
		case SerialID.VX_Engine:		return new Engine(cptr, memown);
		case SerialID.VX_Scene:			return new Scene(cptr, memown);
		case SerialID.VX_Sampler:		return new Sampler(cptr, memown);
		case SerialID.VX_VtxArray:		return new VertexArray(cptr, memown);
		case SerialID.VX_Mesh:			return new Mesh(cptr, memown);
		case SerialID.VX_TriMesh:		return new TriMesh(cptr, memown);
		case SerialID.VX_Model:			return new Model(cptr, memown);
		case SerialID.VX_ExtModel:		return new ExtModel(cptr, memown);
		case SerialID.VX_Shape:			return new Shape(cptr, memown);
		case SerialID.VX_Light:			return new Light(cptr, memown);
		case SerialID.VX_Camera:		return new Camera(cptr, memown);
		case SerialID.VX_DirectLight:	return new DirectLight(cptr, memown);
		case SerialID.VX_SpotLight:		return new SpotLight(cptr, memown);
		case SerialID.VX_World3D:		return new SharedWorld(cptr, memown);
		case SerialID.VX_Transformer:	return new Transformer(cptr, memown);
		case SerialID.VX_KeyFramer:		return new KeyFramer(cptr, memown);
		case SerialID.VX_Interpolator:	return new Interpolator(cptr, memown);
		case SerialID.VX_Trigger:		return new Trigger(cptr, memown);
		case SerialID.VX_Flyer:			return new Flyer(cptr, memown);
		case SerialID.VX_Navigator:		return new Navigator(cptr, memown);
		case SerialID.VX_SoundPlayer:	return new SoundPlayer(cptr, memown);
		case SerialID.VX_MediaSource:	return new MediaSource(cptr, memown);
		case SerialID.VX_Skeleton:		return new Skeleton(cptr, memown);
		case SerialID.VX_BodyTracker:	return new BodyTracker(cptr, memown);
		case SerialID.VX_KinectTracker:	return new KinectTracker(cptr, memown);
		case SerialID.VX_Skin:			return new Skin(cptr, memown);
		case SerialID.VX_Deformer:		return new Deformer(cptr, memown);
		case SerialID.VX_RayPicker:		return new RayPicker(cptr, memown);
		case SerialID.VX_Physics:		return new Physics(cptr, memown);
		case SerialID.VX_RagDoll:		return new RagDoll(cptr, memown);
		case SerialID.VX_ClothSim:		return new ClothSim(cptr, memown);
		case SerialID.VX_ClothSkin:		return new ClothSkin(cptr, memown);
		case SerialID.VX_SkeletonMapper:
		case SerialID.VX_PoseMapper:	return new PoseMapper(cptr, memown);
		case SerialID.VX_RigidBody:		return new Transformer(cptr, memown);
		case SerialID.VX_Animator:		return new Animator(cptr, memown);
		case SerialID.VX_BoneAnimator:	return new BoneAnimator(cptr, memown);
		case SerialID.VX_Scriptor:		return new Scriptor(cptr, memown);
		case SerialID.VX_Sequencer:		return new Sequencer(cptr, memown);
		case SerialID.VX_MeshAnimator:	return new MeshAnimator(cptr, memown);
		case SerialID.VX_Pose:			return new Pose(cptr, memown);
		case SerialID.VX_Morph:			return new Morph(cptr, memown);

		default:
		{
			if (obj.IsClass((uint) SerialID.VX_Model))
				return new Model(cptr, memown);
			else if (obj.IsClass((uint) SerialID.VX_Engine))
				return new Engine(cptr, memown);
		}
		obj.Release();
		return null;
	}
}

  public SharedObj() : this(VixenLibPINVOKE.new_SharedObj__SWIG_0(), true) {
  }

  public SharedObj(SharedObj arg0) : this(VixenLibPINVOKE.new_SharedObj__SWIG_1(SharedObj.getCPtr(arg0)), true) {
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool Copy(SharedObj arg0) {
    bool ret = VixenLibPINVOKE.SharedObj_Copy(swigCPtr, SharedObj.getCPtr(arg0));
    return ret;
  }

  public virtual SharedObj Clone() 
	{
		IntPtr cPtr = VixenLibPINVOKE.SharedObj_Clone(swigCPtr);
		return (SharedObj)  SharedObj.MakeObject(cPtr, true);
	}


  public static int FindClass(string name) {
    int ret = VixenLibPINVOKE.SharedObj_FindClass(name);
    return ret;
  }

  public static SharedObj Create(uint id) 
	{
		IntPtr cPtr = VixenLibPINVOKE.SharedObj_Create__SWIG_0(id);
		return (SharedObj)  SharedObj.MakeObject(cPtr, true);
	}


  public static SharedObj Create() 
	{
		IntPtr cPtr = VixenLibPINVOKE.SharedObj_Create__SWIG_1();
		return (SharedObj)  SharedObj.MakeObject(cPtr, true);
	}


  public bool IsSet(uint flags) {
    bool ret = VixenLibPINVOKE.SharedObj_IsSet(swigCPtr, flags);
    return ret;
  }

  public int IsGlobal() {
    int ret = VixenLibPINVOKE.SharedObj_IsGlobal(swigCPtr);
    return ret;
  }

  public int IsShared() {
    int ret = VixenLibPINVOKE.SharedObj_IsShared__SWIG_0(swigCPtr);
    return ret;
  }

  public static int IsShared(uint arg0) {
    int ret = VixenLibPINVOKE.SharedObj_IsShared__SWIG_1(arg0);
    return ret;
  }

  public uint GetFlags() {
    uint ret = VixenLibPINVOKE.SharedObj_GetFlags(swigCPtr);
    return ret;
  }

  public void SetFlags(uint flags) {
    VixenLibPINVOKE.SharedObj_SetFlags(swigCPtr, flags);
  }

  public void ClearFlags(uint flags) {
    VixenLibPINVOKE.SharedObj_ClearFlags(swigCPtr, flags);
  }

  public string GetName(int key) {
    string ret = VixenLibPINVOKE.SharedObj_GetName(swigCPtr, key);
    return ret;
  }

  public void Dump() {
    VixenLibPINVOKE.SharedObj_Dump__SWIG_0(swigCPtr);
  }

  public void Dump(string options) {
    VixenLibPINVOKE.SharedObj_Dump__SWIG_1(swigCPtr, options);
  }

  public string Name {
    set {
      VixenLibPINVOKE.SharedObj_Name_set(swigCPtr, value);
    } 
    get {
      string ret = VixenLibPINVOKE.SharedObj_Name_get(swigCPtr);
      return ret;
    } 
  }

  [System.ComponentModel.Browsable(false)]
  public int ID {
    set {
      VixenLibPINVOKE.SharedObj_ID_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.SharedObj_ID_get(swigCPtr);
      return ret;
    } 
  }

  [System.ComponentModel.Browsable(false)]
  public bool Active {
    set {
      VixenLibPINVOKE.SharedObj_Active_set(swigCPtr, value);
    } 
    get {
      bool ret = VixenLibPINVOKE.SharedObj_Active_get(swigCPtr);
      return ret;
    } 
  }

  [System.ComponentModel.Browsable(false)]
  public bool Changed {
    set {
      VixenLibPINVOKE.SharedObj_Changed_set(swigCPtr, value);
    } 
    get {
      bool ret = VixenLibPINVOKE.SharedObj_Changed_get(swigCPtr);
      return ret;
    } 
  }

  public static readonly int NOFREE = VixenLibPINVOKE.SharedObj_NOFREE_get();
  public static readonly int SAVED = VixenLibPINVOKE.SharedObj_SAVED_get();
  public static readonly int GLOBAL = VixenLibPINVOKE.SharedObj_GLOBAL_get();
  public static readonly int SHARED = VixenLibPINVOKE.SharedObj_SHARED_get();
  public static readonly int DOEVENTS = VixenLibPINVOKE.SharedObj_DOEVENTS_get();
  public static readonly int CHANGED = VixenLibPINVOKE.SharedObj_CHANGED_get();
  public static readonly int INACTIVE = VixenLibPINVOKE.SharedObj_INACTIVE_get();
  public static readonly int OBJ_LASTUSED = VixenLibPINVOKE.SharedObj_OBJ_LASTUSED_get();

}

}
