/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class Vec3 : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Vec3(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Vec3 obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Vec3() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_Vec3(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

		public static Vec3 operator +(Vec3 arg1, Vec3 arg2)	{ return arg1.Add(arg2); }
		public static Vec3 operator -(Vec3 arg1, Vec3 arg2)	{ return arg1.Sub(arg2); }
		public static Vec3 operator *(Vec3 vec, float val)	{ return vec.Mul(val); }
		public static Vec3 operator /(Vec3 vec, float val)	{ return vec.Div(val); }
	
  public float x {
    set {
      VixenLibPINVOKE.Vec3_x_set(swigCPtr, value);
    } 
    get {
      float ret = VixenLibPINVOKE.Vec3_x_get(swigCPtr);
      return ret;
    } 
  }

  public float y {
    set {
      VixenLibPINVOKE.Vec3_y_set(swigCPtr, value);
    } 
    get {
      float ret = VixenLibPINVOKE.Vec3_y_get(swigCPtr);
      return ret;
    } 
  }

  public float z {
    set {
      VixenLibPINVOKE.Vec3_z_set(swigCPtr, value);
    } 
    get {
      float ret = VixenLibPINVOKE.Vec3_z_get(swigCPtr);
      return ret;
    } 
  }

  public Vec3() : this(VixenLibPINVOKE.new_Vec3__SWIG_0(), true) {
  }

  public Vec3(float x, float y, float z) : this(VixenLibPINVOKE.new_Vec3__SWIG_1(x, y, z), true) {
  }

  public Vec3(float[] floatArray) : this(VixenLibPINVOKE.new_Vec3__SWIG_2(floatArray), true) {
  }

  public Vec3(Vec3 arg0) : this(VixenLibPINVOKE.new_Vec3__SWIG_3(Vec3.getCPtr(arg0)), true) {
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set(float x, float y, float z) {
    VixenLibPINVOKE.Vec3_Set(swigCPtr, x, y, z);
  }

  public bool Equals(Vec3 arg0) {
    bool ret = VixenLibPINVOKE.Vec3_Equals(swigCPtr, Vec3.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec3 Sub(Vec3 arg0) {
    Vec3 ret = new Vec3(VixenLibPINVOKE.Vec3_Sub(swigCPtr, Vec3.getCPtr(arg0)), true);
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec3 Add(Vec3 arg0) {
    Vec3 ret = new Vec3(VixenLibPINVOKE.Vec3_Add(swigCPtr, Vec3.getCPtr(arg0)), true);
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec3 Mul(float arg0) {
    Vec3 ret = new Vec3(VixenLibPINVOKE.Vec3_Mul__SWIG_0(swigCPtr, arg0), true);
    return ret;
  }

  public Vec3 Mul(Vec3 arg0) {
    Vec3 ret = new Vec3(VixenLibPINVOKE.Vec3_Mul__SWIG_1(swigCPtr, Vec3.getCPtr(arg0)), true);
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec3 Div(float arg0) {
    Vec3 ret = new Vec3(VixenLibPINVOKE.Vec3_Div(swigCPtr, arg0), true);
    return ret;
  }

  public bool IsEmpty() {
    bool ret = VixenLibPINVOKE.Vec3_IsEmpty(swigCPtr);
    return ret;
  }

  public Vec3 Cross(Vec3 arg0) {
    Vec3 ret = new Vec3(VixenLibPINVOKE.Vec3_Cross(swigCPtr, Vec3.getCPtr(arg0)), true);
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec3 Negate() {
    Vec3 ret = new Vec3(VixenLibPINVOKE.Vec3_Negate(swigCPtr), false);
    return ret;
  }

  public float Normalize() {
    float ret = VixenLibPINVOKE.Vec3_Normalize(swigCPtr);
    return ret;
  }

  public float Dot(Vec3 arg0) {
    float ret = VixenLibPINVOKE.Vec3_Dot__SWIG_0(swigCPtr, Vec3.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float Dot(float[] floatArray) {
    float ret = VixenLibPINVOKE.Vec3_Dot__SWIG_1(swigCPtr, floatArray);
    return ret;
  }

  public float Distance(Vec3 arg0) {
    float ret = VixenLibPINVOKE.Vec3_Distance(swigCPtr, Vec3.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float DistanceSquared(Vec3 v) {
    float ret = VixenLibPINVOKE.Vec3_DistanceSquared(swigCPtr, Vec3.getCPtr(v));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Transform(Matrix arg0, Vec3 arg1) {
    VixenLibPINVOKE.Vec3_Transform(swigCPtr, Matrix.getCPtr(arg0), Vec3.getCPtr(arg1));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void TransformVector(Matrix arg0, Vec3 arg1) {
    VixenLibPINVOKE.Vec3_TransformVector(swigCPtr, Matrix.getCPtr(arg0), Vec3.getCPtr(arg1));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public float Length {
    set {
      VixenLibPINVOKE.Vec3_Length_set(swigCPtr, value);
    } 
    get {
      float ret = VixenLibPINVOKE.Vec3_Length_get(swigCPtr);
      return ret;
    } 
  }

  [System.ComponentModel.Browsable(false)]
  public float LengthSquared {
    set {
      VixenLibPINVOKE.Vec3_LengthSquared_set(swigCPtr, value);
    } 
    get {
      float ret = VixenLibPINVOKE.Vec3_LengthSquared_get(swigCPtr);
      return ret;
    } 
  }

}

}
