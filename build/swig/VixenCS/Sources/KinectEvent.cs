/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class KinectEvent : Event {
  private HandleRef swigCPtr;

  internal KinectEvent(IntPtr cPtr, bool cMemoryOwn) : base(VixenLibPINVOKE.KinectEvent_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(KinectEvent obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~KinectEvent() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_KinectEvent(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public KinectEvent(int type, int userid, SharedObj sender) : this(VixenLibPINVOKE.new_KinectEvent__SWIG_0(type, userid, SharedObj.getCPtr(sender)), true) {
  }

  public KinectEvent(int type, int userid) : this(VixenLibPINVOKE.new_KinectEvent__SWIG_1(type, userid), true) {
  }

  public KinectEvent(short code) : this(VixenLibPINVOKE.new_KinectEvent__SWIG_2(code), true) {
  }

  public KinectEvent() : this(VixenLibPINVOKE.new_KinectEvent__SWIG_3(), true) {
  }

  public KinectEvent(Event src) : this(VixenLibPINVOKE.new_KinectEvent__SWIG_4(Event.getCPtr(src)), true) {
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int Type {
    set {
      VixenLibPINVOKE.KinectEvent_Type_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.KinectEvent_Type_get(swigCPtr);
      return ret;
    } 
  }

  public int UserID {
    set {
      VixenLibPINVOKE.KinectEvent_UserID_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.KinectEvent_UserID_get(swigCPtr);
      return ret;
    } 
  }

  public String PoseName {
    set {
      VixenLibPINVOKE.KinectEvent_PoseName_set(swigCPtr, String.getCPtr(value));
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      String ret = new String(VixenLibPINVOKE.KinectEvent_PoseName_get(swigCPtr), false);
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static readonly int UNKNOWN = VixenLibPINVOKE.KinectEvent_UNKNOWN_get();
  public static readonly int NEW_USER = VixenLibPINVOKE.KinectEvent_NEW_USER_get();
  public static readonly int LOST_USER = VixenLibPINVOKE.KinectEvent_LOST_USER_get();
  public static readonly int START_CALIB = VixenLibPINVOKE.KinectEvent_START_CALIB_get();
  public static readonly int BAD_CALIB = VixenLibPINVOKE.KinectEvent_BAD_CALIB_get();
  public static readonly int GOOD_CALIB = VixenLibPINVOKE.KinectEvent_GOOD_CALIB_get();
  public static readonly int POSE_FOUND = VixenLibPINVOKE.KinectEvent_POSE_FOUND_get();

}

}
