/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class Texture : SharedObj {
  private HandleRef swigCPtr;

  internal Texture(IntPtr cPtr, bool cMemoryOwn) : base(VixenLibPINVOKE.Texture_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Texture obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Texture() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_Texture(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Texture(string fname) : this(VixenLibPINVOKE.new_Texture__SWIG_0(fname), true) {
  }

  public Texture() : this(VixenLibPINVOKE.new_Texture__SWIG_1(), true) {
  }

  public bool HasColor() {
    bool ret = VixenLibPINVOKE.Texture_HasColor(swigCPtr);
    return ret;
  }

  public bool HasAlpha() {
    bool ret = VixenLibPINVOKE.Texture_HasAlpha(swigCPtr);
    return ret;
  }

  public bool IsMipMap() {
    bool ret = VixenLibPINVOKE.Texture_IsMipMap(swigCPtr);
    return ret;
  }

  public bool HasColorKey() {
    bool ret = VixenLibPINVOKE.Texture_HasColorKey(swigCPtr);
    return ret;
  }

  public bool IsCubeMap() {
    bool ret = VixenLibPINVOKE.Texture_IsCubeMap(swigCPtr);
    return ret;
  }

  public int BytesPerPixel() {
    int ret = VixenLibPINVOKE.Texture_BytesPerPixel(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_void GetTexHandle() {
    IntPtr cPtr = VixenLibPINVOKE.Texture_GetTexHandle(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public bool UpdateData(SWIGTYPE_p_void data) {
    bool ret = VixenLibPINVOKE.Texture_UpdateData(swigCPtr, SWIGTYPE_p_void.getCPtr(data));
    return ret;
  }

  public bool Load(string filename) {
    bool ret = VixenLibPINVOKE.Texture_Load(swigCPtr, filename);
    return ret;
  }

  public bool NotEqual(Texture src) {
    bool ret = VixenLibPINVOKE.Texture_NotEqual(swigCPtr, Texture.getCPtr(src));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Equal(Texture src) {
    bool ret = VixenLibPINVOKE.Texture_Equal(swigCPtr, Texture.getCPtr(src));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool DoTexturing {
    set {
      VixenLibPINVOKE.Texture_DoTexturing_set(value);
    } 
    get {
      bool ret = VixenLibPINVOKE.Texture_DoTexturing_get();
      return ret;
    } 
  }

  public long DevHandle {
    set {
      VixenLibPINVOKE.Texture_DevHandle_set(swigCPtr, value);
    } 
    get {
      long ret = VixenLibPINVOKE.Texture_DevHandle_get(swigCPtr);
      return ret;
    } 
  }

  public int Width {
    set {
      VixenLibPINVOKE.Texture_Width_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.Texture_Width_get(swigCPtr);
      return ret;
    } 
  }

  public int Height {
    set {
      VixenLibPINVOKE.Texture_Height_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.Texture_Height_get(swigCPtr);
      return ret;
    } 
  }

  public int Depth {
    set {
      VixenLibPINVOKE.Texture_Depth_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.Texture_Depth_get(swigCPtr);
      return ret;
    } 
  }

  public int NumLod {
    set {
      VixenLibPINVOKE.Texture_NumLod_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.Texture_NumLod_get(swigCPtr);
      return ret;
    } 
  }

  public int Format {
    set {
      VixenLibPINVOKE.Texture_Format_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.Texture_Format_get(swigCPtr);
      return ret;
    } 
  }

  public Col4 TranspColor {
    set {
      VixenLibPINVOKE.Texture_TranspColor_set(swigCPtr, Col4.getCPtr(value));
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      Col4 ret = new Col4(VixenLibPINVOKE.Texture_TranspColor_get(swigCPtr), false);
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Bitmap Bitmap {
    set {
      VixenLibPINVOKE.Texture_Bitmap_set(swigCPtr, Bitmap.getCPtr(value));
    } 
	get
	{
		IntPtr cPtr = VixenLibPINVOKE.Texture_Bitmap_get(swigCPtr);
		return (Bitmap) SharedObj.MakeObject(cPtr, false);
	}

  }

  public string FileName {
    set {
      VixenLibPINVOKE.Texture_FileName_set(swigCPtr, value);
    } 
    get {
      string ret = VixenLibPINVOKE.Texture_FileName_get(swigCPtr);
      return ret;
    } 
  }

  public static readonly int MIPMAP = VixenLibPINVOKE.Texture_MIPMAP_get();
  public static readonly int CUBEMAP = VixenLibPINVOKE.Texture_CUBEMAP_get();
  public static readonly int NORMALIZED = VixenLibPINVOKE.Texture_NORMALIZED_get();
  public static readonly int RENDERTARGET = VixenLibPINVOKE.Texture_RENDERTARGET_get();

}

}
