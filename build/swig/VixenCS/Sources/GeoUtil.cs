/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class GeoUtil : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GeoUtil(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(GeoUtil obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~GeoUtil() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_GeoUtil(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static bool Rect(TriMesh mesh, float w, float h, float xtex, float ytex) {
    bool ret = VixenLibPINVOKE.GeoUtil_Rect__SWIG_0(TriMesh.getCPtr(mesh), w, h, xtex, ytex);
    return ret;
  }

  public static bool Rect(TriMesh mesh, float w, float h, float xtex) {
    bool ret = VixenLibPINVOKE.GeoUtil_Rect__SWIG_1(TriMesh.getCPtr(mesh), w, h, xtex);
    return ret;
  }

  public static bool Rect(TriMesh mesh, float w, float h) {
    bool ret = VixenLibPINVOKE.GeoUtil_Rect__SWIG_2(TriMesh.getCPtr(mesh), w, h);
    return ret;
  }

  public static bool Rect(TriMesh mesh, float w) {
    bool ret = VixenLibPINVOKE.GeoUtil_Rect__SWIG_3(TriMesh.getCPtr(mesh), w);
    return ret;
  }

  public static bool Rect(TriMesh mesh) {
    bool ret = VixenLibPINVOKE.GeoUtil_Rect__SWIG_4(TriMesh.getCPtr(mesh));
    return ret;
  }

  public static bool Block(TriMesh mesh, Vec3 size) {
    bool ret = VixenLibPINVOKE.GeoUtil_Block(TriMesh.getCPtr(mesh), Vec3.getCPtr(size));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool QuadMesh(TriMesh mesh, int rows, int cols, float INPUT, long firstvtx) {
    bool ret = VixenLibPINVOKE.GeoUtil_QuadMesh(TriMesh.getCPtr(mesh), rows, cols, INPUT, firstvtx);
    return ret;
  }

  public static bool Torus(TriMesh mesh, float irad, float orad, int res) {
    bool ret = VixenLibPINVOKE.GeoUtil_Torus(TriMesh.getCPtr(mesh), irad, orad, res);
    return ret;
  }

  public static bool Cylinder(TriMesh mesh, int parts, float tradius, float bradius, float height, int res) {
    bool ret = VixenLibPINVOKE.GeoUtil_Cylinder(TriMesh.getCPtr(mesh), parts, tradius, bradius, height, res);
    return ret;
  }

  public static bool Ellipsoid(TriMesh mesh, Vec3 size, int res) {
    bool ret = VixenLibPINVOKE.GeoUtil_Ellipsoid(TriMesh.getCPtr(mesh), Vec3.getCPtr(size), res);
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IcosaSphere(TriMesh mesh, float fRadius, int depth, bool hemi) {
    bool ret = VixenLibPINVOKE.GeoUtil_IcosaSphere(TriMesh.getCPtr(mesh), fRadius, depth, hemi);
    return ret;
  }

  public GeoUtil() : this(VixenLibPINVOKE.new_GeoUtil(), true) {
  }

  public enum CylinderPart {
    CYL_SIDE = 1,
    CYL_TOP = 2,
    CYL_BASE = 4
  }

}

}
