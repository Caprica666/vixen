/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class Group : SharedTree {
  private HandleRef swigCPtr;

  internal Group(IntPtr cPtr, bool cMemoryOwn) : base(VixenLibPINVOKE.Group_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Group obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Group() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_Group(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public new Group Parent() 
	{
		IntPtr cPtr = VixenLibPINVOKE.Group_Parent(swigCPtr);
		return (Group)  SharedObj.MakeObject(cPtr, true);
	}


  public new Group First() 
	{
		IntPtr cPtr = VixenLibPINVOKE.Group_First(swigCPtr);
		return (Group)  SharedObj.MakeObject(cPtr, true);
	}


  public new Group Last() 
	{
		IntPtr cPtr = VixenLibPINVOKE.Group_Last(swigCPtr);
		return (Group)  SharedObj.MakeObject(cPtr, true);
	}


  public Group Next() 
	{
		IntPtr cPtr = VixenLibPINVOKE.Group_Next(swigCPtr);
		return (Group)  SharedObj.MakeObject(cPtr, true);
	}


  public new Group GetAt(int i) 
	{
		IntPtr cPtr = VixenLibPINVOKE.Group_GetAt(swigCPtr, i);
		return (Group)  SharedObj.MakeObject(cPtr, true);
	}


  public Group(Group src) : this(VixenLibPINVOKE.new_Group__SWIG_0(Group.getCPtr(src)), true) {
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Group() : this(VixenLibPINVOKE.new_Group__SWIG_1(), true) {
  }

  public Group Find(string searchstr, int opts) 
	{
		IntPtr cPtr = VixenLibPINVOKE.Group_Find__SWIG_0(swigCPtr, searchstr, opts);
		return (Group)  SharedObj.MakeObject(cPtr, true);
	}


  public Group Find(string searchstr) 
	{
		IntPtr cPtr = VixenLibPINVOKE.Group_Find__SWIG_1(swigCPtr, searchstr);
		return (Group)  SharedObj.MakeObject(cPtr, true);
	}


  public ObjArray FindAll(string searchstr, int opts) 
	{
		IntPtr cPtr = VixenLibPINVOKE.Group_FindAll(swigCPtr, searchstr, opts);
		return (ObjArray)  SharedObj.MakeObject(cPtr, true);
	}


  public Group Append(Group child) 
	{
		IntPtr cPtr = VixenLibPINVOKE.Group_Append(swigCPtr, Group.getCPtr(child));
		return (Group)  SharedObj.MakeObject(cPtr, true);
	}


  public bool PutAfter(Group after) {
    bool ret = VixenLibPINVOKE.Group_PutAfter(swigCPtr, Group.getCPtr(after));
    return ret;
  }

  public bool PutBefore(Group before) {
    bool ret = VixenLibPINVOKE.Group_PutBefore(swigCPtr, Group.getCPtr(before));
    return ret;
  }

  public override bool Remove(bool free) {
    bool ret = VixenLibPINVOKE.Group_Remove__SWIG_0(swigCPtr, free);
    return ret;
  }

  public override bool Remove() {
    bool ret = VixenLibPINVOKE.Group_Remove__SWIG_1(swigCPtr);
    return ret;
  }

  public Group Replace(Group arg0) 
	{
		IntPtr cPtr = VixenLibPINVOKE.Group_Replace(swigCPtr, Group.getCPtr(arg0));
		return (Group)  SharedObj.MakeObject(cPtr, true);
	}


  public virtual void NotifyParents(uint arg0) {
    VixenLibPINVOKE.Group_NotifyParents(swigCPtr, arg0);
  }

  public static readonly int DEPTH_FIRST = VixenLibPINVOKE.Group_DEPTH_FIRST_get();
  public static readonly int PARENTS_REVERSE = VixenLibPINVOKE.Group_PARENTS_REVERSE_get();
  public static readonly int CHILDREN = VixenLibPINVOKE.Group_CHILDREN_get();
  public static readonly int CHILDREN_REVERSE = VixenLibPINVOKE.Group_CHILDREN_REVERSE_get();
  public static readonly int FIND_DESCEND = VixenLibPINVOKE.Group_FIND_DESCEND_get();
  public static readonly int FIND_PARENT = VixenLibPINVOKE.Group_FIND_PARENT_get();
  public static readonly int FIND_CHILD = VixenLibPINVOKE.Group_FIND_CHILD_get();
  public static readonly int FIND_EXACT = VixenLibPINVOKE.Group_FIND_EXACT_get();
  public static readonly int FIND_END = VixenLibPINVOKE.Group_FIND_END_get();
  public static readonly int FIND_ACTIVE = VixenLibPINVOKE.Group_FIND_ACTIVE_get();
  public static readonly int FIND_START = VixenLibPINVOKE.Group_FIND_START_get();
  public static readonly int UNLINK_FREE = VixenLibPINVOKE.Group_UNLINK_FREE_get();
  public static readonly int UNLINK_NOFREE = VixenLibPINVOKE.Group_UNLINK_NOFREE_get();

}

}
