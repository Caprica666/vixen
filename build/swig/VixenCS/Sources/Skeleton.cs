/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class Skeleton : Engine {
  private HandleRef swigCPtr;

  internal Skeleton(IntPtr cPtr, bool cMemoryOwn) : base(VixenLibPINVOKE.Skeleton_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Skeleton obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Skeleton() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_Skeleton(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Skeleton(int numbones) : this(VixenLibPINVOKE.new_Skeleton__SWIG_0(numbones), true) {
  }

  public Skeleton() : this(VixenLibPINVOKE.new_Skeleton__SWIG_1(), true) {
  }

  public Skeleton(Skeleton src) : this(VixenLibPINVOKE.new_Skeleton__SWIG_2(Skeleton.getCPtr(src)), true) {
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Model MakeSkeleton(string name, Quat rotations, Vec3 positionsL, SWIGTYPE_p_float bonelengthsL, float bonewidth) 
	{
		IntPtr cPtr = VixenLibPINVOKE.Skeleton_MakeSkeleton__SWIG_0(swigCPtr, name, Quat.getCPtr(rotations), Vec3.getCPtr(positionsL), SWIGTYPE_p_float.getCPtr(bonelengthsL), bonewidth);
		return (Model)  SharedObj.MakeObject(cPtr, true);
	}


  public Model MakeSkeleton(string name) 
	{
		IntPtr cPtr = VixenLibPINVOKE.Skeleton_MakeSkeleton__SWIG_1(swigCPtr, name);
		return (Model)  SharedObj.MakeObject(cPtr, true);
	}


  public Vec3 GetRootOffset() {
    Vec3 ret = new Vec3(VixenLibPINVOKE.Skeleton_GetRootOffset(swigCPtr), false);
    return ret;
  }

  public void SetRootOffset(Vec3 arg0) {
    VixenLibPINVOKE.Skeleton_SetRootOffset(swigCPtr, Vec3.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Pose MakePose(int coordspace) 
	{
		IntPtr cPtr = VixenLibPINVOKE.Skeleton_MakePose(swigCPtr, coordspace);
		return (Pose)  SharedObj.MakeObject(cPtr, true);
	}


  public virtual void ApplyPose(Pose pose) {
    VixenLibPINVOKE.Skeleton_ApplyPose(swigCPtr, Pose.getCPtr(pose));
  }

  public virtual void RestoreBindPose() {
    VixenLibPINVOKE.Skeleton_RestoreBindPose(swigCPtr);
  }

  public int GetBoneIndex(string bonename) {
    int ret = VixenLibPINVOKE.Skeleton_GetBoneIndex__SWIG_0(swigCPtr, bonename);
    return ret;
  }

  public int GetParentBoneIndex(int boneindex) {
    int ret = VixenLibPINVOKE.Skeleton_GetParentBoneIndex(swigCPtr, boneindex);
    return ret;
  }

  public bool SetParentBoneIndex(int boneindex, int parentindex) {
    bool ret = VixenLibPINVOKE.Skeleton_SetParentBoneIndex(swigCPtr, boneindex, parentindex);
    return ret;
  }

  public int GetBoneIndex(Engine bone) {
    int ret = VixenLibPINVOKE.Skeleton_GetBoneIndex__SWIG_1(swigCPtr, Engine.getCPtr(bone));
    return ret;
  }

  public virtual void SetBoneName(int boneindex, string bonename) {
    VixenLibPINVOKE.Skeleton_SetBoneName(swigCPtr, boneindex, bonename);
  }

  public string GetBoneName(int boneindex) {
    string ret = VixenLibPINVOKE.Skeleton_GetBoneName(swigCPtr, boneindex);
    return ret;
  }

  public Transformer GetBone(int boneindex) {
    IntPtr cPtr = VixenLibPINVOKE.Skeleton_GetBone(swigCPtr, boneindex);
    Transformer ret = (cPtr == IntPtr.Zero) ? null : new Transformer(cPtr, false);
    return ret;
  }

  public virtual void SetBoneOptions(int boneindex, int options) {
    VixenLibPINVOKE.Skeleton_SetBoneOptions(swigCPtr, boneindex, options);
  }

  public int GetBoneOptions(int boneindex) {
    int ret = VixenLibPINVOKE.Skeleton_GetBoneOptions(swigCPtr, boneindex);
    return ret;
  }

  public bool IsLocked(int boneindex) {
    bool ret = VixenLibPINVOKE.Skeleton_IsLocked(swigCPtr, boneindex);
    return ret;
  }

  public virtual void AttachBones(Model root, Engine engroot, int parentbone) {
    VixenLibPINVOKE.Skeleton_AttachBones__SWIG_0(swigCPtr, Model.getCPtr(root), Engine.getCPtr(engroot), parentbone);
  }

  public virtual void AttachBones(Model root, Engine engroot) {
    VixenLibPINVOKE.Skeleton_AttachBones__SWIG_1(swigCPtr, Model.getCPtr(root), Engine.getCPtr(engroot));
  }

  public virtual void AttachBones(Model root) {
    VixenLibPINVOKE.Skeleton_AttachBones__SWIG_2(swigCPtr, Model.getCPtr(root));
  }

  public void FindBones(Pose pose) {
    VixenLibPINVOKE.Skeleton_FindBones__SWIG_0(swigCPtr, Pose.getCPtr(pose));
  }

  public void FindBones() {
    VixenLibPINVOKE.Skeleton_FindBones__SWIG_1(swigCPtr);
  }

  public Shape MakeLimb(string name, Model parent, Quat jointrot, Vec3 jointpos, Appearance app, float bonelen, float bonewidth) 
	{
		IntPtr cPtr = VixenLibPINVOKE.Skeleton_MakeLimb(swigCPtr, name, Model.getCPtr(parent), Quat.getCPtr(jointrot), Vec3.getCPtr(jointpos), Appearance.getCPtr(app), bonelen, bonewidth);
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
		return (Shape)  SharedObj.MakeObject(cPtr, true);
	}


  public Vec3 BoneAxis {
    set {
      VixenLibPINVOKE.Skeleton_BoneAxis_set(swigCPtr, Vec3.getCPtr(value));
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      Vec3 ret = new Vec3(VixenLibPINVOKE.Skeleton_BoneAxis_get(swigCPtr), false);
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Box3 Bound {
    set {
      VixenLibPINVOKE.Skeleton_Bound_set(swigCPtr, Box3.getCPtr(value));
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      Box3 ret = new Box3(VixenLibPINVOKE.Skeleton_Bound_get(swigCPtr), false);
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int NumBones {
    set {
      VixenLibPINVOKE.Skeleton_NumBones_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.Skeleton_NumBones_get(swigCPtr);
      return ret;
    } 
  }

  public Vec3 Position {
    set {
      VixenLibPINVOKE.Skeleton_Position_set(swigCPtr, Vec3.getCPtr(value));
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      Vec3 ret = new Vec3(VixenLibPINVOKE.Skeleton_Position_get(swigCPtr), false);
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Pose Pose {
    set {
      VixenLibPINVOKE.Skeleton_Pose_set(swigCPtr, Pose.getCPtr(value));
    } 
	get
	{
		IntPtr cPtr = VixenLibPINVOKE.Skeleton_Pose_get(swigCPtr);
		return (Pose) SharedObj.MakeObject(cPtr, false);
	}

  }

  public Pose BindPose {
    set {
      VixenLibPINVOKE.Skeleton_BindPose_set(swigCPtr, Pose.getCPtr(value));
    } 
	get
	{
		IntPtr cPtr = VixenLibPINVOKE.Skeleton_BindPose_get(swigCPtr);
		return (Pose) SharedObj.MakeObject(cPtr, false);
	}

  }

  public static readonly int WAIST = VixenLibPINVOKE.Skeleton_WAIST_get();
  public static readonly int TORSO = VixenLibPINVOKE.Skeleton_TORSO_get();
  public static readonly int NECK = VixenLibPINVOKE.Skeleton_NECK_get();
  public static readonly int HEAD = VixenLibPINVOKE.Skeleton_HEAD_get();
  public static readonly int RIGHT_COLLAR = VixenLibPINVOKE.Skeleton_RIGHT_COLLAR_get();
  public static readonly int RIGHT_SHOULDER = VixenLibPINVOKE.Skeleton_RIGHT_SHOULDER_get();
  public static readonly int RIGHT_ELBOW = VixenLibPINVOKE.Skeleton_RIGHT_ELBOW_get();
  public static readonly int RIGHT_WRIST = VixenLibPINVOKE.Skeleton_RIGHT_WRIST_get();
  public static readonly int RIGHT_HAND = VixenLibPINVOKE.Skeleton_RIGHT_HAND_get();
  public static readonly int RIGHT_FINGER = VixenLibPINVOKE.Skeleton_RIGHT_FINGER_get();
  public static readonly int LEFT_COLLAR = VixenLibPINVOKE.Skeleton_LEFT_COLLAR_get();
  public static readonly int LEFT_SHOULDER = VixenLibPINVOKE.Skeleton_LEFT_SHOULDER_get();
  public static readonly int LEFT_ELBOW = VixenLibPINVOKE.Skeleton_LEFT_ELBOW_get();
  public static readonly int LEFT_WRIST = VixenLibPINVOKE.Skeleton_LEFT_WRIST_get();
  public static readonly int LEFT_HAND = VixenLibPINVOKE.Skeleton_LEFT_HAND_get();
  public static readonly int LEFT_FINGER = VixenLibPINVOKE.Skeleton_LEFT_FINGER_get();
  public static readonly int RIGHT_HIP = VixenLibPINVOKE.Skeleton_RIGHT_HIP_get();
  public static readonly int RIGHT_KNEE = VixenLibPINVOKE.Skeleton_RIGHT_KNEE_get();
  public static readonly int RIGHT_ANKLE = VixenLibPINVOKE.Skeleton_RIGHT_ANKLE_get();
  public static readonly int RIGHT_FOOT = VixenLibPINVOKE.Skeleton_RIGHT_FOOT_get();
  public static readonly int LEFT_HIP = VixenLibPINVOKE.Skeleton_LEFT_HIP_get();
  public static readonly int LEFT_KNEE = VixenLibPINVOKE.Skeleton_LEFT_KNEE_get();
  public static readonly int LEFT_ANKLE = VixenLibPINVOKE.Skeleton_LEFT_ANKLE_get();
  public static readonly int LEFT_FOOT = VixenLibPINVOKE.Skeleton_LEFT_FOOT_get();
  public static readonly int NUM_BONES = VixenLibPINVOKE.Skeleton_NUM_BONES_get();
  public static readonly int WORLD_ABSOLUTE = VixenLibPINVOKE.Skeleton_WORLD_ABSOLUTE_get();
  public static readonly int WORLD_BIND = VixenLibPINVOKE.Skeleton_WORLD_BIND_get();
  public static readonly int BONE_LOCK_ROTATION = VixenLibPINVOKE.Skeleton_BONE_LOCK_ROTATION_get();
  public static readonly int BONE_ANIMATE = VixenLibPINVOKE.Skeleton_BONE_ANIMATE_get();
  public static readonly int BONE_PHYSICS = VixenLibPINVOKE.Skeleton_BONE_PHYSICS_get();

}

}
