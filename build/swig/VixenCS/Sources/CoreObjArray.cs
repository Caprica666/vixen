/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class CoreObjArray : SharedObj {
  private HandleRef swigCPtr;

  internal CoreObjArray(IntPtr cPtr, bool cMemoryOwn) : base(VixenLibPINVOKE.CoreObjArray_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CoreObjArray obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CoreObjArray() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_CoreObjArray(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public CoreObjArray(long size) : this(VixenLibPINVOKE.new_CoreObjArray__SWIG_0(size), true) {
  }

  public CoreObjArray() : this(VixenLibPINVOKE.new_CoreObjArray__SWIG_1(), true) {
  }

  public CoreObjArray(CoreObjArray arg0) : this(VixenLibPINVOKE.new_CoreObjArray__SWIG_2(CoreObjArray.getCPtr(arg0)), true) {
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public long GetSize() {
    long ret = VixenLibPINVOKE.CoreObjArray_GetSize(swigCPtr);
    return ret;
  }

  public long GetMaxSize() {
    long ret = VixenLibPINVOKE.CoreObjArray_GetMaxSize(swigCPtr);
    return ret;
  }

  public bool SetSize(long size) {
    bool ret = VixenLibPINVOKE.CoreObjArray_SetSize(swigCPtr, size);
    return ret;
  }

  public bool SetMaxSize(long size) {
    bool ret = VixenLibPINVOKE.CoreObjArray_SetMaxSize(swigCPtr, size);
    return ret;
  }

  public bool SetAt(long index, ObjRef arg1) {
    bool ret = VixenLibPINVOKE.CoreObjArray_SetAt(swigCPtr, index, ObjRef.getCPtr(arg1));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ObjRef GetAt(long index) {
    ObjRef ret = new ObjRef(VixenLibPINVOKE.CoreObjArray_GetAt(swigCPtr, index), false);
    return ret;
  }

  public ObjRef First() {
    IntPtr cPtr = VixenLibPINVOKE.CoreObjArray_First__SWIG_0(swigCPtr);
    ObjRef ret = (cPtr == IntPtr.Zero) ? null : new ObjRef(cPtr, false);
    return ret;
  }

  public ObjRef Last() {
    IntPtr cPtr = VixenLibPINVOKE.CoreObjArray_Last__SWIG_0(swigCPtr);
    ObjRef ret = (cPtr == IntPtr.Zero) ? null : new ObjRef(cPtr, false);
    return ret;
  }

  public bool IsEmpty() {
    bool ret = VixenLibPINVOKE.CoreObjArray_IsEmpty(swigCPtr);
    return ret;
  }

  public void Empty() {
    VixenLibPINVOKE.CoreObjArray_Empty(swigCPtr);
  }

  public void RemoveAt(long index, long size) {
    VixenLibPINVOKE.CoreObjArray_RemoveAt__SWIG_0(swigCPtr, index, size);
  }

  public void RemoveAt(long index) {
    VixenLibPINVOKE.CoreObjArray_RemoveAt__SWIG_1(swigCPtr, index);
  }

  public virtual long Append(ObjRef arg0) {
    long ret = VixenLibPINVOKE.CoreObjArray_Append(swigCPtr, ObjRef.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual long Find(ObjRef arg0) {
    long ret = VixenLibPINVOKE.CoreObjArray_Find(swigCPtr, ObjRef.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual long Merge(CoreObjArray arg0) {
    long ret = VixenLibPINVOKE.CoreObjArray_Merge(swigCPtr, CoreObjArray.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
