/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class Camera : Model {
  private HandleRef swigCPtr;

  internal Camera(IntPtr cPtr, bool cMemoryOwn) : base(VixenLibPINVOKE.Camera_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Camera obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Camera() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_Camera(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Camera() : this(VixenLibPINVOKE.new_Camera__SWIG_0(), true) {
  }

  public Camera(Camera arg0) : this(VixenLibPINVOKE.new_Camera__SWIG_1(Camera.getCPtr(arg0)), true) {
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetCullVol(Box3 arg0) {
    VixenLibPINVOKE.Camera_SetCullVol(swigCPtr, Box3.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetEyeSep(float arg0) {
    VixenLibPINVOKE.Camera_SetEyeSep(swigCPtr, arg0);
  }

  public virtual void SetFocal(float arg0) {
    VixenLibPINVOKE.Camera_SetFocal(swigCPtr, arg0);
  }

  public virtual float GetEyeSep() {
    float ret = VixenLibPINVOKE.Camera_GetEyeSep(swigCPtr);
    return ret;
  }

  public virtual float GetFocal() {
    float ret = VixenLibPINVOKE.Camera_GetFocal(swigCPtr);
    return ret;
  }

  public virtual void GetViewVol(Box3 arg0) {
    VixenLibPINVOKE.Camera_GetViewVol(swigCPtr, Box3.getCPtr(arg0));
  }

  public virtual Box3 GetCullVol() {
    Box3 ret = new Box3(VixenLibPINVOKE.Camera_GetCullVol(swigCPtr), false);
    return ret;
  }

  public virtual int IsVisible(Sphere arg0) {
    int ret = VixenLibPINVOKE.Camera_IsVisible__SWIG_0(swigCPtr, Sphere.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int IsVisible(Box3 box) {
    int ret = VixenLibPINVOKE.Camera_IsVisible__SWIG_1(swigCPtr, Box3.getCPtr(box));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Matrix GetViewTrans() {
    IntPtr cPtr = VixenLibPINVOKE.Camera_GetViewTrans(swigCPtr);
    Matrix ret = (cPtr == IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public void GetStereoView(int which_eye, Box3 viewvol) {
    VixenLibPINVOKE.Camera_GetStereoView(swigCPtr, which_eye, Box3.getCPtr(viewvol));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual new Vec3 GetCenter(int transformtype) {
    Vec3 ret = new Vec3(VixenLibPINVOKE.Camera_GetCenter__SWIG_0(swigCPtr, transformtype), true);
    return ret;
  }

  public override bool GetCenter(Vec3 p, int transformtype) {
    bool ret = VixenLibPINVOKE.Camera_GetCenter__SWIG_1(swigCPtr, Vec3.getCPtr(p), transformtype);
    return ret;
  }

  public override bool GetCenter(Vec3 p) {
    bool ret = VixenLibPINVOKE.Camera_GetCenter__SWIG_2(swigCPtr, Vec3.getCPtr(p));
    return ret;
  }

  public virtual void SetViewTrans(Scene arg0, Matrix arg1) {
    VixenLibPINVOKE.Camera_SetViewTrans__SWIG_0(swigCPtr, Scene.getCPtr(arg0), Matrix.getCPtr(arg1));
  }

  public virtual void SetViewTrans(Scene arg0) {
    VixenLibPINVOKE.Camera_SetViewTrans__SWIG_1(swigCPtr, Scene.getCPtr(arg0));
  }

  public Box3 ViewVol {
    set {
      VixenLibPINVOKE.Camera_ViewVol_set(swigCPtr, Box3.getCPtr(value));
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      Box3 ret = new Box3(VixenLibPINVOKE.Camera_ViewVol_get(swigCPtr), false);
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int Type {
    set {
      VixenLibPINVOKE.Camera_Type_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.Camera_Type_get(swigCPtr);
      return ret;
    } 
  }

  public float Aspect {
    set {
      VixenLibPINVOKE.Camera_Aspect_set(swigCPtr, value);
    } 
    get {
      float ret = VixenLibPINVOKE.Camera_Aspect_get(swigCPtr);
      return ret;
    } 
  }

  public float FieldOfView {
    set {
      VixenLibPINVOKE.Camera_FieldOfView_set(swigCPtr, value);
    } 
    get {
      float ret = VixenLibPINVOKE.Camera_FieldOfView_get(swigCPtr);
      return ret;
    } 
  }

  public float Hither {
    set {
      VixenLibPINVOKE.Camera_Hither_set(swigCPtr, value);
    } 
    get {
      float ret = VixenLibPINVOKE.Camera_Hither_get(swigCPtr);
      return ret;
    } 
  }

  public float Yon {
    set {
      VixenLibPINVOKE.Camera_Yon_set(swigCPtr, value);
    } 
    get {
      float ret = VixenLibPINVOKE.Camera_Yon_get(swigCPtr);
      return ret;
    } 
  }

  public float Height {
    set {
      VixenLibPINVOKE.Camera_Height_set(swigCPtr, value);
    } 
    get {
      float ret = VixenLibPINVOKE.Camera_Height_get(swigCPtr);
      return ret;
    } 
  }

  public static readonly int PERSPECTIVE = VixenLibPINVOKE.Camera_PERSPECTIVE_get();
  public static readonly int ORTHOGRAPHIC = VixenLibPINVOKE.Camera_ORTHOGRAPHIC_get();
  public static readonly int LEFT_PERSP = VixenLibPINVOKE.Camera_LEFT_PERSP_get();
  public static readonly int RIGHT_PERSP = VixenLibPINVOKE.Camera_RIGHT_PERSP_get();
  public static readonly int VISIBLE = VixenLibPINVOKE.Camera_VISIBLE_get();
  public static readonly int ALL_VISIBLE = VixenLibPINVOKE.Camera_ALL_VISIBLE_get();

}

}
