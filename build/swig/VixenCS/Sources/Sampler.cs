/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class Sampler : SharedObj {
  private HandleRef swigCPtr;

  internal Sampler(IntPtr cPtr, bool cMemoryOwn) : base(VixenLibPINVOKE.Sampler_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Sampler obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Sampler() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_Sampler(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Sampler() : this(VixenLibPINVOKE.new_Sampler__SWIG_0(), true) {
  }

  public Sampler(Sampler src) : this(VixenLibPINVOKE.new_Sampler__SWIG_1(Sampler.getCPtr(src)), true) {
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Sampler(string filename) : this(VixenLibPINVOKE.new_Sampler__SWIG_2(filename), true) {
  }

  public Sampler(Texture arg0) : this(VixenLibPINVOKE.new_Sampler__SWIG_3(Texture.getCPtr(arg0)), true) {
  }

  public virtual bool Equal(Sampler src) {
    bool ret = VixenLibPINVOKE.Sampler_Equal(swigCPtr, Sampler.getCPtr(src));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool NotEqual(Sampler src) {
    bool ret = VixenLibPINVOKE.Sampler_NotEqual(swigCPtr, Sampler.getCPtr(src));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetAttrName(int attr) {
    string ret = VixenLibPINVOKE.Sampler_GetAttrName(swigCPtr, attr);
    return ret;
  }

  public int Get(int attr) {
    int ret = VixenLibPINVOKE.Sampler_Get(swigCPtr, attr);
    return ret;
  }

  public virtual void Set(int attr, int val) {
    VixenLibPINVOKE.Sampler_Set(swigCPtr, attr, val);
  }

  public bool IsMipMap() {
    bool ret = VixenLibPINVOKE.Sampler_IsMipMap(swigCPtr);
    return ret;
  }

  public bool HasAlpha() {
    bool ret = VixenLibPINVOKE.Sampler_HasAlpha(swigCPtr);
    return ret;
  }

  public Texture Texture {
    set {
      VixenLibPINVOKE.Sampler_Texture_set(swigCPtr, Texture.getCPtr(value));
    } 
	get
	{
		IntPtr cPtr = VixenLibPINVOKE.Sampler_Texture_get(swigCPtr);
		return (Texture) SharedObj.MakeObject(cPtr, false);
	}

  }

  public static readonly int NONE = VixenLibPINVOKE.Sampler_NONE_get();
  public static readonly int TEXTUREOP = VixenLibPINVOKE.Sampler_TEXTUREOP_get();
  public static readonly int TEXCOORD = VixenLibPINVOKE.Sampler_TEXCOORD_get();
  public static readonly int MINFILTER = VixenLibPINVOKE.Sampler_MINFILTER_get();
  public static readonly int MAGFILTER = VixenLibPINVOKE.Sampler_MAGFILTER_get();
  public static readonly int MIPMAP = VixenLibPINVOKE.Sampler_MIPMAP_get();
  public static readonly int NUM_ATTRS = VixenLibPINVOKE.Sampler_NUM_ATTRS_get();

  public static readonly int TEXGEN_SPHERE = VixenLibPINVOKE.Sampler_TEXGEN_SPHERE_get();
  public static readonly int TEXGEN_CUBE = VixenLibPINVOKE.Sampler_TEXGEN_CUBE_get();
  public static readonly int NEAREST = VixenLibPINVOKE.Sampler_NEAREST_get();
  public static readonly int LINEAR = VixenLibPINVOKE.Sampler_LINEAR_get();
  public static readonly int EMISSION = VixenLibPINVOKE.Sampler_EMISSION_get();
  public static readonly int DIFFUSE = VixenLibPINVOKE.Sampler_DIFFUSE_get();
  public static readonly int SPECULAR = VixenLibPINVOKE.Sampler_SPECULAR_get();
  public static readonly int BUMP = VixenLibPINVOKE.Sampler_BUMP_get();
  public static readonly int SHADER = VixenLibPINVOKE.Sampler_SHADER_get();

}

}
