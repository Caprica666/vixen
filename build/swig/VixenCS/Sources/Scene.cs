/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class Scene : SharedObj {
  private HandleRef swigCPtr;

  internal Scene(IntPtr cPtr, bool cMemoryOwn) : base(VixenLibPINVOKE.Scene_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Scene obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Scene() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_Scene(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Scene(SWIGTYPE_p_void r) : this(VixenLibPINVOKE.new_Scene__SWIG_0(SWIGTYPE_p_void.getCPtr(r)), true) {
  }

  public Scene() : this(VixenLibPINVOKE.new_Scene__SWIG_1(), true) {
  }

  public Scene(Scene arg0) : this(VixenLibPINVOKE.new_Scene__SWIG_2(Scene.getCPtr(arg0)), true) {
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Suspend() {
    VixenLibPINVOKE.Scene_Suspend(swigCPtr);
  }

  public void Resume() {
    VixenLibPINVOKE.Scene_Resume(swigCPtr);
  }

  public void Repaint() {
    VixenLibPINVOKE.Scene_Repaint(swigCPtr);
  }

  public bool IsSuspended() {
    bool ret = VixenLibPINVOKE.Scene_IsSuspended(swigCPtr);
    return ret;
  }

  public void ZoomToModel(Model arg0) {
    VixenLibPINVOKE.Scene_ZoomToModel(swigCPtr, Model.getCPtr(arg0));
  }

  public void ZoomToBounds(Box3 bound) {
    VixenLibPINVOKE.Scene_ZoomToBounds(swigCPtr, Box3.getCPtr(bound));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPriority(int p) {
    VixenLibPINVOKE.Scene_SetPriority(swigCPtr, p);
  }

  public virtual void ShowAll() {
    VixenLibPINVOKE.Scene_ShowAll(swigCPtr);
  }

  public virtual void EnableOptions(int arg0) {
    VixenLibPINVOKE.Scene_EnableOptions(swigCPtr, arg0);
  }

  public virtual void DisableOptions(int arg0) {
    VixenLibPINVOKE.Scene_DisableOptions(swigCPtr, arg0);
  }

  public virtual bool SetColorBuffer(Bitmap arg0) {
    bool ret = VixenLibPINVOKE.Scene_SetColorBuffer(swigCPtr, Bitmap.getCPtr(arg0));
    return ret;
  }

  public virtual bool SetDepthBuffer(Bitmap arg0) {
    bool ret = VixenLibPINVOKE.Scene_SetDepthBuffer(swigCPtr, Bitmap.getCPtr(arg0));
    return ret;
  }

  public virtual void Append(Scene child) {
    VixenLibPINVOKE.Scene_Append(swigCPtr, Scene.getCPtr(child));
  }

  public virtual Shader InstallShader(Shader arg0) {
    IntPtr cPtr = VixenLibPINVOKE.Scene_InstallShader(swigCPtr, Shader.getCPtr(arg0));
    Shader ret = (cPtr == IntPtr.Zero) ? null : new Shader(cPtr, false);
    return ret;
  }

  public Bitmap GetDepthBuffer() 
	{
		IntPtr cPtr = VixenLibPINVOKE.Scene_GetDepthBuffer(swigCPtr);
		return (Bitmap)  SharedObj.MakeObject(cPtr, true);
	}


  public Bitmap GetColorBuffer() 
	{
		IntPtr cPtr = VixenLibPINVOKE.Scene_GetColorBuffer(swigCPtr);
		return (Bitmap)  SharedObj.MakeObject(cPtr, true);
	}


  public float GetTime() {
    float ret = VixenLibPINVOKE.Scene_GetTime(swigCPtr);
    return ret;
  }

  public bool GetBound(Sphere sphere) {
    bool ret = VixenLibPINVOKE.Scene_GetBound(swigCPtr, Sphere.getCPtr(sphere));
    return ret;
  }

  public Appearance GetPostProcess() 
	{
		IntPtr cPtr = VixenLibPINVOKE.Scene_GetPostProcess(swigCPtr);
		return (Appearance)  SharedObj.MakeObject(cPtr, true);
	}


  public void SetPostProcess(Appearance arg0) {
    VixenLibPINVOKE.Scene_SetPostProcess(swigCPtr, Appearance.getCPtr(arg0));
  }

  public virtual void DoFrame() {
    VixenLibPINVOKE.Scene_DoFrame(swigCPtr);
  }

  public virtual void DoSimulation() {
    VixenLibPINVOKE.Scene_DoSimulation(swigCPtr);
  }

  public virtual void Exit() {
    VixenLibPINVOKE.Scene_Exit(swigCPtr);
  }

  public static int NumTexUnits {
    set {
      VixenLibPINVOKE.Scene_NumTexUnits_set(value);
    } 
    get {
      int ret = VixenLibPINVOKE.Scene_NumTexUnits_get();
      return ret;
    } 
  }

  public static int DeviceDepth {
    set {
      VixenLibPINVOKE.Scene_DeviceDepth_set(value);
    } 
    get {
      int ret = VixenLibPINVOKE.Scene_DeviceDepth_get();
      return ret;
    } 
  }

  public static string RenderOptions {
    set {
      VixenLibPINVOKE.Scene_RenderOptions_set(value);
    } 
    get {
      string ret = VixenLibPINVOKE.Scene_RenderOptions_get();
      return ret;
    } 
  }

  public void OnResize() {
    VixenLibPINVOKE.Scene_OnResize(swigCPtr);
  }

  public int Options {
    set {
      VixenLibPINVOKE.Scene_Options_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.Scene_Options_get(swigCPtr);
      return ret;
    } 
  }

  public Box2 Viewport {
    set {
      VixenLibPINVOKE.Scene_Viewport_set(swigCPtr, Box2.getCPtr(value));
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      Box2 ret = new Box2(VixenLibPINVOKE.Scene_Viewport_get(swigCPtr), false);
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool AutoAdjust {
    set {
      VixenLibPINVOKE.Scene_AutoAdjust_set(swigCPtr, value);
    } 
    get {
      bool ret = VixenLibPINVOKE.Scene_AutoAdjust_get(swigCPtr);
      return ret;
    } 
  }

  public Col4 BackColor {
    set {
      VixenLibPINVOKE.Scene_BackColor_set(swigCPtr, Col4.getCPtr(value));
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      Col4 ret = new Col4(VixenLibPINVOKE.Scene_BackColor_get(swigCPtr), false);
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Camera Camera {
    set {
      VixenLibPINVOKE.Scene_Camera_set(swigCPtr, Camera.getCPtr(value));
    } 
	get
	{
		IntPtr cPtr = VixenLibPINVOKE.Scene_Camera_get(swigCPtr);
		return (Camera) SharedObj.MakeObject(cPtr, false);
	}

  }

  public Model Models {
    set {
      VixenLibPINVOKE.Scene_Models_set(swigCPtr, Model.getCPtr(value));
    } 
	get
	{
		IntPtr cPtr = VixenLibPINVOKE.Scene_Models_get(swigCPtr);
		return (Model) SharedObj.MakeObject(cPtr, false);
	}

  }

  public Engine Engines {
    set {
      VixenLibPINVOKE.Scene_Engines_set(swigCPtr, Engine.getCPtr(value));
    } 
	get
	{
		IntPtr cPtr = VixenLibPINVOKE.Scene_Engines_get(swigCPtr);
		return (Engine) SharedObj.MakeObject(cPtr, false);
	}

  }

  public float TimeInc {
    set {
      VixenLibPINVOKE.Scene_TimeInc_set(swigCPtr, value);
    } 
    get {
      float ret = VixenLibPINVOKE.Scene_TimeInc_get(swigCPtr);
      return ret;
    } 
  }

  public Light Ambient {
    set {
      VixenLibPINVOKE.Scene_Ambient_set(swigCPtr, Light.getCPtr(value));
    } 
	get
	{
		IntPtr cPtr = VixenLibPINVOKE.Scene_Ambient_get(swigCPtr);
		return (Light) SharedObj.MakeObject(cPtr, false);
	}

  }

  public long Window {
    set {
      VixenLibPINVOKE.Scene_Window_set(swigCPtr, value);
    } 
    get {
      long ret = VixenLibPINVOKE.Scene_Window_get(swigCPtr);
      return ret;
    } 
  }

  public static readonly int CLEARDEPTH = VixenLibPINVOKE.Scene_CLEARDEPTH_get();
  public static readonly int CLEARCOLOR = VixenLibPINVOKE.Scene_CLEARCOLOR_get();
  public static readonly int CLEARALL = VixenLibPINVOKE.Scene_CLEARALL_get();
  public static readonly int STATESORT = VixenLibPINVOKE.Scene_STATESORT_get();
  public static readonly int DOUBLEBUFFER = VixenLibPINVOKE.Scene_DOUBLEBUFFER_get();
  public static readonly int FULLSCREEN = VixenLibPINVOKE.Scene_FULLSCREEN_get();
  public static readonly int OCCLUSIONCULL = VixenLibPINVOKE.Scene_OCCLUSIONCULL_get();
  public static readonly int REPAINT = VixenLibPINVOKE.Scene_REPAINT_get();

}

}
