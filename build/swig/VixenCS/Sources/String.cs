/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

internal class String : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal String(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(String obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~String() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_String(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

		public override bool Equals(Object obj)
		{
			if (obj == null)
				return IsEmpty();
			if (obj.GetType() == typeof(String))
			{
				String s = obj as String;
				return Compare(s.GetBuffer(s.GetLength())) == 0;
			}
			else if (obj.GetType() == typeof(string))
			{
				string s = obj as string;
				return Compare(s) == 0;
			}
			return false;
		}

		public static bool operator ==(String arg1, String arg2) { return arg1.Equals(arg2); }
		public static bool operator !=(String arg1, String arg2) { return !arg1.Equals(arg2); }
	
  public String() : this(VixenLibPINVOKE.new_String__SWIG_0(), true) {
  }

  public String(char ch, int nRepeat) : this(VixenLibPINVOKE.new_String__SWIG_1(ch, nRepeat), true) {
  }

  public String(char ch) : this(VixenLibPINVOKE.new_String__SWIG_2(ch), true) {
  }

  public String(string lpsz) : this(VixenLibPINVOKE.new_String__SWIG_3(lpsz), true) {
  }

  public String(string lpch, uint nLength) : this(VixenLibPINVOKE.new_String__SWIG_4(lpch, nLength), true) {
  }

  public static void WideToMultiByte(string wcharBuffer, string charBuffer, int widelen) {
    VixenLibPINVOKE.String_WideToMultiByte(wcharBuffer, charBuffer, widelen);
  }

  public static void MultiByteToWide(string charBuffer, string wcharBuffer, int mblen) {
    VixenLibPINVOKE.String_MultiByteToWide(charBuffer, wcharBuffer, mblen);
  }

  public void AsMultiByte(string charBuffer, uint maxlen) {
    VixenLibPINVOKE.String_AsMultiByte(swigCPtr, charBuffer, maxlen);
  }

  public void AsWide(string wcharBuffer, uint maxlen) {
    VixenLibPINVOKE.String_AsWide(swigCPtr, wcharBuffer, maxlen);
  }

  public String(double aNum) : this(VixenLibPINVOKE.new_String__SWIG_6(aNum), true) {
  }

  public String(int aNum) : this(VixenLibPINVOKE.new_String__SWIG_7(aNum), true) {
  }

  public String(ushort aNum) : this(VixenLibPINVOKE.new_String__SWIG_8(aNum), true) {
  }

  public double toDouble() {
    double ret = VixenLibPINVOKE.String_toDouble(swigCPtr);
    return ret;
  }

  public float toFloat() {
    float ret = VixenLibPINVOKE.String_toFloat(swigCPtr);
    return ret;
  }

  public int toLong() {
    int ret = VixenLibPINVOKE.String_toLong(swigCPtr);
    return ret;
  }

  public int toInt() {
    int ret = VixenLibPINVOKE.String_toInt(swigCPtr);
    return ret;
  }

  public short toShort() {
    short ret = VixenLibPINVOKE.String_toShort(swigCPtr);
    return ret;
  }

  public uint toULong() {
    uint ret = VixenLibPINVOKE.String_toULong(swigCPtr);
    return ret;
  }

  public uint toUInt() {
    uint ret = VixenLibPINVOKE.String_toUInt(swigCPtr);
    return ret;
  }

  public ushort toUShort() {
    ushort ret = VixenLibPINVOKE.String_toUShort(swigCPtr);
    return ret;
  }

  public void MakeUpper() {
    VixenLibPINVOKE.String_MakeUpper(swigCPtr);
  }

  public void MakeLower() {
    VixenLibPINVOKE.String_MakeLower(swigCPtr);
  }

  public uint GetLength() {
    uint ret = VixenLibPINVOKE.String_GetLength(swigCPtr);
    return ret;
  }

  public bool IsEmpty() {
    bool ret = VixenLibPINVOKE.String_IsEmpty(swigCPtr);
    return ret;
  }

  public void Empty() {
    VixenLibPINVOKE.String_Empty(swigCPtr);
  }

  public char GetAt(uint nIndex) {
    char ret = VixenLibPINVOKE.String_GetAt(swigCPtr, nIndex);
    return ret;
  }

  public void SetAt(uint nIndex, char ch) {
    VixenLibPINVOKE.String_SetAt(swigCPtr, nIndex, ch);
  }

  public int Compare(string lpsz) {
    int ret = VixenLibPINVOKE.String_Compare(swigCPtr, lpsz);
    return ret;
  }

  public int CompareNoCase(string lpsz) {
    int ret = VixenLibPINVOKE.String_CompareNoCase(swigCPtr, lpsz);
    return ret;
  }

  public string Mid(uint nFirst, uint nCount) 
    {
		string ret = VixenLibPINVOKE.String_Mid__SWIG_0(swigCPtr, nFirst, nCount);
		return ret;
	}
	

  public string Mid(uint nFirst) 
    {
		string ret = VixenLibPINVOKE.String_Mid__SWIG_1(swigCPtr, nFirst);
		return ret;
	}
	

  public string Left(int nCount) 
    {
		string ret = VixenLibPINVOKE.String_Left(swigCPtr, nCount);
		return ret;
	}
	

  public string Right(int nCount) 
    {
		string ret = VixenLibPINVOKE.String_Right(swigCPtr, nCount);
		return ret;
	}
	

  public string SpanIncluding(string lpszCharSet) 
    {
		string ret = VixenLibPINVOKE.String_SpanIncluding(swigCPtr, lpszCharSet);
		return ret;
	}
	

  public string SpanExcluding(string lpszCharSet) 
    {
		string ret = VixenLibPINVOKE.String_SpanExcluding(swigCPtr, lpszCharSet);
		return ret;
	}
	

  public void TrimRight() {
    VixenLibPINVOKE.String_TrimRight__SWIG_0(swigCPtr);
  }

  public void TrimLeft() {
    VixenLibPINVOKE.String_TrimLeft__SWIG_0(swigCPtr);
  }

  public void TrimRight(char chTarget) {
    VixenLibPINVOKE.String_TrimRight__SWIG_1(swigCPtr, chTarget);
  }

  public void TrimRight(string lpszTargets) {
    VixenLibPINVOKE.String_TrimRight__SWIG_2(swigCPtr, lpszTargets);
  }

  public void TrimLeft(char chTarget) {
    VixenLibPINVOKE.String_TrimLeft__SWIG_1(swigCPtr, chTarget);
  }

  public void TrimLeft(string lpszTargets) {
    VixenLibPINVOKE.String_TrimLeft__SWIG_2(swigCPtr, lpszTargets);
  }

  public uint Replace(char chOld, char chNew) {
    uint ret = VixenLibPINVOKE.String_Replace__SWIG_0(swigCPtr, chOld, chNew);
    return ret;
  }

  public uint Replace(string lpszOld, string lpszNew) {
    uint ret = VixenLibPINVOKE.String_Replace__SWIG_1(swigCPtr, lpszOld, lpszNew);
    return ret;
  }

  public uint Remove(char chRemove) {
    uint ret = VixenLibPINVOKE.String_Remove(swigCPtr, chRemove);
    return ret;
  }

  public uint Insert(uint nIndex, char ch) {
    uint ret = VixenLibPINVOKE.String_Insert__SWIG_0(swigCPtr, nIndex, ch);
    return ret;
  }

  public uint Insert(uint nIndex, string pstr) {
    uint ret = VixenLibPINVOKE.String_Insert__SWIG_1(swigCPtr, nIndex, pstr);
    return ret;
  }

  public uint Delete(uint nIndex, uint nCount) {
    uint ret = VixenLibPINVOKE.String_Delete__SWIG_0(swigCPtr, nIndex, nCount);
    return ret;
  }

  public uint Delete(uint nIndex) {
    uint ret = VixenLibPINVOKE.String_Delete__SWIG_1(swigCPtr, nIndex);
    return ret;
  }

  public string GetBuffer(uint nMinBufLength) {
    string ret = VixenLibPINVOKE.String_GetBuffer(swigCPtr, nMinBufLength);
    return ret;
  }

  public int Find(char c) {
    int ret = VixenLibPINVOKE.String_Find__SWIG_0(swigCPtr, c);
    return ret;
  }

  public int Find(string str) {
    int ret = VixenLibPINVOKE.String_Find__SWIG_1(swigCPtr, str);
    return ret;
  }

  public int FindNoCase(char c) {
    int ret = VixenLibPINVOKE.String_FindNoCase__SWIG_0(swigCPtr, c);
    return ret;
  }

  public int FindNoCase(string str) {
    int ret = VixenLibPINVOKE.String_FindNoCase__SWIG_1(swigCPtr, str);
    return ret;
  }

  public int ReverseFind(char c) {
    int ret = VixenLibPINVOKE.String_ReverseFind(swigCPtr, c);
    return ret;
  }

}

}
