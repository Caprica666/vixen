/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class Engine : Group {
  private HandleRef swigCPtr;

  internal Engine(IntPtr cPtr, bool cMemoryOwn) : base(VixenLibPINVOKE.Engine_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Engine obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Engine() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_Engine(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public new Engine Parent() 
	{
		IntPtr cPtr = VixenLibPINVOKE.Engine_Parent(swigCPtr);
		return (Engine)  SharedObj.MakeObject(cPtr, true);
	}


  public new Engine First() 
	{
		IntPtr cPtr = VixenLibPINVOKE.Engine_First(swigCPtr);
		return (Engine)  SharedObj.MakeObject(cPtr, true);
	}


  public new Engine Last() 
	{
		IntPtr cPtr = VixenLibPINVOKE.Engine_Last(swigCPtr);
		return (Engine)  SharedObj.MakeObject(cPtr, true);
	}


  public new Engine Next() 
	{
		IntPtr cPtr = VixenLibPINVOKE.Engine_Next(swigCPtr);
		return (Engine)  SharedObj.MakeObject(cPtr, true);
	}


  public new Engine GetAt(int i) 
	{
		IntPtr cPtr = VixenLibPINVOKE.Engine_GetAt(swigCPtr, i);
		return (Engine)  SharedObj.MakeObject(cPtr, true);
	}


  public Engine() : this(VixenLibPINVOKE.new_Engine__SWIG_0(), true) {
  }

  public Engine(Engine arg0) : this(VixenLibPINVOKE.new_Engine__SWIG_1(Engine.getCPtr(arg0)), true) {
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsRunning() {
    bool ret = VixenLibPINVOKE.Engine_IsRunning(swigCPtr);
    return ret;
  }

  public virtual void Enable(int arg0, int who) {
    VixenLibPINVOKE.Engine_Enable__SWIG_0(swigCPtr, arg0, who);
  }

  public virtual void Enable(int arg0) {
    VixenLibPINVOKE.Engine_Enable__SWIG_1(swigCPtr, arg0);
  }

  public virtual void Disable(int arg0, int who) {
    VixenLibPINVOKE.Engine_Disable__SWIG_0(swigCPtr, arg0, who);
  }

  public virtual void Disable(int arg0) {
    VixenLibPINVOKE.Engine_Disable__SWIG_1(swigCPtr, arg0);
  }

  public virtual void Start(int who) {
    VixenLibPINVOKE.Engine_Start__SWIG_0(swigCPtr, who);
  }

  public virtual void Start() {
    VixenLibPINVOKE.Engine_Start__SWIG_1(swigCPtr);
  }

  public virtual void Stop(int who) {
    VixenLibPINVOKE.Engine_Stop__SWIG_0(swigCPtr, who);
  }

  public virtual void Stop() {
    VixenLibPINVOKE.Engine_Stop__SWIG_1(swigCPtr);
  }

  public virtual Engine FindTarget(SharedObj arg0) 
	{
		IntPtr cPtr = VixenLibPINVOKE.Engine_FindTarget(swigCPtr, SharedObj.getCPtr(arg0));
		return (Engine)  SharedObj.MakeObject(cPtr, true);
	}


  public virtual void Compute(float time) {
    VixenLibPINVOKE.Engine_Compute(swigCPtr, time);
  }

  public virtual void ComputeChildren(float time, int filter) {
    VixenLibPINVOKE.Engine_ComputeChildren__SWIG_0(swigCPtr, time, filter);
  }

  public virtual void ComputeChildren(float time) {
    VixenLibPINVOKE.Engine_ComputeChildren__SWIG_1(swigCPtr, time);
  }

  public virtual float ComputeTime(float t) {
    float ret = VixenLibPINVOKE.Engine_ComputeTime(swigCPtr, t);
    return ret;
  }

  public int State {
    set {
      VixenLibPINVOKE.Engine_State_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.Engine_State_get(swigCPtr);
      return ret;
    } 
  }

  public float Elapsed {
    set {
      VixenLibPINVOKE.Engine_Elapsed_set(swigCPtr, value);
    } 
    get {
      float ret = VixenLibPINVOKE.Engine_Elapsed_get(swigCPtr);
      return ret;
    } 
  }

  public float StopTime {
    set {
      VixenLibPINVOKE.Engine_StopTime_set(swigCPtr, value);
    } 
    get {
      float ret = VixenLibPINVOKE.Engine_StopTime_get(swigCPtr);
      return ret;
    } 
  }

  public SharedObj Target {
    set {
      VixenLibPINVOKE.Engine_Target_set(swigCPtr, SharedObj.getCPtr(value));
    } 
	get
	{
		IntPtr cPtr = VixenLibPINVOKE.Engine_Target_get(swigCPtr);
		return (SharedObj) SharedObj.MakeObject(cPtr, false);
	}

  }

  public float StartTime {
    set {
      VixenLibPINVOKE.Engine_StartTime_set(swigCPtr, value);
    } 
    get {
      float ret = VixenLibPINVOKE.Engine_StartTime_get(swigCPtr);
      return ret;
    } 
  }

  public int Control {
    set {
      VixenLibPINVOKE.Engine_Control_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.Engine_Control_get(swigCPtr);
      return ret;
    } 
  }

  public float Speed {
    set {
      VixenLibPINVOKE.Engine_Speed_set(swigCPtr, value);
    } 
    get {
      float ret = VixenLibPINVOKE.Engine_Speed_get(swigCPtr);
      return ret;
    } 
  }

  public float Duration {
    set {
      VixenLibPINVOKE.Engine_Duration_set(swigCPtr, value);
    } 
    get {
      float ret = VixenLibPINVOKE.Engine_Duration_get(swigCPtr);
      return ret;
    } 
  }

  public float TimeOfs {
    set {
      VixenLibPINVOKE.Engine_TimeOfs_set(swigCPtr, value);
    } 
    get {
      float ret = VixenLibPINVOKE.Engine_TimeOfs_get(swigCPtr);
      return ret;
    } 
  }

  public static readonly int CYCLE = VixenLibPINVOKE.Engine_CYCLE_get();
  public static readonly int CONTROL_CHILDREN = VixenLibPINVOKE.Engine_CONTROL_CHILDREN_get();
  public static readonly int CHILDREN_FIRST = VixenLibPINVOKE.Engine_CHILDREN_FIRST_get();
  public static readonly int REVERSE = VixenLibPINVOKE.Engine_REVERSE_get();
  public static readonly int DATA_PARALLEL = VixenLibPINVOKE.Engine_DATA_PARALLEL_get();
  public static readonly int ACTIVE = VixenLibPINVOKE.Engine_ACTIVE_get();
  public static readonly int PING_PONG = VixenLibPINVOKE.Engine_PING_PONG_get();
  public static readonly int TASK_PARALLEL = VixenLibPINVOKE.Engine_TASK_PARALLEL_get();
  public static readonly int RECORD = VixenLibPINVOKE.Engine_RECORD_get();
  public static readonly int BLEND_TO = VixenLibPINVOKE.Engine_BLEND_TO_get();
  public static readonly int BLEND_BETWEEN = VixenLibPINVOKE.Engine_BLEND_BETWEEN_get();
  public static readonly int USER_AVAILABLE = VixenLibPINVOKE.Engine_USER_AVAILABLE_get();
  public static readonly int CYCLE_REVERSE = VixenLibPINVOKE.Engine_CYCLE_REVERSE_get();
  public static readonly int CYCLE_PING_PONG = VixenLibPINVOKE.Engine_CYCLE_PING_PONG_get();
  public static readonly int CYCLE_REVERSE_PING_PONG = VixenLibPINVOKE.Engine_CYCLE_REVERSE_PING_PONG_get();

  public static readonly int DONE = VixenLibPINVOKE.Engine_DONE_get();
  public static readonly int IDLE = VixenLibPINVOKE.Engine_IDLE_get();
  public static readonly int RUNNING = VixenLibPINVOKE.Engine_RUNNING_get();

  public static readonly int RELATIVE = VixenLibPINVOKE.Engine_RELATIVE_get();
  public static readonly int ONLYME = VixenLibPINVOKE.Engine_ONLYME_get();

}

}
