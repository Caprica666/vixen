/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class Pose : SharedObj {
  private HandleRef swigCPtr;

  internal Pose(IntPtr cPtr, bool cMemoryOwn) : base(VixenLibPINVOKE.Pose_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Pose obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Pose() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_Pose(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Pose(Skeleton skel, int space) : this(VixenLibPINVOKE.new_Pose__SWIG_0(Skeleton.getCPtr(skel), space), true) {
  }

  public Pose(Skeleton skel) : this(VixenLibPINVOKE.new_Pose__SWIG_1(Skeleton.getCPtr(skel)), true) {
  }

  public Pose() : this(VixenLibPINVOKE.new_Pose__SWIG_2(), true) {
  }

  public int GetNumBones() {
    int ret = VixenLibPINVOKE.Pose_GetNumBones(swigCPtr);
    return ret;
  }

  public int GetCoordSpace() {
    int ret = VixenLibPINVOKE.Pose_GetCoordSpace(swigCPtr);
    return ret;
  }

  public Skeleton GetSkeleton() 
	{
		IntPtr cPtr = VixenLibPINVOKE.Pose_GetSkeleton(swigCPtr);
		return (Skeleton)  SharedObj.MakeObject(cPtr, true);
	}


  public void ClearRotations() {
    VixenLibPINVOKE.Pose_ClearRotations(swigCPtr);
  }

  public Vec3 GetWorldPosition(int i) {
    Vec3 ret = new Vec3(VixenLibPINVOKE.Pose_GetWorldPosition(swigCPtr, i), false);
    return ret;
  }

  public void GetWorldPositions(Vec3 positions) {
    VixenLibPINVOKE.Pose_GetWorldPositions__SWIG_0(swigCPtr, Vec3.getCPtr(positions));
  }

  public void GetWorldMatrix(int i, Matrix mtx) {
    VixenLibPINVOKE.Pose_GetWorldMatrix(swigCPtr, i, Matrix.getCPtr(mtx));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetWorldMatrix(int i, Matrix mtx) {
    VixenLibPINVOKE.Pose_SetWorldMatrix(swigCPtr, i, Matrix.getCPtr(mtx));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetWorldRotations(Quat rotations) {
    VixenLibPINVOKE.Pose_GetWorldRotations__SWIG_0(swigCPtr, Quat.getCPtr(rotations));
  }

  public Quat GetWorldRotation(int i) {
    Quat ret = new Quat(VixenLibPINVOKE.Pose_GetWorldRotation(swigCPtr, i), false);
    return ret;
  }

  public void SetWorldRotation(int i, Quat rot) {
    VixenLibPINVOKE.Pose_SetWorldRotation(swigCPtr, i, Quat.getCPtr(rot));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetLocalMatrix(int i, Matrix mtx) {
    VixenLibPINVOKE.Pose_GetLocalMatrix(swigCPtr, i, Matrix.getCPtr(mtx));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Quat GetLocalRotation(int i) {
    Quat ret = new Quat(VixenLibPINVOKE.Pose_GetLocalRotation(swigCPtr, i), false);
    return ret;
  }

  public void SetLocalRotation(int i, Quat rot) {
    VixenLibPINVOKE.Pose_SetLocalRotation(swigCPtr, i, Quat.getCPtr(rot));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Vec3 GetLocalPosition(int i) {
    Vec3 ret = new Vec3(VixenLibPINVOKE.Pose_GetLocalPosition(swigCPtr, i), false);
    return ret;
  }

  public bool Compare(Pose src) {
    bool ret = VixenLibPINVOKE.Pose_Compare(swigCPtr, Pose.getCPtr(src));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetPosition(Vec3 arg0) {
    VixenLibPINVOKE.Pose_SetPosition(swigCPtr, Vec3.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool Sync() {
    bool ret = VixenLibPINVOKE.Pose_Sync(swigCPtr);
    return ret;
  }

  public void SetWorldPositions(float[] floatArray) {
    VixenLibPINVOKE.Pose_SetWorldPositions(swigCPtr, floatArray);
  }

  public void GetWorldPositions(float[] floatArray) {
    VixenLibPINVOKE.Pose_GetWorldPositions__SWIG_1(swigCPtr, floatArray);
  }

  public void SetWorldRotations(float[] floatArray) {
    VixenLibPINVOKE.Pose_SetWorldRotations(swigCPtr, floatArray);
  }

  public void GetWorldRotations(float[] floatArray) {
    VixenLibPINVOKE.Pose_GetWorldRotations__SWIG_1(swigCPtr, floatArray);
  }

  public void SetLocalRotations(float[] floatArray) {
    VixenLibPINVOKE.Pose_SetLocalRotations(swigCPtr, floatArray);
  }

  public static readonly int WORLD = VixenLibPINVOKE.Pose_WORLD_get();
  public static readonly int BIND_POSE_RELATIVE = VixenLibPINVOKE.Pose_BIND_POSE_RELATIVE_get();
  public static readonly int SKELETON = VixenLibPINVOKE.Pose_SKELETON_get();
  public static readonly int BIND_POSE = VixenLibPINVOKE.Pose_BIND_POSE_get();

}

}
