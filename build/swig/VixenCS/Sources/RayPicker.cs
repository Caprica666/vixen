/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class RayPicker : Picker {
  private HandleRef swigCPtr;

  internal RayPicker(IntPtr cPtr, bool cMemoryOwn) : base(VixenLibPINVOKE.RayPicker_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(RayPicker obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~RayPicker() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_RayPicker(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public RayPicker() : this(VixenLibPINVOKE.new_RayPicker(), true) {
  }

  public void SetPickShape(Model mod) {
    VixenLibPINVOKE.RayPicker_SetPickShape(swigCPtr, Model.getCPtr(mod));
  }

  public Model GetPickShape() 
	{
		IntPtr cPtr = VixenLibPINVOKE.RayPicker_GetPickShape(swigCPtr);
		return (Model)  SharedObj.MakeObject(cPtr, true);
	}


  public void SetRay(Ray r) {
    VixenLibPINVOKE.RayPicker_SetRay(swigCPtr, Ray.getCPtr(r));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Ray GetRay() {
    Ray ret = new Ray(VixenLibPINVOKE.RayPicker_GetRay(swigCPtr), false);
    return ret;
  }

  public Model PickShape {
    set {
      VixenLibPINVOKE.RayPicker_PickShape_set(swigCPtr, Model.getCPtr(value));
    } 
	get
	{
		IntPtr cPtr = VixenLibPINVOKE.RayPicker_PickShape_get(swigCPtr);
		return (Model) SharedObj.MakeObject(cPtr, false);
	}

  }

  public Ray Ray {
    set {
      VixenLibPINVOKE.RayPicker_Ray_set(swigCPtr, Ray.getCPtr(value));
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      Ray ret = new Ray(VixenLibPINVOKE.RayPicker_Ray_get(swigCPtr), false);
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
