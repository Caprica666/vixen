/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class Matrix : SharedObj {
  private HandleRef swigCPtr;

  internal Matrix(IntPtr cPtr, bool cMemoryOwn) : base(VixenLibPINVOKE.Matrix_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Matrix obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Matrix() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_Matrix(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Matrix() : this(VixenLibPINVOKE.new_Matrix__SWIG_0(), true) {
  }

  public Matrix(Matrix rhs) : this(VixenLibPINVOKE.new_Matrix__SWIG_1(Matrix.getCPtr(rhs)), true) {
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Matrix(Quat arg0) : this(VixenLibPINVOKE.new_Matrix__SWIG_2(Quat.getCPtr(arg0)), true) {
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Matrix(float[] floatArray) : this(VixenLibPINVOKE.new_Matrix__SWIG_3(floatArray), true) {
  }

  public void Identity() {
    VixenLibPINVOKE.Matrix_Identity(swigCPtr);
  }

  public void Zero() {
    VixenLibPINVOKE.Matrix_Zero(swigCPtr);
  }

  public void ScaleMatrix(Vec3 arg0) {
    VixenLibPINVOKE.Matrix_ScaleMatrix(swigCPtr, Vec3.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void TranslationMatrix(Vec3 arg0) {
    VixenLibPINVOKE.Matrix_TranslationMatrix(swigCPtr, Vec3.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Translate(Vec3 arg0) {
    VixenLibPINVOKE.Matrix_Translate__SWIG_0(swigCPtr, Vec3.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Translate(float x, float y, float z) {
    VixenLibPINVOKE.Matrix_Translate__SWIG_1(swigCPtr, x, y, z);
  }

  public void Scale(Vec3 arg0) {
    VixenLibPINVOKE.Matrix_Scale__SWIG_0(swigCPtr, Vec3.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Scale(float x, float y, float z) {
    VixenLibPINVOKE.Matrix_Scale__SWIG_1(swigCPtr, x, y, z);
  }

  public void LookAt(Vec3 v, float twist) {
    VixenLibPINVOKE.Matrix_LookAt(swigCPtr, Vec3.getCPtr(v), twist);
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Rotate(Vec3 axis, float angle) {
    VixenLibPINVOKE.Matrix_Rotate__SWIG_0(swigCPtr, Vec3.getCPtr(axis), angle);
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Rotate(Quat q) {
    VixenLibPINVOKE.Matrix_Rotate__SWIG_1(swigCPtr, Quat.getCPtr(q));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set(Quat arg0) {
    VixenLibPINVOKE.Matrix_Set__SWIG_0(swigCPtr, Quat.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RotationMatrix(Quat arg0) {
    VixenLibPINVOKE.Matrix_RotationMatrix__SWIG_0(swigCPtr, Quat.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RotationMatrix(Vec3 v, float angle) {
    VixenLibPINVOKE.Matrix_RotationMatrix__SWIG_1(swigCPtr, Vec3.getCPtr(v), angle);
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void XAngleMatrix(float angle) {
    VixenLibPINVOKE.Matrix_XAngleMatrix(swigCPtr, angle);
  }

  public void YAngleMatrix(float angle) {
    VixenLibPINVOKE.Matrix_YAngleMatrix(swigCPtr, angle);
  }

  public void ZAngleMatrix(float angle) {
    VixenLibPINVOKE.Matrix_ZAngleMatrix(swigCPtr, angle);
  }

  public static Matrix GetIdentity() {
    IntPtr cPtr = VixenLibPINVOKE.Matrix_GetIdentity();
    Matrix ret = (cPtr == IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public void SetMatrix(float[] floatArray) {
    VixenLibPINVOKE.Matrix_SetMatrix(swigCPtr, floatArray);
  }

  public Vec4 GetRotationAxis() {
    Vec4 ret = new Vec4(VixenLibPINVOKE.Matrix_GetRotationAxis(swigCPtr), true);
    return ret;
  }

  public void Set(int i1, int i2, float arg2) {
    VixenLibPINVOKE.Matrix_Set__SWIG_1(swigCPtr, i1, i2, arg2);
  }

  public float Get(int i1, int i2) {
    float ret = VixenLibPINVOKE.Matrix_Get(swigCPtr, i1, i2);
    return ret;
  }

  public bool IsIdentity() {
    bool ret = VixenLibPINVOKE.Matrix_IsIdentity(swigCPtr);
    return ret;
  }

  public void Copy(Matrix src) {
    VixenLibPINVOKE.Matrix_Copy__SWIG_0(swigCPtr, Matrix.getCPtr(src));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool Copy(SharedObj arg0) {
    bool ret = VixenLibPINVOKE.Matrix_Copy__SWIG_1(swigCPtr, SharedObj.getCPtr(arg0));
    return ret;
  }

  public void Touch() {
    VixenLibPINVOKE.Matrix_Touch(swigCPtr);
  }

  public void GetTranslation(Vec3 arg0) {
    VixenLibPINVOKE.Matrix_GetTranslation(swigCPtr, Vec3.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTranslation(Vec3 arg0) {
    VixenLibPINVOKE.Matrix_SetTranslation(swigCPtr, Vec3.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetScale(Vec3 arg0) {
    VixenLibPINVOKE.Matrix_GetScale(swigCPtr, Vec3.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetRotation(Vec3 OUTPUT) {
    VixenLibPINVOKE.Matrix_GetRotation(swigCPtr, Vec3.getCPtr(OUTPUT));
  }

  public void PreMul(Matrix arg0) {
    VixenLibPINVOKE.Matrix_PreMul(swigCPtr, Matrix.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PostMul(Matrix arg0) {
    VixenLibPINVOKE.Matrix_PostMul(swigCPtr, Matrix.getCPtr(arg0));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Multiply(Matrix arg0, Matrix arg1) {
    VixenLibPINVOKE.Matrix_Multiply(swigCPtr, Matrix.getCPtr(arg0), Matrix.getCPtr(arg1));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Transpose() {
    VixenLibPINVOKE.Matrix_Transpose(swigCPtr);
  }

  public void Invert(Matrix src) {
    VixenLibPINVOKE.Matrix_Invert__SWIG_0(swigCPtr, Matrix.getCPtr(src));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Invert() {
    VixenLibPINVOKE.Matrix_Invert__SWIG_1(swigCPtr);
  }

  public void Transform(Vec4 src, Vec4 dst) {
    VixenLibPINVOKE.Matrix_Transform__SWIG_0(swigCPtr, Vec4.getCPtr(src), Vec4.getCPtr(dst));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Transform(Vec3 src, Vec4 dst) {
    VixenLibPINVOKE.Matrix_Transform__SWIG_1(swigCPtr, Vec3.getCPtr(src), Vec4.getCPtr(dst));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Transform(Vec3 src, Vec3 dst) {
    VixenLibPINVOKE.Matrix_Transform__SWIG_2(swigCPtr, Vec3.getCPtr(src), Vec3.getCPtr(dst));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void TransformVector(Vec3 src, Vec3 dst) {
    VixenLibPINVOKE.Matrix_TransformVector(swigCPtr, Vec3.getCPtr(src), Vec3.getCPtr(dst));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Transform(Sphere src, Sphere dst) {
    VixenLibPINVOKE.Matrix_Transform__SWIG_3(swigCPtr, Sphere.getCPtr(src), Sphere.getCPtr(dst));
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
