/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Vixen {

using System;
using System.Runtime.InteropServices;

public class TrackEvent : Event {
  private HandleRef swigCPtr;

  internal TrackEvent(IntPtr cPtr, bool cMemoryOwn) : base(VixenLibPINVOKE.TrackEvent_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(TrackEvent obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~TrackEvent() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VixenLibPINVOKE.delete_TrackEvent(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public TrackEvent(int code, SharedObj sender) : this(VixenLibPINVOKE.new_TrackEvent__SWIG_0(code, SharedObj.getCPtr(sender)), true) {
  }

  public TrackEvent(int code) : this(VixenLibPINVOKE.new_TrackEvent__SWIG_1(code), true) {
  }

  public TrackEvent() : this(VixenLibPINVOKE.new_TrackEvent__SWIG_2(), true) {
  }

  public TrackEvent(int type, int userid, SharedObj sender) : this(VixenLibPINVOKE.new_TrackEvent__SWIG_3(type, userid, SharedObj.getCPtr(sender)), true) {
  }

  public TrackEvent(int type, int userid) : this(VixenLibPINVOKE.new_TrackEvent__SWIG_4(type, userid), true) {
  }

  public TrackEvent(Event src) : this(VixenLibPINVOKE.new_TrackEvent__SWIG_5(Event.getCPtr(src)), true) {
    if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int Type {
    set {
      VixenLibPINVOKE.TrackEvent_Type_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.TrackEvent_Type_get(swigCPtr);
      return ret;
    } 
  }

  public int UserID {
    set {
      VixenLibPINVOKE.TrackEvent_UserID_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.TrackEvent_UserID_get(swigCPtr);
      return ret;
    } 
  }

  public int PartIndex {
    set {
      VixenLibPINVOKE.TrackEvent_PartIndex_set(swigCPtr, value);
    } 
    get {
      int ret = VixenLibPINVOKE.TrackEvent_PartIndex_get(swigCPtr);
      return ret;
    } 
  }

  public Vec3 Position {
    set {
      VixenLibPINVOKE.TrackEvent_Position_set(swigCPtr, Vec3.getCPtr(value));
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      Vec3 ret = new Vec3(VixenLibPINVOKE.TrackEvent_Position_get(swigCPtr), false);
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Quat Rotation {
    set {
      VixenLibPINVOKE.TrackEvent_Rotation_set(swigCPtr, Quat.getCPtr(value));
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      Quat ret = new Quat(VixenLibPINVOKE.TrackEvent_Rotation_get(swigCPtr), false);
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string PartName {
    set {
      VixenLibPINVOKE.TrackEvent_PartName_set(swigCPtr, value);
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
    } 
		get {
		  string ret = VixenLibPINVOKE.TrackEvent_PartName_get(swigCPtr);
      if (VixenLibPINVOKE.SWIGPendingException.Pending) throw VixenLibPINVOKE.SWIGPendingException.Retrieve();
		  return ret;
		}
	
  }

  public static readonly int UNKNOWN = VixenLibPINVOKE.TrackEvent_UNKNOWN_get();
  public static readonly int NEW_USER = VixenLibPINVOKE.TrackEvent_NEW_USER_get();
  public static readonly int LOST_USER = VixenLibPINVOKE.TrackEvent_LOST_USER_get();
  public static readonly int START_BODY_TRACK = VixenLibPINVOKE.TrackEvent_START_BODY_TRACK_get();
  public static readonly int STOP_BODY_TRACK = VixenLibPINVOKE.TrackEvent_STOP_BODY_TRACK_get();
  public static readonly int PAUSE_BODY_TRACK = VixenLibPINVOKE.TrackEvent_PAUSE_BODY_TRACK_get();
  public static readonly int USER_MOVE = VixenLibPINVOKE.TrackEvent_USER_MOVE_get();
  public static readonly int INIT_DONE = VixenLibPINVOKE.TrackEvent_INIT_DONE_get();
  public static readonly int USER_TURN = VixenLibPINVOKE.TrackEvent_USER_TURN_get();

}

}
